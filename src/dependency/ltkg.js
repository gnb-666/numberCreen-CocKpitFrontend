/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/css-loader/dist/cjs.js!./src/kg/core/common/main.css":
/*!***************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/kg/core/common/main.css ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(false);\n// Module\n___CSS_LOADER_EXPORT___.push([module.i, \".kg-node {\\r\\n  stroke: rgba(255, 255,255, 0.7);\\r\\n  cursor: pointer;\\r\\n  transition: stroke-width 0.3s, opacity ease .8s;\\r\\n\\r\\n}\\r\\n\\r\\n.node-image {\\r\\n  cursor: pointer;\\r\\n  transition: opacity ease .8s;\\r\\n}\\r\\n\\r\\n.node-hover {\\r\\n  stroke-width: 5px;\\r\\n}\\r\\n@keyframes selectingFlash{\\r\\n  0%{\\r\\n    stroke-width: 0px;\\r\\n    stroke: none;\\r\\n  }\\r\\n  50%{\\r\\n    stroke-width: 5px;\\r\\n    stroke: rgba(224, 229, 233, 0.8);\\r\\n  }\\r\\n  100%{\\r\\n  }\\r\\n}\\r\\n@keyframes selectingRotate{\\r\\n  0%{\\r\\n    stroke-width: 3px;\\r\\n    stroke-dasharray: 15;\\r\\n    stroke-dashoffset: 0;\\r\\n  }\\r\\n  50%{\\r\\n    stroke-width: 6px;\\r\\n    stroke-dasharray: 15;\\r\\n    stroke-dashoffset: 5;\\r\\n  }\\r\\n  100%{\\r\\n\\r\\n  }\\r\\n}\\r\\n.selecting {\\r\\n  animation: selectingFlash 1s ease-in both infinite;;\\r\\n}\\r\\n\\r\\n.lose-focus {\\r\\n  opacity: 0.2;\\r\\n}\\r\\n\\r\\n.menu-item {\\r\\n  fill: #00b3ae;\\r\\n}\\r\\n@keyframes dash {\\r\\n  0% {\\r\\n    stroke-dasharray: 1,150;\\r\\n    stroke-dashoffset: 0;\\r\\n  }\\r\\n\\r\\n  50% {\\r\\n      stroke-dasharray: 90,150;\\r\\n      stroke-dashoffset: -35;\\r\\n  }\\r\\n  100% {\\r\\n      stroke-dasharray: 90,150;\\r\\n      stroke-dashoffset: -124;\\r\\n  }\\r\\n}\\r\\n.menu-item {\\r\\n  stroke-linecap: round;\\r\\n  stroke-linejoin: round;\\r\\n  stroke: #373e41;\\r\\n  stroke-width: 0;\\r\\n  fill: #6162cef2;\\r\\n  stroke-dasharray: 500;\\r\\n  stroke-dashoffset: 500;\\r\\n  animation: dash 1.5s linear forwards;\\r\\n  cursor: pointer;\\r\\n  transition: fill 0.3s;\\r\\n}\\r\\n.menu-item:hover {\\r\\n  fill: #7bd7ff;\\r\\n}\\r\\n.menu-text {\\r\\n  font-size: 8px;\\r\\n  color: rgb(255, 255, 255);\\r\\n  fill: rgb(255, 255, 255);\\r\\n  pointer-events: none;\\r\\n}\\r\\n.sub-menu-text {\\r\\n  font-size: 8px;\\r\\n  color: rgb(255, 255, 255);\\r\\n  fill: rgb(255, 255, 255);\\r\\n  pointer-events: none;\\r\\n}\\r\\n\\r\\n.sub-menu-item {\\r\\n  stroke-linecap: round;\\r\\n  stroke-linejoin: round;\\r\\n  stroke: #4b5458;\\r\\n  stroke-width: 0;\\r\\n  fill: #20bf71;\\r\\n  stroke-dasharray: 500;\\r\\n  stroke-dashoffset: 500;\\r\\n  animation: dash 1.5s linear forwards;\\r\\n  cursor: pointer;\\r\\n  transition: fill 0.3s;\\r\\n}\\r\\n\\r\\n.sub-menu-item:hover {\\r\\n  fill: #83fac8;\\r\\n}\\r\\n\\r\\n.dashOut {\\r\\n  transition: all ease 0.3s;\\r\\n  opacity: 0;\\r\\n  visibility: hidden;\\r\\n}\", \"\"]);\n// Exports\n/* harmony default export */ __webpack_exports__[\"default\"] = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack:///./src/kg/core/common/main.css?./node_modules/css-loader/dist/cjs.js");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join('');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === 'string') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || '').concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n  return \"/*# \".concat(data, \" */\");\n}\n\n//# sourceURL=webpack:///./node_modules/css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : undefined;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && btoa) {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack:///./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n//# sourceURL=webpack:///(webpack)/buildin/harmony-module.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _kg_core_graph_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./kg/core/graph/core */ \"./src/kg/core/graph/core.js\");\n\r\n\r\n\r\n(function() {\r\n  window.kg = _kg_core_graph_core__WEBPACK_IMPORTED_MODULE_0__\r\n  if ( true && typeof module.exports !== 'undefined') {\r\n    module.exports = _kg_core_graph_core__WEBPACK_IMPORTED_MODULE_0__\r\n  }\r\n})()\r\n\r\n\r\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/kg/core/common/const.js":
/*!*************************************!*\
  !*** ./src/kg/core/common/const.js ***!
  \*************************************/
/*! exports provided: SVG_ID, G_ID, NODE_LAYER, LINK_LAYER, MENU_LAYER, NODE_PREFIX, NODE_TEXT_PREFIX, LINK_DISTANCE, MANY_BODY_STRENGTH, COLLIDE_RADIUS, SINGLE_SELECT_STATE, defaultRadius, defaultNodeColor, defaultNodeTextColor, defaultNodeClass, defaultNodeSelectingClass, defaultNodeHoverClass, defaultNodeCover, defaultNodeCoverClass, defaultLinkColor, defaultLinkTextColor, defaultLinkClass, defaultLinkWidth, defaultLinkTextClass, defaultMenuItemClass, defaultMenuTextClass, defaultSubMenuItemClass, defaultMenuActiveClass, defaultSubMenuTextClass, CLICK, MOUSE_OVER, MOUSE_OUT, MOUSE_DOWN, MOUSE_UP, DBLCLICK */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SVG_ID\", function() { return SVG_ID; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"G_ID\", function() { return G_ID; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NODE_LAYER\", function() { return NODE_LAYER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LINK_LAYER\", function() { return LINK_LAYER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MENU_LAYER\", function() { return MENU_LAYER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NODE_PREFIX\", function() { return NODE_PREFIX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NODE_TEXT_PREFIX\", function() { return NODE_TEXT_PREFIX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LINK_DISTANCE\", function() { return LINK_DISTANCE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MANY_BODY_STRENGTH\", function() { return MANY_BODY_STRENGTH; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"COLLIDE_RADIUS\", function() { return COLLIDE_RADIUS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SINGLE_SELECT_STATE\", function() { return SINGLE_SELECT_STATE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultRadius\", function() { return defaultRadius; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultNodeColor\", function() { return defaultNodeColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultNodeTextColor\", function() { return defaultNodeTextColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultNodeClass\", function() { return defaultNodeClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultNodeSelectingClass\", function() { return defaultNodeSelectingClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultNodeHoverClass\", function() { return defaultNodeHoverClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultNodeCover\", function() { return defaultNodeCover; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultNodeCoverClass\", function() { return defaultNodeCoverClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultLinkColor\", function() { return defaultLinkColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultLinkTextColor\", function() { return defaultLinkTextColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultLinkClass\", function() { return defaultLinkClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultLinkWidth\", function() { return defaultLinkWidth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultLinkTextClass\", function() { return defaultLinkTextClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultMenuItemClass\", function() { return defaultMenuItemClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultMenuTextClass\", function() { return defaultMenuTextClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultSubMenuItemClass\", function() { return defaultSubMenuItemClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultMenuActiveClass\", function() { return defaultMenuActiveClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultSubMenuTextClass\", function() { return defaultSubMenuTextClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CLICK\", function() { return CLICK; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MOUSE_OVER\", function() { return MOUSE_OVER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MOUSE_OUT\", function() { return MOUSE_OUT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MOUSE_DOWN\", function() { return MOUSE_DOWN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MOUSE_UP\", function() { return MOUSE_UP; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DBLCLICK\", function() { return DBLCLICK; });\nconst SVG_ID = 'kg-cavnas'\r\nconst G_ID = 'kg-content'\r\nconst NODE_LAYER = 'nodes-layer'\r\nconst LINK_LAYER = 'links-layer'\r\nconst MENU_LAYER = 'menu-layer'\r\nconst NODE_PREFIX = 'node-circle'\r\nconst NODE_TEXT_PREFIX = 'node-text'\r\n\r\nconst CLICK = 0\r\nconst MOUSE_OVER = 1\r\nconst MOUSE_OUT = 2\r\nconst MOUSE_DOWN = 3\r\nconst MOUSE_UP = 4\r\nconst DBLCLICK = 5\r\n\r\nconst defaultRadius = 20\r\nconst defaultNodeColor = '#fff'\r\nconst defaultNodeTextColor = '#fff'\r\nconst defaultNodeClass = 'kg-node'\r\nconst defaultNodeHoverClass = 'node-hover'\r\nconst defaultNodeCover = ''\r\nconst defaultNodeCoverClass = 'node-image'\r\nconst defaultNodeSelectingClass = 'node-selecting'\r\n\r\nconst defaultLinkColor = '#ccc'\r\nconst defaultLinkTextColor = '#fff'\r\nconst defaultLinkClass = 'kg-link'\r\nconst defaultLinkTextClass = 'kg-link-text'\r\nconst defaultLinkWidth = 1\r\n\r\n\r\nconst defaultMenuItemClass = 'menu-item'\r\nconst defaultMenuActiveClass = 'menu-item-active'\r\nconst defaultSubMenuItemClass = 'sub-menu-item'\r\nconst defaultMenuTextClass = 'menu-text'\r\nconst defaultSubMenuTextClass = 'sub-menu-text'\r\n\r\n\r\n/* 以下暂未处理优化，未进入文档 */\r\nconst LINK_DISTANCE = 0\r\nconst MANY_BODY_STRENGTH = 1\r\nconst COLLIDE_RADIUS = 2\r\n\r\nconst SINGLE_SELECT_STATE = 0\r\nconst MULTI_SELECT_STATE = 1\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./src/kg/core/common/const.js?");

/***/ }),

/***/ "./src/kg/core/common/main.css":
/*!*************************************!*\
  !*** ./src/kg/core/common/main.css ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var api = __webpack_require__(/*! ../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = __webpack_require__(/*! !../../../../node_modules/css-loader/dist/cjs.js!./main.css */ \"./node_modules/css-loader/dist/cjs.js!./src/kg/core/common/main.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.i, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};\n\n//# sourceURL=webpack:///./src/kg/core/common/main.css?");

/***/ }),

/***/ "./src/kg/core/common/preprocess.js":
/*!******************************************!*\
  !*** ./src/kg/core/common/preprocess.js ***!
  \******************************************/
/*! exports provided: preprocess */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"preprocess\", function() { return preprocess; });\n/* harmony import */ var _const__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./const */ \"./src/kg/core/common/const.js\");\n\r\n\r\n\r\nfunction guid() {\r\n  return Number(Math.random().toString().substr(3, 3) + Date.now()).toString(36);\r\n}\r\n\r\nfunction preprocess (nodes, links, menu) {\r\n  let nodesAfterProcess = []\r\n  let linksAfterProcess = []\r\n  let menuAfterProcess = {}\r\n\r\n  nodesAfterProcess = nodes.map(n => \r\n    Object.assign({\r\n      name: '',\r\n      r: _const__WEBPACK_IMPORTED_MODULE_0__[\"defaultRadius\"],\r\n      color: _const__WEBPACK_IMPORTED_MODULE_0__[\"defaultNodeColor\"],\r\n      textColor: _const__WEBPACK_IMPORTED_MODULE_0__[\"defaultNodeTextColor\"],\r\n      nodeClass: _const__WEBPACK_IMPORTED_MODULE_0__[\"defaultNodeClass\"],\r\n      nodeHoverClass: _const__WEBPACK_IMPORTED_MODULE_0__[\"defaultNodeHoverClass\"],\r\n      nodeSelectingClass: _const__WEBPACK_IMPORTED_MODULE_0__[\"defaultNodeSelectingClass\"],\r\n      cover: _const__WEBPACK_IMPORTED_MODULE_0__[\"defaultNodeCover\"],\r\n      hoverCover: false,\r\n      coverClass:_const__WEBPACK_IMPORTED_MODULE_0__[\"defaultNodeCoverClass\"]\r\n    }, n)\r\n  )\r\n\r\n  linksAfterProcess = links.map(l => {\r\n    const relLinks = links.filter(i => {\r\n      if ((i.source === l.source && i.target === l.target && l.id !== i.id) || \r\n        (i.source === l.target && i.target === l.source && l.id !== i.id)) {\r\n          return true\r\n      }\r\n    })\r\n    const pathCount = relLinks.length + 1\r\n    let curIndex = -1\r\n    for (const i of relLinks) {\r\n      if (i.pathIndex !== undefined && i.pathIndex > curIndex) {\r\n        curIndex = i.pathIndex\r\n      }\r\n    }\r\n    l.pathIndex = ++curIndex\r\n    l.pathCount = pathCount > 1 ? pathCount : 1\r\n\r\n    return Object.assign({\r\n      type: '',\r\n      pathIndex: 0,\r\n      pathCount: 1,\r\n      color: _const__WEBPACK_IMPORTED_MODULE_0__[\"defaultLinkColor\"],\r\n      textColor: _const__WEBPACK_IMPORTED_MODULE_0__[\"defaultLinkTextColor\"],\r\n      linkClass: _const__WEBPACK_IMPORTED_MODULE_0__[\"defaultLinkClass\"],\r\n      textClass: _const__WEBPACK_IMPORTED_MODULE_0__[\"defaultLinkTextClass\"],\r\n      width: _const__WEBPACK_IMPORTED_MODULE_0__[\"defaultLinkWidth\"]  \r\n    }, l)\r\n  })\r\n\r\n  \r\n  for (const [k, v] of Object.entries(menu)) {\r\n    menuAfterProcess[k] = v.map(m => {\r\n      m = Object.assign({\r\n        id: guid(),\r\n        level: 1,\r\n        size: 1,\r\n        children: [],\r\n        type: 'ltkg',\r\n        menuClass: _const__WEBPACK_IMPORTED_MODULE_0__[\"defaultMenuItemClass\"],\r\n        menuHoverClass: '',\r\n        menuTextClass: _const__WEBPACK_IMPORTED_MODULE_0__[\"defaultMenuTextClass\"],\r\n        menuActiveClass: _const__WEBPACK_IMPORTED_MODULE_0__[\"defaultMenuActiveClass\"],\r\n        subMenuClass: _const__WEBPACK_IMPORTED_MODULE_0__[\"defaultSubMenuItemClass\"],\r\n        subMenuHoverClass: '',\r\n        subMenuTextClass: _const__WEBPACK_IMPORTED_MODULE_0__[\"defaultSubMenuTextClass\"],  \r\n      }, m)\r\n      let sub = m.children.map(s =>\r\n        Object.assign({\r\n          id: guid(),\r\n          level: 2,\r\n          size: 1,\r\n          menuClass: _const__WEBPACK_IMPORTED_MODULE_0__[\"defaultMenuItemClass\"],\r\n          menuHoverClass: '',\r\n          menuTextClass: _const__WEBPACK_IMPORTED_MODULE_0__[\"defaultMenuTextClass\"],\r\n          menuActiveClass: _const__WEBPACK_IMPORTED_MODULE_0__[\"defaultMenuActiveClass\"],\r\n          subMenuClass: _const__WEBPACK_IMPORTED_MODULE_0__[\"defaultSubMenuItemClass\"],\r\n          subMenuHoverClass: '',\r\n          subMenuTextClass: _const__WEBPACK_IMPORTED_MODULE_0__[\"defaultSubMenuTextClass\"],\r\n          event: null,\r\n        }, s)\r\n      )\r\n      m.children = sub\r\n      return m\r\n    })\r\n  }\r\n  \r\n  return {\r\n    _nodes: nodesAfterProcess,\r\n    _links: linksAfterProcess,\r\n    _menu: menuAfterProcess\r\n  }\r\n\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./src/kg/core/common/preprocess.js?");

/***/ }),

/***/ "./src/kg/core/events/canvasEvents.js":
/*!********************************************!*\
  !*** ./src/kg/core/events/canvasEvents.js ***!
  \********************************************/
/*! exports provided: addCanvasEvent, clickCanvas, clearCanvasEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addCanvasEvent\", function() { return addCanvasEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clickCanvas\", function() { return clickCanvas; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clearCanvasEvent\", function() { return clearCanvasEvent; });\n/* harmony import */ var _graph_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../graph/core */ \"./src/kg/core/graph/core.js\");\n/* harmony import */ var _common_const__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/const */ \"./src/kg/core/common/const.js\");\n\r\n\r\n\r\nconst canvasEventPool = [];\r\n\r\nconst clearCanvasEvent = () => {\r\n  canvasEventPool = []\r\n}\r\n\r\nconst addCanvasEvent = (trigger, handler) => {\r\n  canvasEventPool.push({\r\n    trigger,\r\n    handler,\r\n  });\r\n};\r\n\r\nconst clickCanvas = e => {\r\n  canvasEventPool.filter(i => i.trigger === _common_const__WEBPACK_IMPORTED_MODULE_1__[\"CLICK\"]).forEach(i => i.handler(e));\r\n};\r\n\r\naddCanvasEvent(_common_const__WEBPACK_IMPORTED_MODULE_1__[\"CLICK\"], d => {\r\n  _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].selectAll('#' + _common_const__WEBPACK_IMPORTED_MODULE_1__[\"MENU_LAYER\"]).remove();\r\n\r\n  _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].selectAll('.lose-focus').classed('lose-focus', false);\r\n\r\n  _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].selectAll('.selecting').classed('selecting', false);\r\n});\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./src/kg/core/events/canvasEvents.js?");

/***/ }),

/***/ "./src/kg/core/events/drag.js":
/*!************************************!*\
  !*** ./src/kg/core/events/drag.js ***!
  \************************************/
/*! exports provided: dragstarted, dragended, dragged, drag */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dragstarted\", function() { return dragstarted; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dragended\", function() { return dragended; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dragged\", function() { return dragged; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"drag\", function() { return drag; });\n/* harmony import */ var _graph_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../graph/core */ \"./src/kg/core/graph/core.js\");\n/* harmony import */ var _common_const__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/const */ \"./src/kg/core/common/const.js\");\n\r\n\r\n\r\nconst drag = _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].drag();\r\ndrag.filter(() => !_graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.button)\r\n\r\nfunction dragstarted() {\r\n  if (!_graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.active) _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"simulation\"].alphaTarget(0.3).restart()\r\n  _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].selectAll('#' + _common_const__WEBPACK_IMPORTED_MODULE_1__[\"MENU_LAYER\"]).remove()\r\n  _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.subject.fx = _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.subject.x\r\n  _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.subject.fy = _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.subject.y\r\n  _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.subject.active = true\r\n}\r\n\r\nfunction dragged() {\r\n  _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.subject.fx = _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.x\r\n  _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.subject.fy = _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.y\r\n}\r\n\r\nfunction dragended() {\r\n  if (!_graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.active) _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"simulation\"].alphaTarget(0);\r\n  if (!_graph_core__WEBPACK_IMPORTED_MODULE_0__[\"settings\"].dragLock) { // 无拖动锁，不固定\r\n    _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.subject.fx = null\r\n    _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.subject.fy = null\r\n  }\r\n  _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.subject.active = false;\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./src/kg/core/events/drag.js?");

/***/ }),

/***/ "./src/kg/core/events/menuEvents.js":
/*!******************************************!*\
  !*** ./src/kg/core/events/menuEvents.js ***!
  \******************************************/
/*! exports provided: addMenuEvent, clickMenu, overMenu, outMenu, downMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addMenuEvent\", function() { return addMenuEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clickMenu\", function() { return clickMenu; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"overMenu\", function() { return overMenu; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"outMenu\", function() { return outMenu; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"downMenu\", function() { return downMenu; });\n/* harmony import */ var _common_const__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/const */ \"./src/kg/core/common/const.js\");\n\r\n\r\nconst menuEventPool = []\r\n\r\nconst addMenuEvent = (type, trigger, handler) => {\r\n  menuEventPool.push({\r\n    type,\r\n    trigger,\r\n    handler\r\n  })\r\n}\r\n\r\nconst clickMenu = d => {\r\n  menuEventPool.filter(i => i.trigger === _common_const__WEBPACK_IMPORTED_MODULE_0__[\"CLICK\"] && d.data.type === i.type)\r\n    .forEach(i => i.handler(d, i.type))\r\n}\r\n\r\nconst overMenu = d => {\r\n  menuEventPool.filter(i => i.trigger === _common_const__WEBPACK_IMPORTED_MODULE_0__[\"MOUSE_OVER\"] && d.data.type === i.type)\r\n    .forEach(i =>  i.handler(d, i.type))\r\n}\r\n\r\nconst outMenu = d => {\r\n  menuEventPool.filter(i => i.trigger === _common_const__WEBPACK_IMPORTED_MODULE_0__[\"MOUSE_OUT\"] && d.data.type === i.type)\r\n    .forEach(i => i.handler(d, i.type))\r\n}\r\n\r\nconst downMenu = d => {\r\n  menuEventPool.filter(i => i.trigger === _common_const__WEBPACK_IMPORTED_MODULE_0__[\"MOUSE_DOWN\"] && d.data.type === i.type)\r\n    .forEach(i => i.handler(d, i.type))\r\n}\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./src/kg/core/events/menuEvents.js?");

/***/ }),

/***/ "./src/kg/core/events/nodeEvents.js":
/*!******************************************!*\
  !*** ./src/kg/core/events/nodeEvents.js ***!
  \******************************************/
/*! exports provided: clickNode, dblclickNode, overNode, outNode, downNode, upNode, addNodeEvent, clearNodeEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clickNode\", function() { return clickNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dblclickNode\", function() { return dblclickNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"overNode\", function() { return overNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"outNode\", function() { return outNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"downNode\", function() { return downNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"upNode\", function() { return upNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addNodeEvent\", function() { return addNodeEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clearNodeEvent\", function() { return clearNodeEvent; });\n/* harmony import */ var _graph_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../graph/core */ \"./src/kg/core/graph/core.js\");\n/* harmony import */ var _graph_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../graph/utils */ \"./src/kg/core/graph/utils.js\");\n/* harmony import */ var _menu_menu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../menu/menu */ \"./src/kg/core/menu/menu.js\");\nconst {\r\n  CLICK,\r\n  MOUSE_OVER,\r\n  MOUSE_OUT,\r\n  MOUSE_DOWN,\r\n  MOUSE_UP,\r\n  DBLCLICK,\r\n  NODE_PREFIX,\r\n  defaultNodeClass,\r\n  defaultNodeCoverClass,\r\n  defaultLinkClass,\r\n} = __webpack_require__(/*! ../common/const */ \"./src/kg/core/common/const.js\");\r\n\r\n\r\n\r\n\r\nconst nodeEventPool = [];\r\n\r\nconst clearNodeEvent = () => {\r\n  nodeEventPool = [];\r\n};\r\n\r\nconst addNodeEvent = (trigger, handler) => {\r\n  nodeEventPool.push({\r\n    trigger,\r\n    handler,\r\n  });\r\n};\r\n\r\nconst clickNode = d => {\r\n  nodeEventPool.filter(i => i.trigger === CLICK).forEach(i => i.handler(d));\r\n};\r\n\r\nconst dblclickNode = d => {\r\n  nodeEventPool.filter(i => i.trigger === DBLCLICK).forEach(i => i.handler(d));\r\n};\r\n\r\nconst overNode = d => {\r\n  nodeEventPool.filter(i => i.trigger === MOUSE_OVER).forEach(i => i.handler(d));\r\n};\r\n\r\nconst outNode = d => {\r\n  nodeEventPool.filter(i => i.trigger === MOUSE_OUT).forEach(i => i.handler(d));\r\n};\r\n\r\nconst downNode = d => {\r\n  nodeEventPool.filter(i => i.trigger === MOUSE_DOWN).forEach(i => i.handler(d));\r\n};\r\n\r\nconst upNode = d => {\r\n  nodeEventPool.filter(i => i.trigger === MOUSE_UP).forEach(i => i.handler(d));\r\n};\r\n\r\naddNodeEvent(MOUSE_OVER, d => {\r\n  _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].select(`#${NODE_PREFIX}_${d.id}`).classed(d.nodeHoverClass, true);\r\n  _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].select(undefined).attr('xlink:href', d => (d.hoverCover ? d.hoverCover : d.cover));\r\n});\r\n\r\naddNodeEvent(MOUSE_OUT, d => {\r\n  _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].select(`#${NODE_PREFIX}_${d.id}`).classed(d.nodeHoverClass, false);\r\n  _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].select(undefined).attr('xlink:href', d => d.cover);\r\n});\r\n\r\naddNodeEvent(MOUSE_DOWN, d => {\r\n  d.fx = d.x;\r\n  d.fy = d.y;\r\n  _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.stopPropagation();\r\n});\r\n\r\naddNodeEvent(MOUSE_UP, d => {\r\n  if (_graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.button === 2) {\r\n    Object(_menu_menu__WEBPACK_IMPORTED_MODULE_2__[\"getMenu\"])(d);\r\n  }\r\n  _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.stopPropagation();\r\n});\r\n\r\naddNodeEvent(CLICK, d => {\r\n  _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.stopPropagation();\r\n});\r\n\r\naddNodeEvent(DBLCLICK, d => {\r\n  if (_graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.button === 0) {\r\n    _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].selectAll('.' + defaultNodeClass).classed('lose-focus', true);\r\n    _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].selectAll('.' + defaultNodeCoverClass).classed('lose-focus', true);\r\n    _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].selectAll('.' + defaultLinkClass).classed('lose-focus', true);\r\n    _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].selectAll('.selecting').classed('selecting', false);\r\n\r\n    // focus以及关联点亮\r\n    const { nodes, links } = Object(_graph_core__WEBPACK_IMPORTED_MODULE_0__[\"getGraphData\"])();\r\n    const linkNodes = Object(_graph_utils__WEBPACK_IMPORTED_MODULE_1__[\"getRelatedNodes\"])(nodes, links, d.id);\r\n    Object(_graph_utils__WEBPACK_IMPORTED_MODULE_1__[\"operationLinkByNode\"])(links, d.id, (l)=>{\r\n      _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].select( `#${defaultLinkClass}-${l.id}`).classed('lose-focus', false);\r\n    })\r\n    linkNodes.push(d.id);\r\n    linkNodes.forEach(n => {\r\n      _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].select(`#${NODE_PREFIX}_${n}`).classed('lose-focus', false);\r\n      _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].select(`#${NODE_PREFIX}_cover_${n}`).classed('lose-focus', false);\r\n      \r\n    });\r\n    // focus高亮闪烁\r\n    _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].select(`#${NODE_PREFIX}_${d.id}`)\r\n        .classed('lose-focus', false)\r\n        .classed(d.nodeSelectingClass + ' selecting', true);\r\n  }\r\n  _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.stopPropagation();\r\n});\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./src/kg/core/events/nodeEvents.js?");

/***/ }),

/***/ "./src/kg/core/events/zoom.js":
/*!************************************!*\
  !*** ./src/kg/core/events/zoom.js ***!
  \************************************/
/*! exports provided: zoom, zoomStart, zooming, zoomEnd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"zoom\", function() { return zoom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"zoomStart\", function() { return zoomStart; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"zooming\", function() { return zooming; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"zoomEnd\", function() { return zoomEnd; });\n/* harmony import */ var _graph_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../graph/core */ \"./src/kg/core/graph/core.js\");\n\r\n\r\n\r\nlet currrentTransform = null\r\n\r\nconst zoom = _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].zoom()\r\n\r\nfunction zoomStart() {\r\n  // console.log('zoom start')\r\n}\r\nfunction zooming() {\r\n  _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"contentbBody\"].attr('transform', `translate(${_graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].zoomTransform(this).x},${_graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].zoomTransform(this).y}) scale(${_graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].zoomTransform(this).k})`);\r\n}\r\nfunction zoomEnd() {\r\n  currrentTransform = _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].zoomTransform(this)\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./src/kg/core/events/zoom.js?");

/***/ }),

/***/ "./src/kg/core/graph/core.js":
/*!***********************************!*\
  !*** ./src/kg/core/graph/core.js ***!
  \***********************************/
/*! exports provided: d3, simulation, contentbBody, svg, linksLayer, nodeParts, nodesLayer, settings, init, setOption, addNodes, removeNode, getGraphData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"simulation\", function() { return simulation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"contentbBody\", function() { return contentbBody; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"svg\", function() { return svg; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"linksLayer\", function() { return linksLayer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"nodeParts\", function() { return nodeParts; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"nodesLayer\", function() { return nodesLayer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"settings\", function() { return settings; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"init\", function() { return init; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setOption\", function() { return setOption; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addNodes\", function() { return addNodes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"removeNode\", function() { return removeNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getGraphData\", function() { return getGraphData; });\n/* harmony import */ var _dependency_d3_v5_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dependency/d3.v5.js */ \"./src/kg/dependency/d3.v5.js\");\n/* harmony import */ var _dependency_d3_v5_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_dependency_d3_v5_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"d3\", function() { return _dependency_d3_v5_js__WEBPACK_IMPORTED_MODULE_0__; });\n/* harmony import */ var _common_const_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/const.js */ \"./src/kg/core/common/const.js\");\n/* harmony import */ var _events_canvasEvents_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events/canvasEvents.js */ \"./src/kg/core/events/canvasEvents.js\");\n/* harmony import */ var _events_nodeEvents__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events/nodeEvents */ \"./src/kg/core/events/nodeEvents.js\");\n/* harmony import */ var _events_zoom_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../events/zoom.js */ \"./src/kg/core/events/zoom.js\");\n/* harmony import */ var _events_drag_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../events/drag.js */ \"./src/kg/core/events/drag.js\");\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./link */ \"./src/kg/core/graph/link.js\");\n/* harmony import */ var _common_preprocess_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/preprocess.js */ \"./src/kg/core/common/preprocess.js\");\n/* harmony import */ var _menu_menu_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../menu/menu.js */ \"./src/kg/core/menu/menu.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils */ \"./src/kg/core/graph/utils.js\");\n/* harmony import */ var _common_main_css__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../common/main.css */ \"./src/kg/core/common/main.css\");\n/* harmony import */ var _common_main_css__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_common_main_css__WEBPACK_IMPORTED_MODULE_10__);\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet nodes = []\r\nlet links = []\r\n\r\nlet nodeParts, linkParts\r\n\r\nlet simulation\r\n\r\nlet containerBox = null\r\nlet containerID = ''\r\nlet width = 0\r\nlet height = 0\r\n\r\nlet svg = null\r\nlet contentbBody, nodesLayer, linksLayer\r\n\r\nlet settings = {}\r\n\r\n\r\nconst init = (dom) => {\r\n  containerBox = dom\r\n  width = dom.clientWidth\r\n  height = dom.clientHeight\r\n  containerID = dom.id\r\n  svg = null\r\n  settings = {}\r\n}\r\n\r\nconst getGraphData = () => {\r\n  return {\r\n    nodes,\r\n    links\r\n  }\r\n}\r\n\r\nconst createLayout = () => {\r\n  svg = _dependency_d3_v5_js__WEBPACK_IMPORTED_MODULE_0__[\"select\"]('#' + containerID)\r\n    .attr('oncontextmenu', () => 'self.event.returnValue=false')\r\n    .append('svg')\r\n    .attr('id', _common_const_js__WEBPACK_IMPORTED_MODULE_1__[\"SVG_ID\"])\r\n    .attr('class', _common_const_js__WEBPACK_IMPORTED_MODULE_1__[\"SVG_ID\"])\r\n    .attr('width', width)\r\n    .attr('height', height)\r\n\r\n  svg.on('click', _events_canvasEvents_js__WEBPACK_IMPORTED_MODULE_2__[\"clickCanvas\"])\r\n\r\n  svg.call(_events_zoom_js__WEBPACK_IMPORTED_MODULE_4__[\"zoom\"]\r\n     .scaleExtent([1 / 8, 8])\r\n     .on('start', _events_zoom_js__WEBPACK_IMPORTED_MODULE_4__[\"zoomStart\"])\r\n     .on('zoom', _events_zoom_js__WEBPACK_IMPORTED_MODULE_4__[\"zooming\"])\r\n     .on('end', _events_zoom_js__WEBPACK_IMPORTED_MODULE_4__[\"zoomEnd\"]))\r\n     .on('dblclick.zoom', null)\r\n\r\n  contentbBody = svg.append('g')\r\n                    .attr('class', _common_const_js__WEBPACK_IMPORTED_MODULE_1__[\"G_ID\"])\r\n\r\n  contentbBody.append('g')\r\n              .attr('id', _common_const_js__WEBPACK_IMPORTED_MODULE_1__[\"LINK_LAYER\"]);\r\n  contentbBody.append('g')\r\n              .attr('id', _common_const_js__WEBPACK_IMPORTED_MODULE_1__[\"NODE_LAYER\"]);\r\n  nodesLayer = _dependency_d3_v5_js__WEBPACK_IMPORTED_MODULE_0__[\"select\"]('#' + _common_const_js__WEBPACK_IMPORTED_MODULE_1__[\"NODE_LAYER\"]);\r\n  linksLayer = _dependency_d3_v5_js__WEBPACK_IMPORTED_MODULE_0__[\"select\"]('#' + _common_const_js__WEBPACK_IMPORTED_MODULE_1__[\"LINK_LAYER\"]);\r\n}\r\n\r\nconst createSimulation = function () {\r\n  const {linkDistance, manyBodyStrength, collideRadius} = settings\r\n  function ticked() {\r\n    if (nodeParts) {\r\n      nodeParts.selectAll('circle')\r\n               .attr('cx', d => parseFloat(d.x))\r\n               .attr('cy', d => parseFloat(d.y));\r\n      nodesLayer.selectAll('.image')\r\n                .attr('x', d => d.x - d.r)\r\n                .attr('y', d => d.y - d.r);\r\n      nodesLayer.selectAll('text')\r\n                .style('pointer-events', 'none')\r\n                .attr('x', d => d.x)\r\n                .attr('y', d => d.y);\r\n      linksLayer.selectAll('path')\r\n                .attr('d', d => Object(_link__WEBPACK_IMPORTED_MODULE_6__[\"drawLink\"])(d))\r\n                // .attr('d', d => selectPath(d).outline(selectPath(d).textWidth(d)))\r\n                .attr('x1', d => d.source.x)\r\n                .attr('y1', d => d.source.y)\r\n                .attr('x2', d => d.target.x)\r\n                .attr('y2', d => d.target.y);\r\n      linksLayer.selectAll('g')\r\n                .attr('transform', (d) => {\r\n                  const dx = d.target.x - d.source.x;\r\n                  const dy = d.target.y - d.source.y;\r\n                  const angle = (((Math.atan2(dy, dx) / Math.PI) * 180) + 360) % 360;\r\n                  d.naturalAngle = d.target.id === d.startNode ? (angle + 180) % 360 : angle;\r\n                  return `translate(${d.source.x} ${d.source.y}) rotate(${d.naturalAngle})`;\r\n                });\r\n      // 给文字添加transform，达到左右旋转后文字自动改变方向的效果\r\n      linksLayer.selectAll('text')\r\n                .style('pointer-events', 'none')\r\n                .attr('x', d => Object(_link__WEBPACK_IMPORTED_MODULE_6__[\"getLinkTextPosition\"])(d).x)\r\n                .attr('y', (d) => {\r\n                  // const arc = selectPath(d);\r\n                  const textY = Object(_link__WEBPACK_IMPORTED_MODULE_6__[\"getLinkTextPosition\"])(d).y\r\n                  const dx = d.target.x - d.source.x;\r\n                  const dy = d.target.y - d.source.y;\r\n                  const angle = (((Math.atan2(dy, dx) / Math.PI) * 180) + 360) % 360;\r\n                  d.naturalAngle = d.target.id === d.startNode ? (angle + 180) % 360 : angle;\r\n                  if (d.naturalAngle < 90 || d.naturalAngle > 270) {\r\n                    return textY;\r\n                    // return arc.textpos_y();\r\n                  }\r\n                  return textY - 60;\r\n                  // return arc.textpos_y() - 60;\r\n                })\r\n                .attr('transform', (d) => {\r\n                  // const arc = selectPath(d);\r\n                  const textPos = Object(_link__WEBPACK_IMPORTED_MODULE_6__[\"getLinkTextPosition\"])(d)\r\n                  const dx = d.target.x - d.source.x;\r\n                  const dy = d.target.y - d.source.y;\r\n                  const angle = (((Math.atan2(dy, dx) / Math.PI) * 180) + 360) % 360;\r\n                  d.naturalAngle = d.target.id === d.source.id ? (angle + 180) % 360 : angle;\r\n                  if (d.naturalAngle < 90 || d.naturalAngle > 270) {\r\n                    return null;\r\n                  }\r\n                  return `rotate(180 ${textPos.x} ${textPos.y})`;\r\n                });\r\n    }  \r\n  }\r\n  simulation = _dependency_d3_v5_js__WEBPACK_IMPORTED_MODULE_0__[\"forceSimulation\"]()\r\n                 .force('x', _dependency_d3_v5_js__WEBPACK_IMPORTED_MODULE_0__[\"forceX\"](width / 2).strength(0.05))\r\n                 .force('y', _dependency_d3_v5_js__WEBPACK_IMPORTED_MODULE_0__[\"forceY\"](height / 2).strength(0.05))\r\n                 .force('link', _dependency_d3_v5_js__WEBPACK_IMPORTED_MODULE_0__[\"forceLink\"]().distance(linkDistance).id(d => d.id))\r\n                 .force('charge', _dependency_d3_v5_js__WEBPACK_IMPORTED_MODULE_0__[\"forceManyBody\"]().strength(manyBodyStrength))\r\n                 .force('collide', _dependency_d3_v5_js__WEBPACK_IMPORTED_MODULE_0__[\"forceCollide\"](collideRadius))\r\n                 .on('tick', ticked)\r\n}\r\n\r\nconst updateLayout = function () {\r\n  const updateNode = nodesLayer.selectAll('g').data(nodes, d => d.id + d.index)\r\n  updateNode.exit().remove()\r\n  nodeParts = updateNode.enter().append('g')\r\n  nodeParts\r\n    .append('circle')\r\n    .attr('class', d => d.nodeClass)\r\n    .attr('id', d => `${_common_const_js__WEBPACK_IMPORTED_MODULE_1__[\"NODE_PREFIX\"]}_${d.id}`)\r\n    .attr('r', d => d.r)\r\n    .style('fill', d => d.color)\r\n    .attr('cx', d => d.x)\r\n    .attr('cy', d => d.y)\r\n\r\n  nodeParts\r\n    .append('image')\r\n    .attr('xlink:href', d => d.cover)\r\n    .attr('class', d => 'image ' + d.coverClass)\r\n    .attr('id', d => `${_common_const_js__WEBPACK_IMPORTED_MODULE_1__[\"NODE_PREFIX\"]}_cover_${d.id}`)\r\n    .attr('r', d => d.r)\r\n    .attr('width', d => 2 * d.r)\r\n    .attr('height', d => 2 * d.r)\r\n    .attr('x', (d) => (!d.x || isNaN(d.x)) ? 0 : d.x - d.r)\r\n    .attr('y', (d) => (!d.y || isNaN(d.y)) ? 0 : d.y - d.r)\r\n    .on('mouseover', _events_nodeEvents__WEBPACK_IMPORTED_MODULE_3__[\"overNode\"])\r\n    .on('mouseout', _events_nodeEvents__WEBPACK_IMPORTED_MODULE_3__[\"outNode\"])\r\n    .on('mousedown', _events_nodeEvents__WEBPACK_IMPORTED_MODULE_3__[\"downNode\"])\r\n    .on('mouseup', _events_nodeEvents__WEBPACK_IMPORTED_MODULE_3__[\"upNode\"])\r\n    .on('click', _events_nodeEvents__WEBPACK_IMPORTED_MODULE_3__[\"clickNode\"])\r\n    .on('dblclick', _events_nodeEvents__WEBPACK_IMPORTED_MODULE_3__[\"dblclickNode\"])\r\n    .call(_events_drag_js__WEBPACK_IMPORTED_MODULE_5__[\"drag\"]\r\n      .on('start', _events_drag_js__WEBPACK_IMPORTED_MODULE_5__[\"dragstarted\"])\r\n      .on('drag', _events_drag_js__WEBPACK_IMPORTED_MODULE_5__[\"dragged\"])\r\n      .on('end', _events_drag_js__WEBPACK_IMPORTED_MODULE_5__[\"dragended\"]))\r\n\r\n  nodeParts\r\n    .append('text')\r\n    // .attr('class', `${NODE_TEXT_PREFIX}`)\r\n    .attr('id', d => `${_common_const_js__WEBPACK_IMPORTED_MODULE_1__[\"NODE_TEXT_PREFIX\"]}_${d.id}`)\r\n    .style('fill', d => d.textColor)\r\n    .attr('text-anchor', 'middle')\r\n    .attr('x', d => (!d.x || isNaN(d.x)) ? d.r : d.x + d.r)\r\n    .attr('y', d => (!d.y || isNaN(d.y)) ? d.r : d.y + d.r)\r\n    .attr('dx', () => 0)\r\n    .attr('font-size', '12px')\r\n    .attr('dy', d =>  `${d.r + 14}px`)\r\n    .text(d => d.name)\r\n  nodeParts = nodeParts.merge(updateNode)\r\n\r\n\r\n  const updateLink = linksLayer.selectAll('g').data(links, d => d.id + d.index)\r\n  updateLink.exit().remove()\r\n  linkParts = updateLink.enter().append('g');\r\n  linkParts.append('path')\r\n    .attr('class', d => d.linkClass)\r\n    .attr('p-i', d => d.pathIndex)\r\n    .attr('id', d => `${_common_const_js__WEBPACK_IMPORTED_MODULE_1__[\"defaultLinkClass\"]}-${d.id}`)\r\n    .style('stroke', d => d.color)\r\n    .style('stroke-width', d =>d.width)\r\n    .style('fill', d => d.color)\r\n\r\n  linkParts\r\n    .append('text')\r\n    .attr('class', d => d.textClass)\r\n    .attr('id', d => `linkText_${d.id}`)\r\n    .style('fill', d => d.textColor)\r\n    .attr('text-anchor', 'middle')\r\n    .attr('x', d => d.x)\r\n    .attr('y', d => d.y)\r\n    .attr('dx', () => 0)\r\n    .attr('font-size', '10px')\r\n    .attr('dy', '3.2em')\r\n    .on('mouseover', d => {\r\n      _dependency_d3_v5_js__WEBPACK_IMPORTED_MODULE_0__[\"event\"].stopPropagation();\r\n    })\r\n    .text(d => d.type);\r\n  linkParts = linkParts.merge(updateLink);\r\n\r\n  simulation.nodes(nodes);\r\n  simulation.force('link').links(links);\r\n  simulation.alpha(1).alphaMin(0.05).restart();\r\n}\r\n\r\nconst addNodes = function (newNodes, newLinks) {\r\n  newNodes.forEach((e) => {\r\n    if (!nodes.find(z => z.id === e.id)) {\r\n      nodes.push(e)\r\n    }\r\n  })\r\n  newLinks.forEach((e) => {\r\n    if (!links.find(z => z.id === e.id)) {\r\n      links.push(e)\r\n    }\r\n  })\r\n  updateLayout();\r\n}\r\n\r\nconst removeNode = function (nodeId) {\r\n  _dependency_d3_v5_js__WEBPACK_IMPORTED_MODULE_0__[\"selectAll\"]('#' + _common_const_js__WEBPACK_IMPORTED_MODULE_1__[\"MENU_LAYER\"]).remove()\r\n  nodes.find((val, ind, arr) => {\r\n    if (val.id === nodeId) {\r\n      arr.splice(ind, 1)\r\n      return true\r\n    }\r\n    return false\r\n  });\r\n\r\n  Object(_utils__WEBPACK_IMPORTED_MODULE_9__[\"delLinkByNode\"])(links, nodeId)\r\n  updateLayout()\r\n}\r\n\r\nconst start = function (startNodes = nodes, startLinks = links) {\r\n  nodes.splice(0)\r\n  links.splice(0)\r\n  nodes.push(...startNodes)\r\n  links.push(...startLinks)\r\n  if (svg === null) {\r\n    createLayout()\r\n    createSimulation()\r\n  }\r\n  updateLayout()\r\n}\r\n\r\nconst setOption = function (opt) {\r\n  settings = Object.assign({\r\n    'linkDistance': 170,\r\n    'manyBodyStrength': -100,\r\n    'collideRadius': 30,\r\n    'nodes': [],\r\n    'links': [],\r\n    'dragLock': false,\r\n    'menu': {},\r\n    'events': {}\r\n  }, opt)\r\n  const {_nodes, _links, _menu} = Object(_common_preprocess_js__WEBPACK_IMPORTED_MODULE_7__[\"preprocess\"])(settings.nodes, settings.links, settings.menu)\r\n\r\n  for (const [k, v] of Object.entries(_menu)) {\r\n    Object(_menu_menu_js__WEBPACK_IMPORTED_MODULE_8__[\"setMenuData\"])(k, v)\r\n  }\r\n\r\n  for (const [k, v] of Object.entries(settings.events)) {\r\n    if (k === 'canvas') {\r\n      for (const i of v) {\r\n        if (i.type === 'click') {\r\n          Object(_events_canvasEvents_js__WEBPACK_IMPORTED_MODULE_2__[\"addCanvasEvent\"])(_common_const_js__WEBPACK_IMPORTED_MODULE_1__[\"CLICK\"], e => i.method(e))\r\n        }\r\n      }\r\n    } else if (k === 'node') {\r\n      for (const i of v) {\r\n        if (i.type === 'click') {\r\n          Object(_events_nodeEvents__WEBPACK_IMPORTED_MODULE_3__[\"addNodeEvent\"])(_common_const_js__WEBPACK_IMPORTED_MODULE_1__[\"CLICK\"], e => i.method(e))\r\n        }\r\n      }\r\n    }\r\n  }\r\n  start(_nodes, _links)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./src/kg/core/graph/core.js?");

/***/ }),

/***/ "./src/kg/core/graph/link.js":
/*!***********************************!*\
  !*** ./src/kg/core/graph/link.js ***!
  \***********************************/
/*! exports provided: drawLink, getLinkTextPosition */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"drawLink\", function() { return drawLink; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getLinkTextPosition\", function() { return getLinkTextPosition; });\nconst arrowStyle = {\r\n  width: 0.2,\r\n  size: 6\r\n}\r\n\r\nconst getLinkDesc = d => {\r\n  const {source, target} = d\r\n  const x1 = source.x\r\n  const y1 = source.y\r\n  const r1 = source.r\r\n  const x2 = target.x\r\n  const y2 = target.y\r\n  const r2 = target.r\r\n  const centerDistance = Math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\r\n  const gapDistance = centerDistance - r1 - r2\r\n  const noArrowGapDis = gapDistance - arrowStyle.size\r\n\r\n  const baseDeflectionStep = 15\r\n  const maxDeflection = 150\r\n  const middleIndex = (d.pathCount - 1) / 2\r\n  const stepsCount = d.pathIndex - 1\r\n  \r\n  const totalDeflection = stepsCount * baseDeflectionStep\r\n  const realDeflectionStep = totalDeflection > maxDeflection ? maxDeflection / stepsCount : baseDeflectionStep\r\n  \r\n  const dir = x1 > x2 ? 1 : -1\r\n  const deflection = realDeflectionStep * (d.pathIndex - middleIndex) * dir\r\n\r\n  return {\r\n    x1,\r\n    y1,\r\n    r1,\r\n    x2,\r\n    y2,\r\n    r2,\r\n    centerDistance,\r\n    gapDistance,\r\n    noArrowGapDis,\r\n    deflection\r\n  }\r\n}\r\n\r\nconst getLinkTextWidth = (id, dis) => {\r\n  const ele = document.getElementById(`linkText_${id}`);\r\n  if (ele) {\r\n    const o = document.getElementById(`linkText_${id}`).getBBox().width;\r\n    if (true) {\r\n    // if (dis > 2 * o && dis > 100) {\r\n      return o * 1.2;\r\n    }\r\n  }\r\n  return 0;\r\n}\r\n\r\nconst getLinkTextPosition = (d) => {\r\n  const {gapDistance, r1, deflection, noArrowGapDis} = getLinkDesc(d)\r\n  let offsetY = 0\r\n  if (deflection === 0) {\r\n    offsetY = -30\r\n  } else {\r\n    const {arcRadius, cy} = getCurveDesc(getLinkDesc(d), getLinkTextWidth(d.id, gapDistance))\r\n    \r\n    if (cy > 0) {\r\n      offsetY = (arcRadius - cy) + 30;\r\n    } else {\r\n      offsetY = (arcRadius + cy) - 30;\r\n    }\r\n    offsetY = offsetY * (deflection > 0 ? 1 : -1)\r\n  }\r\n  return {\r\n    x: noArrowGapDis / 2 + r1,\r\n    y: offsetY\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst straightLink = (d) => {\r\n  const {r1, gapDistance, noArrowGapDis} = getLinkDesc(d)\r\n\r\n  const getTextBreak = (startOffset, id, gapDistance, noArrowGapDis) => {\r\n    const breakWidth = getLinkTextWidth(id, gapDistance)\r\n    const allowance = (noArrowGapDis - breakWidth) / 2 // 连接长度减去断开长度后对半，为断开两侧的剩余长度\r\n    const startBreak = startOffset + allowance\r\n    const endBreak = startOffset + noArrowGapDis - allowance\r\n  \r\n    return {\r\n      start: startBreak,\r\n      end: endBreak\r\n    }\r\n  }\r\n  const textBreak = getTextBreak(r1, d.id, gapDistance, noArrowGapDis)\r\n  // y轴高度偏移\r\n  const offset = arrowStyle.width / 2 \r\n  const endOffset = r1 + noArrowGapDis\r\n  // 前半段闭合路径\r\n  const firstLine = [\r\n    'M', r1, offset, \r\n    'L', textBreak.start, offset, \r\n    'L', textBreak.start, -offset, \r\n    'L', r1, -offset, \r\n    'Z'\r\n  ]\r\n  // 后半段闭合路径(带箭头)\r\n  const arrowHalfHeight = arrowStyle.size / 2\r\n  const secondLine = [\r\n    'M', textBreak.end, offset, \r\n    'L', endOffset, offset, \r\n    'L', endOffset, arrowHalfHeight,\r\n    'L', r1 + gapDistance, '0',\r\n    'L', endOffset, -arrowHalfHeight,\r\n    'L', endOffset, -offset,\r\n    'L', textBreak.end, -offset,\r\n    'Z'\r\n  ]\r\n  const pathConfig = [...firstLine, ...secondLine]\r\n\r\n  return pathConfig.join(' ')\r\n}\r\n\r\nconst getCurveDesc = (baseDesc, breakWidth) => {\r\n const {gapDistance, centerDistance, noArrowGapDis, r1, r2, deflection} = baseDesc\r\n const startOffset = r1\r\n const noArrowGapMiddle = noArrowGapDis / 2 + startOffset\r\n\r\n const deflectionRadian = deflection * ((2 * Math.PI) / 360)\r\n\r\n const startAttach = {\r\n  x: Math.cos(deflectionRadian) * r1,\r\n  y: Math.sin(deflectionRadian) * r1,\r\n}\r\n\r\nconst radiusRatio = r1 / (r2 + arrowStyle.size)\r\nlet homotheticCenter\r\nif (radiusRatio === 1) {\r\n  homotheticCenter = (-centerDistance * radiusRatio) / (0.5 - radiusRatio)\r\n} else {\r\n  homotheticCenter = (-centerDistance * radiusRatio) / (1 - radiusRatio)\r\n}\r\n\r\nfunction intersectWithOtherCircle(fixedPoint, radius, xCenter, polarity) {\r\n  const gradient = fixedPoint.y / (fixedPoint.x - homotheticCenter);// 梯度，斜度，变化率；此为过相似圆心homotheticCenter的一条直线；\r\n  const hc = fixedPoint.y - (gradient * fixedPoint.x);// y=kx+b可以得出b=y-kx,即b=yo-kx0；\r\n  const A = 1 + square(gradient);// Ax²+BX+C=0;此处联立直线和圆的方程求解；\r\n  const B = 2 * ((gradient * hc) - xCenter);// 通过圆的标准方程和直线方程联立求得起交点坐标；\r\n  const C = square(hc) + (square(xCenter) - square(radius));// 通过圆的标准方程和直线方程联立求得起交点坐标；\r\n  const intersection = {\r\n    y: (-B + ((polarity * Math.sqrt(square(B))) - (4 * A * C))) / (2 * A), // 通过圆的标准方程和直线方程联立求得起交点坐标；\r\n    x: (-B + (polarity * Math.sqrt(square(B) - (4 * A * C)))) / (2 * A), // 通过圆的标准方程和直线方程联立求得起交点坐标；\r\n  };\r\n  intersection.y = (intersection.x - homotheticCenter) * gradient;// 类似直线方程，带入X求得Y值；\r\n  return intersection;\r\n}\r\nconst endAttach = intersectWithOtherCircle(startAttach, r2 + arrowStyle.size, centerDistance, -1);\r\n\r\nconst g1 = -startAttach.x / startAttach.y // 斜率1\r\nconst c1 = startAttach.y - startAttach.x * g1 // 截距1 b = y - kx\r\n\r\nconst g2 = -(endAttach.x - centerDistance) / endAttach.y\r\nconst c2 = endAttach.y - g2 * endAttach.x\r\n\r\nconst cx = (c1 - c2) / (g2 - g1) || (c1 - c2) / (g2 - (g1 * (11 / 10)))\r\nconst cy = (g1 * cx) + c1 //交点y\r\n// 求出距离（圆弧半径）\r\nconst arcRadius = Math.sqrt(square(cx - startAttach.x) + square(cy - startAttach.y))\r\n\r\nconst startAngle = Math.atan2(startAttach.x - cx, cy - startAttach.y)\r\nconst endAngle = Math.atan2(endAttach.x - cx, cy - endAttach.y);\r\nlet sweepAngle = startAngle - endAngle\r\n\r\nlet midAngle = (startAngle + endAngle) / 2\r\n\r\nif (deflection > 0) {\r\n  sweepAngle = 2 * Math.PI - sweepAngle\r\n  midAngle += Math.PI\r\n}\r\nfunction startTangent(dr) {\r\n  const dx = (dr < 0 ? 1 : -1) * Math.sqrt(square(dr) / (1 + square(g1)));\r\n  const dy = g1 * dx;\r\n  return {\r\n    x: startAttach.x + dx,\r\n    y: startAttach.y + dy,\r\n  };\r\n}\r\nfunction endTangent(dr) {\r\n  const dx = (dr < 0 ? -1 : 1) * Math.sqrt(square(dr) / (1 + square(g2)));\r\n  const dy = g2 * dx;\r\n  return {\r\n    x: endAttach.x + dx,\r\n    y: endAttach.y + dy,\r\n  };\r\n}\r\nfunction angleTangent(angle, dr) {\r\n  return {\r\n    x: cx + ((arcRadius + dr) * Math.sin(angle)),\r\n    y: cy - ((arcRadius + dr) * Math.cos(angle)),\r\n  };\r\n}\r\n\r\nfunction endNormal(dc) {\r\n  const dx = (dc < 0 ? -1 : 1) * Math.sqrt(square(dc) / (1 + square(1 / g2)));\r\n  const dy = dx / g2;\r\n  return {\r\n    x: endAttach.x + dx,\r\n    y: endAttach.y - dy,\r\n  };\r\n}\r\n/**\r\n * @returns point的xy坐标\r\n * @param {*} point \r\n */\r\nfunction coord(point) {\r\n  return `${point.x},${point.y}`;\r\n}\r\nconst shaftRadius = arrowStyle.width / 2;\r\nconst headRadius = arrowStyle.size / 2;\r\nconst headerLength = arrowStyle.size\r\nconst positiveSweep = startAttach.y > 0 ? 0 : 1;\r\nconst negativeSweep = startAttach.y < 0 ? 0 : 1;\r\n\r\n\r\nlet captionSweep = breakWidth / arcRadius * (deflection < 0 ? 1 : -1)\r\nlet endBreak;\r\nlet startBreak;\r\nstartBreak = midAngle - captionSweep / 2\r\nendBreak = midAngle + captionSweep / 2\r\n\r\nconst calcResults = {\r\n  headEndTan: coord(endTangent(headRadius)),\r\n  negHeadEndTan: coord(endTangent(-headRadius)),\r\n\r\n  headEndNormalTan: coord(endNormal(headerLength)),\r\n  \r\n  shaftStartTan: coord(startTangent(shaftRadius)),\r\n  negShaftStartTan: coord(startTangent(-shaftRadius)),\r\n\r\n  shaftEndTan: coord(endTangent(shaftRadius)),\r\n  negShaftEndTan: coord(endTangent(-shaftRadius)),\r\n\r\n  startBreakShaftAngle: coord(angleTangent(startBreak, shaftRadius)),\r\n  negStartBreakShaftAngle: coord(angleTangent(startBreak, -shaftRadius)),\r\n\r\n  endBreakShaftAngle: coord(angleTangent(endBreak, shaftRadius)),\r\n  negEndBreakShaftAngle: coord(angleTangent(endBreak, -shaftRadius)),\r\n  \r\n}\r\n\r\n\r\nreturn {\r\n  startAngle,\r\n  midAngle,\r\n  endAngle,\r\n  arcRadius,\r\n  calcResults,\r\n  positiveSweep,\r\n  negativeSweep,\r\n  cy\r\n}\r\n\r\n\r\n}\r\n\r\nconst curveLink = d => {\r\n  const baseDesc = getLinkDesc(d)\r\n  const {deflection, gapDistance} = baseDesc\r\n  const {calcResults, arcRadius, positiveSweep, negativeSweep, startAngle, endAngle} \r\n    = getCurveDesc(baseDesc, getLinkTextWidth(d.id, gapDistance))\r\n\r\n  const shaftRadius = arrowStyle.width / 2;\r\n\r\n  if (startAngle > endAngle) {\r\n    return [\r\n      'M', calcResults.negHeadEndTan,\r\n      'L', calcResults.headEndNormalTan,\r\n      'L', calcResults.headEndTan,\r\n      'Z'\r\n    ].join(' ')\r\n  }\r\n  \r\n  return [\r\n    'M', calcResults.shaftStartTan,\r\n    'L', calcResults.negShaftStartTan,\r\n    'A', arcRadius - shaftRadius, arcRadius - shaftRadius, 0, 0,\r\n    positiveSweep, calcResults.negStartBreakShaftAngle, \r\n    'L', calcResults.startBreakShaftAngle, \r\n    'A', arcRadius + shaftRadius, arcRadius + shaftRadius, 0, 0, \r\n    negativeSweep, calcResults.shaftStartTan, 'Z', \r\n    'M', calcResults.endBreakShaftAngle, \r\n    'L', calcResults.negEndBreakShaftAngle, \r\n    'A', arcRadius - shaftRadius, arcRadius - shaftRadius, 0, 0, \r\n    positiveSweep, calcResults.negShaftEndTan, \r\n    'L', calcResults.negHeadEndTan, \r\n    'L', calcResults.headEndNormalTan, \r\n    'L', calcResults.headEndTan, \r\n    'L', calcResults.shaftEndTan, \r\n    'A', arcRadius + shaftRadius, arcRadius + shaftRadius, 0, 0, \r\n    negativeSweep, calcResults.endBreakShaftAngle\r\n  ].join(' ');\r\n\r\n}\r\n\r\n\r\nconst drawLink = d => {\r\n  const middleIndex = (d.pathCount - 1) / 2\r\n  if (d.pathIndex === middleIndex) {\r\n    return straightLink(d)\r\n  } else {\r\n    return curveLink(d)\r\n  }\r\n}\r\n\r\nfunction square (l) {\r\n  return l * l\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./src/kg/core/graph/link.js?");

/***/ }),

/***/ "./src/kg/core/graph/utils.js":
/*!************************************!*\
  !*** ./src/kg/core/graph/utils.js ***!
  \************************************/
/*! exports provided: delLinkByNode, operationLinkByNode, getRelatedNodes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"delLinkByNode\", function() { return delLinkByNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"operationLinkByNode\", function() { return operationLinkByNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getRelatedNodes\", function() { return getRelatedNodes; });\n/*\r\n * @Author: your name\r\n * @Date: 2021-06-30 23:19:36\r\n * @LastEditTime: 2021-07-01 00:57:26\r\n * @LastEditors: your name\r\n * @Description: In User Settings Edit\r\n * @FilePath: \\d3\\src\\kg\\core\\graph\\utils.js\r\n */\r\n/**\r\n * 根据节点id，在links中查找相关连线并删除\r\n * @param {Object} links \r\n * @param {Number} id \r\n */\r\nfunction delLinkByNode (links, id) {\r\n  for (let i = links.length - 1; i >= 0; i -= 1) {\r\n    if (links[i].source.id === id || links[i].target.id === id) {\r\n      links.splice(i, 1);\r\n    }\r\n  }\r\n}\r\n/**\r\n * 根据节点id，在links中查找相关连线并作为参数传入method并执行\r\n * @param {Object} links \r\n * @param {Number} id \r\n * @param {Function} method \r\n */\r\nfunction operationLinkByNode (links, id, method) {\r\n  for (let i = links.length - 1; i >= 0; i -= 1) {\r\n    if (links[i].source.id === id || links[i].target.id === id) {\r\n      method(links[i])\r\n    }\r\n  }\r\n}\r\n\r\nfunction getRelatedNodes (nodes, links, id) {\r\n  const result = new Set()\r\n  for (let i = links.length - 1; i >= 0; i -= 1) {\r\n    if (links[i].source.id === id) {\r\n      result.add(links[i].target.id)\r\n    } else if (links[i].target.id === id) {\r\n      result.add(links[i].source.id)\r\n    }\r\n  }\r\n  return [...result]\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./src/kg/core/graph/utils.js?");

/***/ }),

/***/ "./src/kg/core/menu/menu.js":
/*!**********************************!*\
  !*** ./src/kg/core/menu/menu.js ***!
  \**********************************/
/*! exports provided: getMenu, setMenuData, removeMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getMenu\", function() { return getMenu; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setMenuData\", function() { return setMenuData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"removeMenu\", function() { return removeMenu; });\n/* harmony import */ var _graph_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../graph/core */ \"./src/kg/core/graph/core.js\");\n/* harmony import */ var _common_const__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/const */ \"./src/kg/core/common/const.js\");\n/* harmony import */ var _events_menuEvents__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events/menuEvents */ \"./src/kg/core/events/menuEvents.js\");\n/* harmony import */ var _common_preprocess__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/preprocess */ \"./src/kg/core/common/preprocess.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nconst menuData = {}\r\n\r\nlet menuLayerG = null\r\n\r\nlet focusNode = null\r\n\r\nconst innerGap = 5\r\nconst outerGap = 28\r\n\r\nconst setMenuData = function (nodeType, menu) {\r\n  menuData[nodeType] = menu\r\n  menu.forEach(m => {\r\n    Object(_events_menuEvents__WEBPACK_IMPORTED_MODULE_2__[\"addMenuEvent\"])(m.type, _common_const__WEBPACK_IMPORTED_MODULE_1__[\"MOUSE_OVER\"], (d, type) => { \r\n      _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].selectAll('.' + d.data.subMenuClass + '-container').classed('dashOut', true);\r\n      const subMenu = menuData[focusNode.type].filter(m => m.type === type)[0].children\r\n      getSecondMenu(d, type, subMenu)\r\n      _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].select(event.target).classed(d.data.menuActiveClass, true);\r\n    })\r\n    Object(_events_menuEvents__WEBPACK_IMPORTED_MODULE_2__[\"addMenuEvent\"])(m.type, _common_const__WEBPACK_IMPORTED_MODULE_1__[\"MOUSE_OUT\"], (d, type) => { \r\n      _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].select(event.target).classed(d.data.menuActiveClass, false); // 鼠标移上的hover样式移除\r\n    })\r\n    if (m.event !== null) {\r\n      Object(_events_menuEvents__WEBPACK_IMPORTED_MODULE_2__[\"addMenuEvent\"])(m.type, _common_const__WEBPACK_IMPORTED_MODULE_1__[\"CLICK\"], (d, type) => {\r\n        if (!m.event)\r\n          return\r\n\r\n        if (m.event.type === 'add') {      \r\n          m.event.source().then(res => {\r\n            let target = Object.assign({\r\n              nodes: [],\r\n              links: [],\r\n              menu: {}\r\n            }, res)\r\n            let {nodes, links, menu} = target\r\n            const{_nodes, _links, _menu} = Object(_common_preprocess__WEBPACK_IMPORTED_MODULE_3__[\"preprocess\"])(nodes, links, menu)\r\n            Object(_graph_core__WEBPACK_IMPORTED_MODULE_0__[\"addNodes\"])(_nodes, _links)\r\n            for (const [k, v] of Object.entries(_menu)) {\r\n              setMenuData(k, v)\r\n            }\r\n          })\r\n        } else if (m.event.type === 'del') {      \r\n          m.event.source().then(res => {\r\n            Object(_graph_core__WEBPACK_IMPORTED_MODULE_0__[\"removeNode\"])(focusNode.id)\r\n            focusNode = null\r\n          })\r\n        }\r\n      })\r\n    }\r\n\r\n    m.children.forEach(s => {\r\n      if (s.event !== null) {\r\n        Object(_events_menuEvents__WEBPACK_IMPORTED_MODULE_2__[\"addMenuEvent\"])(s.type, _common_const__WEBPACK_IMPORTED_MODULE_1__[\"CLICK\"], (d, type) => {\r\n          if (!s.event)\r\n            return\r\n          if (s.event.type === 'add') {      \r\n            s.event.source().then(res => {\r\n              let target = Object.assign({\r\n                nodes: [],\r\n                links: [],\r\n                menu: {}\r\n              }, res)\r\n              let {nodes, links, menu} = target\r\n              const{_nodes, _links, _menu} = Object(_common_preprocess__WEBPACK_IMPORTED_MODULE_3__[\"preprocess\"])(nodes, links, menu)\r\n              Object(_graph_core__WEBPACK_IMPORTED_MODULE_0__[\"addNodes\"])(_nodes, _links)\r\n              for (const [k, v] of Object.entries(_menu)) {\r\n                setMenuData(k, v)\r\n              }\r\n            })\r\n          } else if (s.event.type === 'del') {\r\n            console.log(focusNode)\r\n            s.event.source().then(res => {\r\n              console.log(focusNode)\r\n              Object(_graph_core__WEBPACK_IMPORTED_MODULE_0__[\"removeNode\"])(focusNode.id)\r\n              focusNode = null\r\n            })\r\n          }\r\n        })\r\n      }\r\n      \r\n      Object(_events_menuEvents__WEBPACK_IMPORTED_MODULE_2__[\"addMenuEvent\"])(s.type, _common_const__WEBPACK_IMPORTED_MODULE_1__[\"MOUSE_OUT\"], (d, type) => { \r\n        // console.log(s)\r\n      })\r\n    })\r\n  })\r\n}\r\n\r\nconst getMenuData = function (nodeType) {\r\n  return menuData[nodeType] ? menuData[nodeType] : []\r\n}\r\n\r\nconst getSecondMenu = function (d, type, subMenu) {\r\n  if (_graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].selectAll(`#sub-menu${type}`)._groups[0].length > 0) {\r\n    _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].selectAll(`#sub-menu${type}`).classed('dashOut', false);\r\n  } else {\r\n    // 如果没有，则创建, 建立角度比例尺\r\n    const angleScale = _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].scaleLinear()\r\n      .domain([0, 2 * Math.PI])\r\n      .range([d.startAngle, d.endAngle]);\r\n    let pieMenuData = subMenu\r\n  \r\n    generateMenu({\r\n      innerR: focusNode.r + 35,\r\n      outerR: focusNode.r + 65,\r\n      startAngle: l => angleScale(l.startAngle),\r\n      endAngle: l => angleScale(l.endAngle) \r\n    }, pieMenuData, `sub-menu${type}`);\r\n  }\r\n}\r\n\r\nconst generateMenu = function ({ innerR = 25, outerR = 60, startAngle = d => d.startAngle, endAngle = d => d.endAngle } = {}, menuDataSrc = [], id) {\r\n  const arc = _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].arc()\r\n    .innerRadius(innerR)\r\n    .outerRadius(outerR)\r\n    .padAngle(0)\r\n    .startAngle(startAngle)\r\n    .endAngle(endAngle)\r\n\r\n  const pie = _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].pie()\r\n  const arcsData = pie.value(d => d.size)(menuDataSrc)\r\n\r\n  if (_graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].selectAll('#' + _common_const__WEBPACK_IMPORTED_MODULE_1__[\"MENU_LAYER\"]).size() === 0) {\r\n    menuLayerG = _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].select('.' + _common_const__WEBPACK_IMPORTED_MODULE_1__[\"G_ID\"])\r\n      .append('g')\r\n      .attr('id', _common_const__WEBPACK_IMPORTED_MODULE_1__[\"MENU_LAYER\"])\r\n  }\r\n\r\n  const g = menuLayerG.append('g')\r\n\r\n  const arcs = g.selectAll('g')\r\n    .data(arcsData)\r\n    .enter()\r\n    .append('g')\r\n\r\n  if (id) {\r\n    g.attr('class', 'sub-'+ _common_const__WEBPACK_IMPORTED_MODULE_1__[\"MENU_LAYER\"] + ' ' + 'sub-menu-item-container').attr('id', id)\r\n    arc.padAngle(0.01)\r\n\r\n    arcs.append('path')\r\n      .attr('class', d =>  d.data.subMenuClass)\r\n      .attr('d', arc)\r\n      .on('mouseover', (d) => {\r\n        Object(_events_menuEvents__WEBPACK_IMPORTED_MODULE_2__[\"overMenu\"])(d)\r\n        _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.stopPropagation()\r\n      })\r\n      .on('click', d => {\r\n        Object(_events_menuEvents__WEBPACK_IMPORTED_MODULE_2__[\"clickMenu\"])(d)\r\n        removeMenu()\r\n        _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.stopPropagation()\r\n      });\r\n\r\n    arcs.append('text')\r\n      .text(d => d.data.name)\r\n      .attr('text-anchor', 'middle')\r\n      .attr('class', d => d.data.subMenuTextClass)\r\n      .attr('x', d => arc.centroid(d)[0] * 1)\r\n      .attr('y', d => arc.centroid(d)[1] * 1)\r\n  } else {\r\n    g.attr('class', 'main-'+ _common_const__WEBPACK_IMPORTED_MODULE_1__[\"MENU_LAYER\"])\r\n    arcs.append('path')\r\n      .attr('class', d => d.data.menuClass)\r\n      .attr('d', arc)\r\n      .on('mouseover', d => {\r\n        Object(_events_menuEvents__WEBPACK_IMPORTED_MODULE_2__[\"overMenu\"])(d)\r\n        _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.stopPropagation()\r\n      })\r\n      .on('mouseout', d => {\r\n        Object(_events_menuEvents__WEBPACK_IMPORTED_MODULE_2__[\"outMenu\"])(d)\r\n        _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.stopPropagation()\r\n      })\r\n      .on('click', d => {\r\n        Object(_events_menuEvents__WEBPACK_IMPORTED_MODULE_2__[\"clickMenu\"])(d)\r\n        removeMenu()\r\n        _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].event.stopPropagation()\r\n      })\r\n    \r\n    if (false) {} else {\r\n      arcs.append('text')\r\n      .attr('class', d => d.data.menuTextClass)\r\n      .attr('text-anchor', 'middle')\r\n      .attr('transform', d => {\r\n        const deg = (d.startAngle + d.endAngle) * 180/ (2 * Math.PI);\r\n        if ( deg < 90 || deg > 270) {\r\n          return 'rotate('+ deg +', '+(arc.centroid(d)[0])+' '+(arc.centroid(d)[1])+ ')'\r\n        } else {\r\n          return 'rotate('+ (deg + 180) +', '+(arc.centroid(d)[0])+' '+(arc.centroid(d)[1])+ ')'\r\n        }\r\n      })\r\n      .attr('x', d => (arc.centroid(d)[0]))\r\n      .attr('y', d => (arc.centroid(d)[1]))\r\n      .text(d => d.data.name)\r\n    }\r\n  }\r\n}\r\n\r\n\r\nconst removeMenu = () => {\r\n  _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].selectAll('#' + _common_const__WEBPACK_IMPORTED_MODULE_1__[\"MENU_LAYER\"]).remove()\r\n}\r\n\r\nconst placeMenu = (x, y) => {\r\n  _graph_core__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].selectAll('#' + _common_const__WEBPACK_IMPORTED_MODULE_1__[\"MENU_LAYER\"]).attr('transform', `translate(${x}, ${y})`);\r\n}\r\n\r\n\r\nconst getMenu = function (d) {\r\n  const {x, y} = d\r\n  removeMenu()\r\n  let menuData = getMenuData(d.type)\r\n  focusNode = d\r\n  \r\n  const innerR = d.r + innerGap\r\n  const outerR = innerR + outerGap\r\n  \r\n  generateMenu({ innerR, outerR, startAngle: a => a.startAngle, endAngle: a => a.endAngle }, menuData);\r\n  placeMenu(x, y);\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./src/kg/core/menu/menu.js?");

/***/ }),

/***/ "./src/kg/dependency/d3.v5.js":
/*!************************************!*\
  !*** ./src/kg/dependency/d3.v5.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// https://d3js.org v5.16.0 Copyright 2020 Mike Bostock\r\n(function (global, factory) {\r\n   true ? factory(exports) :\r\n  undefined;\r\n  }(this, function (exports) { 'use strict';\r\n  \r\n  var version = \"5.16.0\";\r\n  \r\n  function ascending(a, b) {\r\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\r\n  }\r\n  \r\n  function bisector(compare) {\r\n    if (compare.length === 1) compare = ascendingComparator(compare);\r\n    return {\r\n      left: function(a, x, lo, hi) {\r\n        if (lo == null) lo = 0;\r\n        if (hi == null) hi = a.length;\r\n        while (lo < hi) {\r\n          var mid = lo + hi >>> 1;\r\n          if (compare(a[mid], x) < 0) lo = mid + 1;\r\n          else hi = mid;\r\n        }\r\n        return lo;\r\n      },\r\n      right: function(a, x, lo, hi) {\r\n        if (lo == null) lo = 0;\r\n        if (hi == null) hi = a.length;\r\n        while (lo < hi) {\r\n          var mid = lo + hi >>> 1;\r\n          if (compare(a[mid], x) > 0) hi = mid;\r\n          else lo = mid + 1;\r\n        }\r\n        return lo;\r\n      }\r\n    };\r\n  }\r\n  \r\n  function ascendingComparator(f) {\r\n    return function(d, x) {\r\n      return ascending(f(d), x);\r\n    };\r\n  }\r\n  \r\n  var ascendingBisect = bisector(ascending);\r\n  var bisectRight = ascendingBisect.right;\r\n  var bisectLeft = ascendingBisect.left;\r\n  \r\n  function pairs(array, f) {\r\n    if (f == null) f = pair;\r\n    var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);\r\n    while (i < n) pairs[i] = f(p, p = array[++i]);\r\n    return pairs;\r\n  }\r\n  \r\n  function pair(a, b) {\r\n    return [a, b];\r\n  }\r\n  \r\n  function cross(values0, values1, reduce) {\r\n    var n0 = values0.length,\r\n        n1 = values1.length,\r\n        values = new Array(n0 * n1),\r\n        i0,\r\n        i1,\r\n        i,\r\n        value0;\r\n  \r\n    if (reduce == null) reduce = pair;\r\n  \r\n    for (i0 = i = 0; i0 < n0; ++i0) {\r\n      for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {\r\n        values[i] = reduce(value0, values1[i1]);\r\n      }\r\n    }\r\n  \r\n    return values;\r\n  }\r\n  \r\n  function descending(a, b) {\r\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\r\n  }\r\n  \r\n  function number(x) {\r\n    return x === null ? NaN : +x;\r\n  }\r\n  \r\n  function variance(values, valueof) {\r\n    var n = values.length,\r\n        m = 0,\r\n        i = -1,\r\n        mean = 0,\r\n        value,\r\n        delta,\r\n        sum = 0;\r\n  \r\n    if (valueof == null) {\r\n      while (++i < n) {\r\n        if (!isNaN(value = number(values[i]))) {\r\n          delta = value - mean;\r\n          mean += delta / ++m;\r\n          sum += delta * (value - mean);\r\n        }\r\n      }\r\n    }\r\n  \r\n    else {\r\n      while (++i < n) {\r\n        if (!isNaN(value = number(valueof(values[i], i, values)))) {\r\n          delta = value - mean;\r\n          mean += delta / ++m;\r\n          sum += delta * (value - mean);\r\n        }\r\n      }\r\n    }\r\n  \r\n    if (m > 1) return sum / (m - 1);\r\n  }\r\n  \r\n  function deviation(array, f) {\r\n    var v = variance(array, f);\r\n    return v ? Math.sqrt(v) : v;\r\n  }\r\n  \r\n  function extent(values, valueof) {\r\n    var n = values.length,\r\n        i = -1,\r\n        value,\r\n        min,\r\n        max;\r\n  \r\n    if (valueof == null) {\r\n      while (++i < n) { // Find the first comparable value.\r\n        if ((value = values[i]) != null && value >= value) {\r\n          min = max = value;\r\n          while (++i < n) { // Compare the remaining values.\r\n            if ((value = values[i]) != null) {\r\n              if (min > value) min = value;\r\n              if (max < value) max = value;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    else {\r\n      while (++i < n) { // Find the first comparable value.\r\n        if ((value = valueof(values[i], i, values)) != null && value >= value) {\r\n          min = max = value;\r\n          while (++i < n) { // Compare the remaining values.\r\n            if ((value = valueof(values[i], i, values)) != null) {\r\n              if (min > value) min = value;\r\n              if (max < value) max = value;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    return [min, max];\r\n  }\r\n  \r\n  var array = Array.prototype;\r\n  \r\n  var slice = array.slice;\r\n  var map = array.map;\r\n  \r\n  function constant(x) {\r\n    return function() {\r\n      return x;\r\n    };\r\n  }\r\n  \r\n  function identity(x) {\r\n    return x;\r\n  }\r\n  \r\n  function sequence(start, stop, step) {\r\n    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\r\n  \r\n    var i = -1,\r\n        n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\r\n        range = new Array(n);\r\n  \r\n    while (++i < n) {\r\n      range[i] = start + i * step;\r\n    }\r\n  \r\n    return range;\r\n  }\r\n  \r\n  var e10 = Math.sqrt(50),\r\n      e5 = Math.sqrt(10),\r\n      e2 = Math.sqrt(2);\r\n  \r\n  function ticks(start, stop, count) {\r\n    var reverse,\r\n        i = -1,\r\n        n,\r\n        ticks,\r\n        step;\r\n  \r\n    stop = +stop, start = +start, count = +count;\r\n    if (start === stop && count > 0) return [start];\r\n    if (reverse = stop < start) n = start, start = stop, stop = n;\r\n    if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\r\n  \r\n    if (step > 0) {\r\n      start = Math.ceil(start / step);\r\n      stop = Math.floor(stop / step);\r\n      ticks = new Array(n = Math.ceil(stop - start + 1));\r\n      while (++i < n) ticks[i] = (start + i) * step;\r\n    } else {\r\n      start = Math.floor(start * step);\r\n      stop = Math.ceil(stop * step);\r\n      ticks = new Array(n = Math.ceil(start - stop + 1));\r\n      while (++i < n) ticks[i] = (start - i) / step;\r\n    }\r\n  \r\n    if (reverse) ticks.reverse();\r\n  \r\n    return ticks;\r\n  }\r\n  \r\n  function tickIncrement(start, stop, count) {\r\n    var step = (stop - start) / Math.max(0, count),\r\n        power = Math.floor(Math.log(step) / Math.LN10),\r\n        error = step / Math.pow(10, power);\r\n    return power >= 0\r\n        ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\r\n        : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\r\n  }\r\n  \r\n  function tickStep(start, stop, count) {\r\n    var step0 = Math.abs(stop - start) / Math.max(0, count),\r\n        step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\r\n        error = step0 / step1;\r\n    if (error >= e10) step1 *= 10;\r\n    else if (error >= e5) step1 *= 5;\r\n    else if (error >= e2) step1 *= 2;\r\n    return stop < start ? -step1 : step1;\r\n  }\r\n  \r\n  function thresholdSturges(values) {\r\n    return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\r\n  }\r\n  \r\n  function histogram() {\r\n    var value = identity,\r\n        domain = extent,\r\n        threshold = thresholdSturges;\r\n  \r\n    function histogram(data) {\r\n      var i,\r\n          n = data.length,\r\n          x,\r\n          values = new Array(n);\r\n  \r\n      for (i = 0; i < n; ++i) {\r\n        values[i] = value(data[i], i, data);\r\n      }\r\n  \r\n      var xz = domain(values),\r\n          x0 = xz[0],\r\n          x1 = xz[1],\r\n          tz = threshold(values, x0, x1);\r\n  \r\n      // Convert number of thresholds into uniform thresholds.\r\n      if (!Array.isArray(tz)) {\r\n        tz = tickStep(x0, x1, tz);\r\n        tz = sequence(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive\r\n      }\r\n  \r\n      // Remove any thresholds outside the domain.\r\n      var m = tz.length;\r\n      while (tz[0] <= x0) tz.shift(), --m;\r\n      while (tz[m - 1] > x1) tz.pop(), --m;\r\n  \r\n      var bins = new Array(m + 1),\r\n          bin;\r\n  \r\n      // Initialize bins.\r\n      for (i = 0; i <= m; ++i) {\r\n        bin = bins[i] = [];\r\n        bin.x0 = i > 0 ? tz[i - 1] : x0;\r\n        bin.x1 = i < m ? tz[i] : x1;\r\n      }\r\n  \r\n      // Assign data to bins by value, ignoring any outside the domain.\r\n      for (i = 0; i < n; ++i) {\r\n        x = values[i];\r\n        if (x0 <= x && x <= x1) {\r\n          bins[bisectRight(tz, x, 0, m)].push(data[i]);\r\n        }\r\n      }\r\n  \r\n      return bins;\r\n    }\r\n  \r\n    histogram.value = function(_) {\r\n      return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\r\n    };\r\n  \r\n    histogram.domain = function(_) {\r\n      return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\r\n    };\r\n  \r\n    histogram.thresholds = function(_) {\r\n      return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\r\n    };\r\n  \r\n    return histogram;\r\n  }\r\n  \r\n  function threshold(values, p, valueof) {\r\n    if (valueof == null) valueof = number;\r\n    if (!(n = values.length)) return;\r\n    if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\r\n    if (p >= 1) return +valueof(values[n - 1], n - 1, values);\r\n    var n,\r\n        i = (n - 1) * p,\r\n        i0 = Math.floor(i),\r\n        value0 = +valueof(values[i0], i0, values),\r\n        value1 = +valueof(values[i0 + 1], i0 + 1, values);\r\n    return value0 + (value1 - value0) * (i - i0);\r\n  }\r\n  \r\n  function freedmanDiaconis(values, min, max) {\r\n    values = map.call(values, number).sort(ascending);\r\n    return Math.ceil((max - min) / (2 * (threshold(values, 0.75) - threshold(values, 0.25)) * Math.pow(values.length, -1 / 3)));\r\n  }\r\n  \r\n  function scott(values, min, max) {\r\n    return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));\r\n  }\r\n  \r\n  function max(values, valueof) {\r\n    var n = values.length,\r\n        i = -1,\r\n        value,\r\n        max;\r\n  \r\n    if (valueof == null) {\r\n      while (++i < n) { // Find the first comparable value.\r\n        if ((value = values[i]) != null && value >= value) {\r\n          max = value;\r\n          while (++i < n) { // Compare the remaining values.\r\n            if ((value = values[i]) != null && value > max) {\r\n              max = value;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    else {\r\n      while (++i < n) { // Find the first comparable value.\r\n        if ((value = valueof(values[i], i, values)) != null && value >= value) {\r\n          max = value;\r\n          while (++i < n) { // Compare the remaining values.\r\n            if ((value = valueof(values[i], i, values)) != null && value > max) {\r\n              max = value;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    return max;\r\n  }\r\n  \r\n  function mean(values, valueof) {\r\n    var n = values.length,\r\n        m = n,\r\n        i = -1,\r\n        value,\r\n        sum = 0;\r\n  \r\n    if (valueof == null) {\r\n      while (++i < n) {\r\n        if (!isNaN(value = number(values[i]))) sum += value;\r\n        else --m;\r\n      }\r\n    }\r\n  \r\n    else {\r\n      while (++i < n) {\r\n        if (!isNaN(value = number(valueof(values[i], i, values)))) sum += value;\r\n        else --m;\r\n      }\r\n    }\r\n  \r\n    if (m) return sum / m;\r\n  }\r\n  \r\n  function median(values, valueof) {\r\n    var n = values.length,\r\n        i = -1,\r\n        value,\r\n        numbers = [];\r\n  \r\n    if (valueof == null) {\r\n      while (++i < n) {\r\n        if (!isNaN(value = number(values[i]))) {\r\n          numbers.push(value);\r\n        }\r\n      }\r\n    }\r\n  \r\n    else {\r\n      while (++i < n) {\r\n        if (!isNaN(value = number(valueof(values[i], i, values)))) {\r\n          numbers.push(value);\r\n        }\r\n      }\r\n    }\r\n  \r\n    return threshold(numbers.sort(ascending), 0.5);\r\n  }\r\n  \r\n  function merge(arrays) {\r\n    var n = arrays.length,\r\n        m,\r\n        i = -1,\r\n        j = 0,\r\n        merged,\r\n        array;\r\n  \r\n    while (++i < n) j += arrays[i].length;\r\n    merged = new Array(j);\r\n  \r\n    while (--n >= 0) {\r\n      array = arrays[n];\r\n      m = array.length;\r\n      while (--m >= 0) {\r\n        merged[--j] = array[m];\r\n      }\r\n    }\r\n  \r\n    return merged;\r\n  }\r\n  \r\n  function min(values, valueof) {\r\n    var n = values.length,\r\n        i = -1,\r\n        value,\r\n        min;\r\n  \r\n    if (valueof == null) {\r\n      while (++i < n) { // Find the first comparable value.\r\n        if ((value = values[i]) != null && value >= value) {\r\n          min = value;\r\n          while (++i < n) { // Compare the remaining values.\r\n            if ((value = values[i]) != null && min > value) {\r\n              min = value;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    else {\r\n      while (++i < n) { // Find the first comparable value.\r\n        if ((value = valueof(values[i], i, values)) != null && value >= value) {\r\n          min = value;\r\n          while (++i < n) { // Compare the remaining values.\r\n            if ((value = valueof(values[i], i, values)) != null && min > value) {\r\n              min = value;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    return min;\r\n  }\r\n  \r\n  function permute(array, indexes) {\r\n    var i = indexes.length, permutes = new Array(i);\r\n    while (i--) permutes[i] = array[indexes[i]];\r\n    return permutes;\r\n  }\r\n  \r\n  function scan(values, compare) {\r\n    if (!(n = values.length)) return;\r\n    var n,\r\n        i = 0,\r\n        j = 0,\r\n        xi,\r\n        xj = values[j];\r\n  \r\n    if (compare == null) compare = ascending;\r\n  \r\n    while (++i < n) {\r\n      if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {\r\n        xj = xi, j = i;\r\n      }\r\n    }\r\n  \r\n    if (compare(xj, xj) === 0) return j;\r\n  }\r\n  \r\n  function shuffle(array, i0, i1) {\r\n    var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),\r\n        t,\r\n        i;\r\n  \r\n    while (m) {\r\n      i = Math.random() * m-- | 0;\r\n      t = array[m + i0];\r\n      array[m + i0] = array[i + i0];\r\n      array[i + i0] = t;\r\n    }\r\n  \r\n    return array;\r\n  }\r\n  \r\n  function sum(values, valueof) {\r\n    var n = values.length,\r\n        i = -1,\r\n        value,\r\n        sum = 0;\r\n  \r\n    if (valueof == null) {\r\n      while (++i < n) {\r\n        if (value = +values[i]) sum += value; // Note: zero and null are equivalent.\r\n      }\r\n    }\r\n  \r\n    else {\r\n      while (++i < n) {\r\n        if (value = +valueof(values[i], i, values)) sum += value;\r\n      }\r\n    }\r\n  \r\n    return sum;\r\n  }\r\n  \r\n  function transpose(matrix) {\r\n    if (!(n = matrix.length)) return [];\r\n    for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {\r\n      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\r\n        row[j] = matrix[j][i];\r\n      }\r\n    }\r\n    return transpose;\r\n  }\r\n  \r\n  function length(d) {\r\n    return d.length;\r\n  }\r\n  \r\n  function zip() {\r\n    return transpose(arguments);\r\n  }\r\n  \r\n  var slice$1 = Array.prototype.slice;\r\n  \r\n  function identity$1(x) {\r\n    return x;\r\n  }\r\n  \r\n  var top = 1,\r\n      right = 2,\r\n      bottom = 3,\r\n      left = 4,\r\n      epsilon = 1e-6;\r\n  \r\n  function translateX(x) {\r\n    return \"translate(\" + (x + 0.5) + \",0)\";\r\n  }\r\n  \r\n  function translateY(y) {\r\n    return \"translate(0,\" + (y + 0.5) + \")\";\r\n  }\r\n  \r\n  function number$1(scale) {\r\n    return function(d) {\r\n      return +scale(d);\r\n    };\r\n  }\r\n  \r\n  function center(scale) {\r\n    var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.\r\n    if (scale.round()) offset = Math.round(offset);\r\n    return function(d) {\r\n      return +scale(d) + offset;\r\n    };\r\n  }\r\n  \r\n  function entering() {\r\n    return !this.__axis;\r\n  }\r\n  \r\n  function axis(orient, scale) {\r\n    var tickArguments = [],\r\n        tickValues = null,\r\n        tickFormat = null,\r\n        tickSizeInner = 6,\r\n        tickSizeOuter = 6,\r\n        tickPadding = 3,\r\n        k = orient === top || orient === left ? -1 : 1,\r\n        x = orient === left || orient === right ? \"x\" : \"y\",\r\n        transform = orient === top || orient === bottom ? translateX : translateY;\r\n  \r\n    function axis(context) {\r\n      var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,\r\n          format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$1) : tickFormat,\r\n          spacing = Math.max(tickSizeInner, 0) + tickPadding,\r\n          range = scale.range(),\r\n          range0 = +range[0] + 0.5,\r\n          range1 = +range[range.length - 1] + 0.5,\r\n          position = (scale.bandwidth ? center : number$1)(scale.copy()),\r\n          selection = context.selection ? context.selection() : context,\r\n          path = selection.selectAll(\".domain\").data([null]),\r\n          tick = selection.selectAll(\".tick\").data(values, scale).order(),\r\n          tickExit = tick.exit(),\r\n          tickEnter = tick.enter().append(\"g\").attr(\"class\", \"tick\"),\r\n          line = tick.select(\"line\"),\r\n          text = tick.select(\"text\");\r\n  \r\n      path = path.merge(path.enter().insert(\"path\", \".tick\")\r\n          .attr(\"class\", \"domain\")\r\n          .attr(\"stroke\", \"currentColor\"));\r\n  \r\n      tick = tick.merge(tickEnter);\r\n  \r\n      line = line.merge(tickEnter.append(\"line\")\r\n          .attr(\"stroke\", \"currentColor\")\r\n          .attr(x + \"2\", k * tickSizeInner));\r\n  \r\n      text = text.merge(tickEnter.append(\"text\")\r\n          .attr(\"fill\", \"currentColor\")\r\n          .attr(x, k * spacing)\r\n          .attr(\"dy\", orient === top ? \"0em\" : orient === bottom ? \"0.71em\" : \"0.32em\"));\r\n  \r\n      if (context !== selection) {\r\n        path = path.transition(context);\r\n        tick = tick.transition(context);\r\n        line = line.transition(context);\r\n        text = text.transition(context);\r\n  \r\n        tickExit = tickExit.transition(context)\r\n            .attr(\"opacity\", epsilon)\r\n            .attr(\"transform\", function(d) { return isFinite(d = position(d)) ? transform(d) : this.getAttribute(\"transform\"); });\r\n  \r\n        tickEnter\r\n            .attr(\"opacity\", epsilon)\r\n            .attr(\"transform\", function(d) { var p = this.parentNode.__axis; return transform(p && isFinite(p = p(d)) ? p : position(d)); });\r\n      }\r\n  \r\n      tickExit.remove();\r\n  \r\n      path\r\n          .attr(\"d\", orient === left || orient == right\r\n              ? (tickSizeOuter ? \"M\" + k * tickSizeOuter + \",\" + range0 + \"H0.5V\" + range1 + \"H\" + k * tickSizeOuter : \"M0.5,\" + range0 + \"V\" + range1)\r\n              : (tickSizeOuter ? \"M\" + range0 + \",\" + k * tickSizeOuter + \"V0.5H\" + range1 + \"V\" + k * tickSizeOuter : \"M\" + range0 + \",0.5H\" + range1));\r\n  \r\n      tick\r\n          .attr(\"opacity\", 1)\r\n          .attr(\"transform\", function(d) { return transform(position(d)); });\r\n  \r\n      line\r\n          .attr(x + \"2\", k * tickSizeInner);\r\n  \r\n      text\r\n          .attr(x, k * spacing)\r\n          .text(format);\r\n  \r\n      selection.filter(entering)\r\n          .attr(\"fill\", \"none\")\r\n          .attr(\"font-size\", 10)\r\n          .attr(\"font-family\", \"sans-serif\")\r\n          .attr(\"text-anchor\", orient === right ? \"start\" : orient === left ? \"end\" : \"middle\");\r\n  \r\n      selection\r\n          .each(function() { this.__axis = position; });\r\n    }\r\n  \r\n    axis.scale = function(_) {\r\n      return arguments.length ? (scale = _, axis) : scale;\r\n    };\r\n  \r\n    axis.ticks = function() {\r\n      return tickArguments = slice$1.call(arguments), axis;\r\n    };\r\n  \r\n    axis.tickArguments = function(_) {\r\n      return arguments.length ? (tickArguments = _ == null ? [] : slice$1.call(_), axis) : tickArguments.slice();\r\n    };\r\n  \r\n    axis.tickValues = function(_) {\r\n      return arguments.length ? (tickValues = _ == null ? null : slice$1.call(_), axis) : tickValues && tickValues.slice();\r\n    };\r\n  \r\n    axis.tickFormat = function(_) {\r\n      return arguments.length ? (tickFormat = _, axis) : tickFormat;\r\n    };\r\n  \r\n    axis.tickSize = function(_) {\r\n      return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;\r\n    };\r\n  \r\n    axis.tickSizeInner = function(_) {\r\n      return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;\r\n    };\r\n  \r\n    axis.tickSizeOuter = function(_) {\r\n      return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;\r\n    };\r\n  \r\n    axis.tickPadding = function(_) {\r\n      return arguments.length ? (tickPadding = +_, axis) : tickPadding;\r\n    };\r\n  \r\n    return axis;\r\n  }\r\n  \r\n  function axisTop(scale) {\r\n    return axis(top, scale);\r\n  }\r\n  \r\n  function axisRight(scale) {\r\n    return axis(right, scale);\r\n  }\r\n  \r\n  function axisBottom(scale) {\r\n    return axis(bottom, scale);\r\n  }\r\n  \r\n  function axisLeft(scale) {\r\n    return axis(left, scale);\r\n  }\r\n  \r\n  var noop = {value: function() {}};\r\n  \r\n  function dispatch() {\r\n    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\r\n      if (!(t = arguments[i] + \"\") || (t in _) || /[\\s.]/.test(t)) throw new Error(\"illegal type: \" + t);\r\n      _[t] = [];\r\n    }\r\n    return new Dispatch(_);\r\n  }\r\n  \r\n  function Dispatch(_) {\r\n    this._ = _;\r\n  }\r\n  \r\n  function parseTypenames(typenames, types) {\r\n    return typenames.trim().split(/^|\\s+/).map(function(t) {\r\n      var name = \"\", i = t.indexOf(\".\");\r\n      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\r\n      if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\r\n      return {type: t, name: name};\r\n    });\r\n  }\r\n  \r\n  Dispatch.prototype = dispatch.prototype = {\r\n    constructor: Dispatch,\r\n    on: function(typename, callback) {\r\n      var _ = this._,\r\n          T = parseTypenames(typename + \"\", _),\r\n          t,\r\n          i = -1,\r\n          n = T.length;\r\n  \r\n      // If no callback was specified, return the callback of the given type and name.\r\n      if (arguments.length < 2) {\r\n        while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\r\n        return;\r\n      }\r\n  \r\n      // If a type was specified, set the callback for the given type and name.\r\n      // Otherwise, if a null callback was specified, remove callbacks of the given name.\r\n      if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\r\n      while (++i < n) {\r\n        if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\r\n        else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\r\n      }\r\n  \r\n      return this;\r\n    },\r\n    copy: function() {\r\n      var copy = {}, _ = this._;\r\n      for (var t in _) copy[t] = _[t].slice();\r\n      return new Dispatch(copy);\r\n    },\r\n    call: function(type, that) {\r\n      if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\r\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\r\n      for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\r\n    },\r\n    apply: function(type, that, args) {\r\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\r\n      for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\r\n    }\r\n  };\r\n  \r\n  function get(type, name) {\r\n    for (var i = 0, n = type.length, c; i < n; ++i) {\r\n      if ((c = type[i]).name === name) {\r\n        return c.value;\r\n      }\r\n    }\r\n  }\r\n  \r\n  function set(type, name, callback) {\r\n    for (var i = 0, n = type.length; i < n; ++i) {\r\n      if (type[i].name === name) {\r\n        type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\r\n        break;\r\n      }\r\n    }\r\n    if (callback != null) type.push({name: name, value: callback});\r\n    return type;\r\n  }\r\n  \r\n  var xhtml = \"http://www.w3.org/1999/xhtml\";\r\n  \r\n  var namespaces = {\r\n    svg: \"http://www.w3.org/2000/svg\",\r\n    xhtml: xhtml,\r\n    xlink: \"http://www.w3.org/1999/xlink\",\r\n    xml: \"http://www.w3.org/XML/1998/namespace\",\r\n    xmlns: \"http://www.w3.org/2000/xmlns/\"\r\n  };\r\n  \r\n  function namespace(name) {\r\n    var prefix = name += \"\", i = prefix.indexOf(\":\");\r\n    if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\r\n    return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;\r\n  }\r\n  \r\n  function creatorInherit(name) {\r\n    return function() {\r\n      var document = this.ownerDocument,\r\n          uri = this.namespaceURI;\r\n      return uri === xhtml && document.documentElement.namespaceURI === xhtml\r\n          ? document.createElement(name)\r\n          : document.createElementNS(uri, name);\r\n    };\r\n  }\r\n  \r\n  function creatorFixed(fullname) {\r\n    return function() {\r\n      return this.ownerDocument.createElementNS(fullname.space, fullname.local);\r\n    };\r\n  }\r\n  \r\n  function creator(name) {\r\n    var fullname = namespace(name);\r\n    return (fullname.local\r\n        ? creatorFixed\r\n        : creatorInherit)(fullname);\r\n  }\r\n  \r\n  function none() {}\r\n  \r\n  function selector(selector) {\r\n    return selector == null ? none : function() {\r\n      return this.querySelector(selector);\r\n    };\r\n  }\r\n  \r\n  function selection_select(select) {\r\n    if (typeof select !== \"function\") select = selector(select);\r\n  \r\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\r\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\r\n        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\r\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\r\n          subgroup[i] = subnode;\r\n        }\r\n      }\r\n    }\r\n  \r\n    return new Selection(subgroups, this._parents);\r\n  }\r\n  \r\n  function empty() {\r\n    return [];\r\n  }\r\n  \r\n  function selectorAll(selector) {\r\n    return selector == null ? empty : function() {\r\n      return this.querySelectorAll(selector);\r\n    };\r\n  }\r\n  \r\n  function selection_selectAll(select) {\r\n    if (typeof select !== \"function\") select = selectorAll(select);\r\n  \r\n    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\r\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\r\n        if (node = group[i]) {\r\n          subgroups.push(select.call(node, node.__data__, i, group));\r\n          parents.push(node);\r\n        }\r\n      }\r\n    }\r\n  \r\n    return new Selection(subgroups, parents);\r\n  }\r\n  \r\n  function matcher(selector) {\r\n    return function() {\r\n      return this.matches(selector);\r\n    };\r\n  }\r\n  \r\n  function selection_filter(match) {\r\n    if (typeof match !== \"function\") match = matcher(match);\r\n  \r\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\r\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\r\n        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\r\n          subgroup.push(node);\r\n        }\r\n      }\r\n    }\r\n  \r\n    return new Selection(subgroups, this._parents);\r\n  }\r\n  \r\n  function sparse(update) {\r\n    return new Array(update.length);\r\n  }\r\n  \r\n  function selection_enter() {\r\n    return new Selection(this._enter || this._groups.map(sparse), this._parents);\r\n  }\r\n  \r\n  function EnterNode(parent, datum) {\r\n    this.ownerDocument = parent.ownerDocument;\r\n    this.namespaceURI = parent.namespaceURI;\r\n    this._next = null;\r\n    this._parent = parent;\r\n    this.__data__ = datum;\r\n  }\r\n  \r\n  EnterNode.prototype = {\r\n    constructor: EnterNode,\r\n    appendChild: function(child) { return this._parent.insertBefore(child, this._next); },\r\n    insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },\r\n    querySelector: function(selector) { return this._parent.querySelector(selector); },\r\n    querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }\r\n  };\r\n  \r\n  function constant$1(x) {\r\n    return function() {\r\n      return x;\r\n    };\r\n  }\r\n  \r\n  var keyPrefix = \"$\"; // Protect against keys like “__proto__”.\r\n  \r\n  function bindIndex(parent, group, enter, update, exit, data) {\r\n    var i = 0,\r\n        node,\r\n        groupLength = group.length,\r\n        dataLength = data.length;\r\n  \r\n    // Put any non-null nodes that fit into update.\r\n    // Put any null nodes into enter.\r\n    // Put any remaining data into enter.\r\n    for (; i < dataLength; ++i) {\r\n      if (node = group[i]) {\r\n        node.__data__ = data[i];\r\n        update[i] = node;\r\n      } else {\r\n        enter[i] = new EnterNode(parent, data[i]);\r\n      }\r\n    }\r\n  \r\n    // Put any non-null nodes that don’t fit into exit.\r\n    for (; i < groupLength; ++i) {\r\n      if (node = group[i]) {\r\n        exit[i] = node;\r\n      }\r\n    }\r\n  }\r\n  \r\n  function bindKey(parent, group, enter, update, exit, data, key) {\r\n    var i,\r\n        node,\r\n        nodeByKeyValue = {},\r\n        groupLength = group.length,\r\n        dataLength = data.length,\r\n        keyValues = new Array(groupLength),\r\n        keyValue;\r\n  \r\n    // Compute the key for each node.\r\n    // If multiple nodes have the same key, the duplicates are added to exit.\r\n    for (i = 0; i < groupLength; ++i) {\r\n      if (node = group[i]) {\r\n        keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);\r\n        if (keyValue in nodeByKeyValue) {\r\n          exit[i] = node;\r\n        } else {\r\n          nodeByKeyValue[keyValue] = node;\r\n        }\r\n      }\r\n    }\r\n  \r\n    // Compute the key for each datum.\r\n    // If there a node associated with this key, join and add it to update.\r\n    // If there is not (or the key is a duplicate), add it to enter.\r\n    for (i = 0; i < dataLength; ++i) {\r\n      keyValue = keyPrefix + key.call(parent, data[i], i, data);\r\n      if (node = nodeByKeyValue[keyValue]) {\r\n        update[i] = node;\r\n        node.__data__ = data[i];\r\n        nodeByKeyValue[keyValue] = null;\r\n      } else {\r\n        enter[i] = new EnterNode(parent, data[i]);\r\n      }\r\n    }\r\n  \r\n    // Add any remaining nodes that were not bound to data to exit.\r\n    for (i = 0; i < groupLength; ++i) {\r\n      if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {\r\n        exit[i] = node;\r\n      }\r\n    }\r\n  }\r\n  \r\n  function selection_data(value, key) {\r\n    if (!value) {\r\n      data = new Array(this.size()), j = -1;\r\n      this.each(function(d) { data[++j] = d; });\r\n      return data;\r\n    }\r\n  \r\n    var bind = key ? bindKey : bindIndex,\r\n        parents = this._parents,\r\n        groups = this._groups;\r\n  \r\n    if (typeof value !== \"function\") value = constant$1(value);\r\n  \r\n    for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\r\n      var parent = parents[j],\r\n          group = groups[j],\r\n          groupLength = group.length,\r\n          data = value.call(parent, parent && parent.__data__, j, parents),\r\n          dataLength = data.length,\r\n          enterGroup = enter[j] = new Array(dataLength),\r\n          updateGroup = update[j] = new Array(dataLength),\r\n          exitGroup = exit[j] = new Array(groupLength);\r\n  \r\n      bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\r\n  \r\n      // Now connect the enter nodes to their following update node, such that\r\n      // appendChild can insert the materialized enter node before this node,\r\n      // rather than at the end of the parent node.\r\n      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\r\n        if (previous = enterGroup[i0]) {\r\n          if (i0 >= i1) i1 = i0 + 1;\r\n          while (!(next = updateGroup[i1]) && ++i1 < dataLength);\r\n          previous._next = next || null;\r\n        }\r\n      }\r\n    }\r\n  \r\n    update = new Selection(update, parents);\r\n    update._enter = enter;\r\n    update._exit = exit;\r\n    return update;\r\n  }\r\n  \r\n  function selection_exit() {\r\n    return new Selection(this._exit || this._groups.map(sparse), this._parents);\r\n  }\r\n  \r\n  function selection_join(onenter, onupdate, onexit) {\r\n    var enter = this.enter(), update = this, exit = this.exit();\r\n    enter = typeof onenter === \"function\" ? onenter(enter) : enter.append(onenter + \"\");\r\n    if (onupdate != null) update = onupdate(update);\r\n    if (onexit == null) exit.remove(); else onexit(exit);\r\n    return enter && update ? enter.merge(update).order() : update;\r\n  }\r\n  \r\n  function selection_merge(selection) {\r\n  \r\n    for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\r\n      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\r\n        if (node = group0[i] || group1[i]) {\r\n          merge[i] = node;\r\n        }\r\n      }\r\n    }\r\n  \r\n    for (; j < m0; ++j) {\r\n      merges[j] = groups0[j];\r\n    }\r\n  \r\n    return new Selection(merges, this._parents);\r\n  }\r\n  \r\n  function selection_order() {\r\n  \r\n    for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\r\n      for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\r\n        if (node = group[i]) {\r\n          if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);\r\n          next = node;\r\n        }\r\n      }\r\n    }\r\n  \r\n    return this;\r\n  }\r\n  \r\n  function selection_sort(compare) {\r\n    if (!compare) compare = ascending$1;\r\n  \r\n    function compareNode(a, b) {\r\n      return a && b ? compare(a.__data__, b.__data__) : !a - !b;\r\n    }\r\n  \r\n    for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\r\n      for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\r\n        if (node = group[i]) {\r\n          sortgroup[i] = node;\r\n        }\r\n      }\r\n      sortgroup.sort(compareNode);\r\n    }\r\n  \r\n    return new Selection(sortgroups, this._parents).order();\r\n  }\r\n  \r\n  function ascending$1(a, b) {\r\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\r\n  }\r\n  \r\n  function selection_call() {\r\n    var callback = arguments[0];\r\n    arguments[0] = this;\r\n    callback.apply(null, arguments);\r\n    return this;\r\n  }\r\n  \r\n  function selection_nodes() {\r\n    var nodes = new Array(this.size()), i = -1;\r\n    this.each(function() { nodes[++i] = this; });\r\n    return nodes;\r\n  }\r\n  \r\n  function selection_node() {\r\n  \r\n    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\r\n      for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\r\n        var node = group[i];\r\n        if (node) return node;\r\n      }\r\n    }\r\n  \r\n    return null;\r\n  }\r\n  \r\n  function selection_size() {\r\n    var size = 0;\r\n    this.each(function() { ++size; });\r\n    return size;\r\n  }\r\n  \r\n  function selection_empty() {\r\n    return !this.node();\r\n  }\r\n  \r\n  function selection_each(callback) {\r\n  \r\n    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\r\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\r\n        if (node = group[i]) callback.call(node, node.__data__, i, group);\r\n      }\r\n    }\r\n  \r\n    return this;\r\n  }\r\n  \r\n  function attrRemove(name) {\r\n    return function() {\r\n      this.removeAttribute(name);\r\n    };\r\n  }\r\n  \r\n  function attrRemoveNS(fullname) {\r\n    return function() {\r\n      this.removeAttributeNS(fullname.space, fullname.local);\r\n    };\r\n  }\r\n  \r\n  function attrConstant(name, value) {\r\n    return function() {\r\n      this.setAttribute(name, value);\r\n    };\r\n  }\r\n  \r\n  function attrConstantNS(fullname, value) {\r\n    return function() {\r\n      this.setAttributeNS(fullname.space, fullname.local, value);\r\n    };\r\n  }\r\n  \r\n  function attrFunction(name, value) {\r\n    return function() {\r\n      var v = value.apply(this, arguments);\r\n      if (v == null) this.removeAttribute(name);\r\n      else this.setAttribute(name, v);\r\n    };\r\n  }\r\n  \r\n  function attrFunctionNS(fullname, value) {\r\n    return function() {\r\n      var v = value.apply(this, arguments);\r\n      if (v == null) this.removeAttributeNS(fullname.space, fullname.local);\r\n      else this.setAttributeNS(fullname.space, fullname.local, v);\r\n    };\r\n  }\r\n  \r\n  function selection_attr(name, value) {\r\n    var fullname = namespace(name);\r\n  \r\n    if (arguments.length < 2) {\r\n      var node = this.node();\r\n      return fullname.local\r\n          ? node.getAttributeNS(fullname.space, fullname.local)\r\n          : node.getAttribute(fullname);\r\n    }\r\n  \r\n    return this.each((value == null\r\n        ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === \"function\"\r\n        ? (fullname.local ? attrFunctionNS : attrFunction)\r\n        : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));\r\n  }\r\n  \r\n  function defaultView(node) {\r\n    return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\r\n        || (node.document && node) // node is a Window\r\n        || node.defaultView; // node is a Document\r\n  }\r\n  \r\n  function styleRemove(name) {\r\n    return function() {\r\n      this.style.removeProperty(name);\r\n    };\r\n  }\r\n  \r\n  function styleConstant(name, value, priority) {\r\n    return function() {\r\n      this.style.setProperty(name, value, priority);\r\n    };\r\n  }\r\n  \r\n  function styleFunction(name, value, priority) {\r\n    return function() {\r\n      var v = value.apply(this, arguments);\r\n      if (v == null) this.style.removeProperty(name);\r\n      else this.style.setProperty(name, v, priority);\r\n    };\r\n  }\r\n  \r\n  function selection_style(name, value, priority) {\r\n    return arguments.length > 1\r\n        ? this.each((value == null\r\n              ? styleRemove : typeof value === \"function\"\r\n              ? styleFunction\r\n              : styleConstant)(name, value, priority == null ? \"\" : priority))\r\n        : styleValue(this.node(), name);\r\n  }\r\n  \r\n  function styleValue(node, name) {\r\n    return node.style.getPropertyValue(name)\r\n        || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);\r\n  }\r\n  \r\n  function propertyRemove(name) {\r\n    return function() {\r\n      delete this[name];\r\n    };\r\n  }\r\n  \r\n  function propertyConstant(name, value) {\r\n    return function() {\r\n      this[name] = value;\r\n    };\r\n  }\r\n  \r\n  function propertyFunction(name, value) {\r\n    return function() {\r\n      var v = value.apply(this, arguments);\r\n      if (v == null) delete this[name];\r\n      else this[name] = v;\r\n    };\r\n  }\r\n  \r\n  function selection_property(name, value) {\r\n    return arguments.length > 1\r\n        ? this.each((value == null\r\n            ? propertyRemove : typeof value === \"function\"\r\n            ? propertyFunction\r\n            : propertyConstant)(name, value))\r\n        : this.node()[name];\r\n  }\r\n  \r\n  function classArray(string) {\r\n    return string.trim().split(/^|\\s+/);\r\n  }\r\n  \r\n  function classList(node) {\r\n    return node.classList || new ClassList(node);\r\n  }\r\n  \r\n  function ClassList(node) {\r\n    this._node = node;\r\n    this._names = classArray(node.getAttribute(\"class\") || \"\");\r\n  }\r\n  \r\n  ClassList.prototype = {\r\n    add: function(name) {\r\n      var i = this._names.indexOf(name);\r\n      if (i < 0) {\r\n        this._names.push(name);\r\n        this._node.setAttribute(\"class\", this._names.join(\" \"));\r\n      }\r\n    },\r\n    remove: function(name) {\r\n      var i = this._names.indexOf(name);\r\n      if (i >= 0) {\r\n        this._names.splice(i, 1);\r\n        this._node.setAttribute(\"class\", this._names.join(\" \"));\r\n      }\r\n    },\r\n    contains: function(name) {\r\n      return this._names.indexOf(name) >= 0;\r\n    }\r\n  };\r\n  \r\n  function classedAdd(node, names) {\r\n    var list = classList(node), i = -1, n = names.length;\r\n    while (++i < n) list.add(names[i]);\r\n  }\r\n  \r\n  function classedRemove(node, names) {\r\n    var list = classList(node), i = -1, n = names.length;\r\n    while (++i < n) list.remove(names[i]);\r\n  }\r\n  \r\n  function classedTrue(names) {\r\n    return function() {\r\n      classedAdd(this, names);\r\n    };\r\n  }\r\n  \r\n  function classedFalse(names) {\r\n    return function() {\r\n      classedRemove(this, names);\r\n    };\r\n  }\r\n  \r\n  function classedFunction(names, value) {\r\n    return function() {\r\n      (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\r\n    };\r\n  }\r\n  \r\n  function selection_classed(name, value) {\r\n    var names = classArray(name + \"\");\r\n  \r\n    if (arguments.length < 2) {\r\n      var list = classList(this.node()), i = -1, n = names.length;\r\n      while (++i < n) if (!list.contains(names[i])) return false;\r\n      return true;\r\n    }\r\n  \r\n    return this.each((typeof value === \"function\"\r\n        ? classedFunction : value\r\n        ? classedTrue\r\n        : classedFalse)(names, value));\r\n  }\r\n  \r\n  function textRemove() {\r\n    this.textContent = \"\";\r\n  }\r\n  \r\n  function textConstant(value) {\r\n    return function() {\r\n      this.textContent = value;\r\n    };\r\n  }\r\n  \r\n  function textFunction(value) {\r\n    return function() {\r\n      var v = value.apply(this, arguments);\r\n      this.textContent = v == null ? \"\" : v;\r\n    };\r\n  }\r\n  \r\n  function selection_text(value) {\r\n    return arguments.length\r\n        ? this.each(value == null\r\n            ? textRemove : (typeof value === \"function\"\r\n            ? textFunction\r\n            : textConstant)(value))\r\n        : this.node().textContent;\r\n  }\r\n  \r\n  function htmlRemove() {\r\n    this.innerHTML = \"\";\r\n  }\r\n  \r\n  function htmlConstant(value) {\r\n    return function() {\r\n      this.innerHTML = value;\r\n    };\r\n  }\r\n  \r\n  function htmlFunction(value) {\r\n    return function() {\r\n      var v = value.apply(this, arguments);\r\n      this.innerHTML = v == null ? \"\" : v;\r\n    };\r\n  }\r\n  \r\n  function selection_html(value) {\r\n    return arguments.length\r\n        ? this.each(value == null\r\n            ? htmlRemove : (typeof value === \"function\"\r\n            ? htmlFunction\r\n            : htmlConstant)(value))\r\n        : this.node().innerHTML;\r\n  }\r\n  \r\n  function raise() {\r\n    if (this.nextSibling) this.parentNode.appendChild(this);\r\n  }\r\n  \r\n  function selection_raise() {\r\n    return this.each(raise);\r\n  }\r\n  \r\n  function lower() {\r\n    if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\r\n  }\r\n  \r\n  function selection_lower() {\r\n    return this.each(lower);\r\n  }\r\n  \r\n  function selection_append(name) {\r\n    var create = typeof name === \"function\" ? name : creator(name);\r\n    return this.select(function() {\r\n      return this.appendChild(create.apply(this, arguments));\r\n    });\r\n  }\r\n  \r\n  function constantNull() {\r\n    return null;\r\n  }\r\n  \r\n  function selection_insert(name, before) {\r\n    var create = typeof name === \"function\" ? name : creator(name),\r\n        select = before == null ? constantNull : typeof before === \"function\" ? before : selector(before);\r\n    return this.select(function() {\r\n      return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\r\n    });\r\n  }\r\n  \r\n  function remove() {\r\n    var parent = this.parentNode;\r\n    if (parent) parent.removeChild(this);\r\n  }\r\n  \r\n  function selection_remove() {\r\n    return this.each(remove);\r\n  }\r\n  \r\n  function selection_cloneShallow() {\r\n    var clone = this.cloneNode(false), parent = this.parentNode;\r\n    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\r\n  }\r\n  \r\n  function selection_cloneDeep() {\r\n    var clone = this.cloneNode(true), parent = this.parentNode;\r\n    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\r\n  }\r\n  \r\n  function selection_clone(deep) {\r\n    return this.select(deep ? selection_cloneDeep : selection_cloneShallow);\r\n  }\r\n  \r\n  function selection_datum(value) {\r\n    return arguments.length\r\n        ? this.property(\"__data__\", value)\r\n        : this.node().__data__;\r\n  }\r\n  \r\n  var filterEvents = {};\r\n  \r\n  exports.event = null;\r\n  \r\n  if (typeof document !== \"undefined\") {\r\n    var element = document.documentElement;\r\n    if (!(\"onmouseenter\" in element)) {\r\n      filterEvents = {mouseenter: \"mouseover\", mouseleave: \"mouseout\"};\r\n    }\r\n  }\r\n  \r\n  function filterContextListener(listener, index, group) {\r\n    listener = contextListener(listener, index, group);\r\n    return function(event) {\r\n      var related = event.relatedTarget;\r\n      if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {\r\n        listener.call(this, event);\r\n      }\r\n    };\r\n  }\r\n  \r\n  function contextListener(listener, index, group) {\r\n    return function(event1) {\r\n      var event0 = exports.event; // Events can be reentrant (e.g., focus).\r\n      exports.event = event1;\r\n      try {\r\n        listener.call(this, this.__data__, index, group);\r\n      } finally {\r\n        exports.event = event0;\r\n      }\r\n    };\r\n  }\r\n  \r\n  function parseTypenames$1(typenames) {\r\n    return typenames.trim().split(/^|\\s+/).map(function(t) {\r\n      var name = \"\", i = t.indexOf(\".\");\r\n      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\r\n      return {type: t, name: name};\r\n    });\r\n  }\r\n  \r\n  function onRemove(typename) {\r\n    return function() {\r\n      var on = this.__on;\r\n      if (!on) return;\r\n      for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\r\n        if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\r\n          this.removeEventListener(o.type, o.listener, o.capture);\r\n        } else {\r\n          on[++i] = o;\r\n        }\r\n      }\r\n      if (++i) on.length = i;\r\n      else delete this.__on;\r\n    };\r\n  }\r\n  \r\n  function onAdd(typename, value, capture) {\r\n    var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;\r\n    return function(d, i, group) {\r\n      var on = this.__on, o, listener = wrap(value, i, group);\r\n      if (on) for (var j = 0, m = on.length; j < m; ++j) {\r\n        if ((o = on[j]).type === typename.type && o.name === typename.name) {\r\n          this.removeEventListener(o.type, o.listener, o.capture);\r\n          this.addEventListener(o.type, o.listener = listener, o.capture = capture);\r\n          o.value = value;\r\n          return;\r\n        }\r\n      }\r\n      this.addEventListener(typename.type, listener, capture);\r\n      o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};\r\n      if (!on) this.__on = [o];\r\n      else on.push(o);\r\n    };\r\n  }\r\n  \r\n  function selection_on(typename, value, capture) {\r\n    var typenames = parseTypenames$1(typename + \"\"), i, n = typenames.length, t;\r\n  \r\n    if (arguments.length < 2) {\r\n      var on = this.node().__on;\r\n      if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\r\n        for (i = 0, o = on[j]; i < n; ++i) {\r\n          if ((t = typenames[i]).type === o.type && t.name === o.name) {\r\n            return o.value;\r\n          }\r\n        }\r\n      }\r\n      return;\r\n    }\r\n  \r\n    on = value ? onAdd : onRemove;\r\n    if (capture == null) capture = false;\r\n    for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));\r\n    return this;\r\n  }\r\n  \r\n  function customEvent(event1, listener, that, args) {\r\n    var event0 = exports.event;\r\n    event1.sourceEvent = exports.event;\r\n    exports.event = event1;\r\n    try {\r\n      return listener.apply(that, args);\r\n    } finally {\r\n      exports.event = event0;\r\n    }\r\n  }\r\n  \r\n  function dispatchEvent(node, type, params) {\r\n    var window = defaultView(node),\r\n        event = window.CustomEvent;\r\n  \r\n    if (typeof event === \"function\") {\r\n      event = new event(type, params);\r\n    } else {\r\n      event = window.document.createEvent(\"Event\");\r\n      if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;\r\n      else event.initEvent(type, false, false);\r\n    }\r\n  \r\n    node.dispatchEvent(event);\r\n  }\r\n  \r\n  function dispatchConstant(type, params) {\r\n    return function() {\r\n      return dispatchEvent(this, type, params);\r\n    };\r\n  }\r\n  \r\n  function dispatchFunction(type, params) {\r\n    return function() {\r\n      return dispatchEvent(this, type, params.apply(this, arguments));\r\n    };\r\n  }\r\n  \r\n  function selection_dispatch(type, params) {\r\n    return this.each((typeof params === \"function\"\r\n        ? dispatchFunction\r\n        : dispatchConstant)(type, params));\r\n  }\r\n  \r\n  var root = [null];\r\n  \r\n  function Selection(groups, parents) {\r\n    this._groups = groups;\r\n    this._parents = parents;\r\n  }\r\n  \r\n  function selection() {\r\n    return new Selection([[document.documentElement]], root);\r\n  }\r\n  \r\n  Selection.prototype = selection.prototype = {\r\n    constructor: Selection,\r\n    select: selection_select,\r\n    selectAll: selection_selectAll,\r\n    filter: selection_filter,\r\n    data: selection_data,\r\n    enter: selection_enter,\r\n    exit: selection_exit,\r\n    join: selection_join,\r\n    merge: selection_merge,\r\n    order: selection_order,\r\n    sort: selection_sort,\r\n    call: selection_call,\r\n    nodes: selection_nodes,\r\n    node: selection_node,\r\n    size: selection_size,\r\n    empty: selection_empty,\r\n    each: selection_each,\r\n    attr: selection_attr,\r\n    style: selection_style,\r\n    property: selection_property,\r\n    classed: selection_classed,\r\n    text: selection_text,\r\n    html: selection_html,\r\n    raise: selection_raise,\r\n    lower: selection_lower,\r\n    append: selection_append,\r\n    insert: selection_insert,\r\n    remove: selection_remove,\r\n    clone: selection_clone,\r\n    datum: selection_datum,\r\n    on: selection_on,\r\n    dispatch: selection_dispatch\r\n  };\r\n  \r\n  function select(selector) {\r\n    return typeof selector === \"string\"\r\n        ? new Selection([[document.querySelector(selector)]], [document.documentElement])\r\n        : new Selection([[selector]], root);\r\n  }\r\n  \r\n  function create(name) {\r\n    return select(creator(name).call(document.documentElement));\r\n  }\r\n  \r\n  var nextId = 0;\r\n  \r\n  function local() {\r\n    return new Local;\r\n  }\r\n  \r\n  function Local() {\r\n    this._ = \"@\" + (++nextId).toString(36);\r\n  }\r\n  \r\n  Local.prototype = local.prototype = {\r\n    constructor: Local,\r\n    get: function(node) {\r\n      var id = this._;\r\n      while (!(id in node)) if (!(node = node.parentNode)) return;\r\n      return node[id];\r\n    },\r\n    set: function(node, value) {\r\n      return node[this._] = value;\r\n    },\r\n    remove: function(node) {\r\n      return this._ in node && delete node[this._];\r\n    },\r\n    toString: function() {\r\n      return this._;\r\n    }\r\n  };\r\n  \r\n  function sourceEvent() {\r\n    var current = exports.event, source;\r\n    while (source = current.sourceEvent) current = source;\r\n    return current;\r\n  }\r\n  \r\n  function point(node, event) {\r\n    var svg = node.ownerSVGElement || node;\r\n  \r\n    if (svg.createSVGPoint) {\r\n      var point = svg.createSVGPoint();\r\n      point.x = event.clientX, point.y = event.clientY;\r\n      point = point.matrixTransform(node.getScreenCTM().inverse());\r\n      return [point.x, point.y];\r\n    }\r\n  \r\n    var rect = node.getBoundingClientRect();\r\n    return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];\r\n  }\r\n  \r\n  function mouse(node) {\r\n    var event = sourceEvent();\r\n    if (event.changedTouches) event = event.changedTouches[0];\r\n    return point(node, event);\r\n  }\r\n  \r\n  function selectAll(selector) {\r\n    return typeof selector === \"string\"\r\n        ? new Selection([document.querySelectorAll(selector)], [document.documentElement])\r\n        : new Selection([selector == null ? [] : selector], root);\r\n  }\r\n  \r\n  function touch(node, touches, identifier) {\r\n    if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;\r\n  \r\n    for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {\r\n      if ((touch = touches[i]).identifier === identifier) {\r\n        return point(node, touch);\r\n      }\r\n    }\r\n  \r\n    return null;\r\n  }\r\n  \r\n  function touches(node, touches) {\r\n    if (touches == null) touches = sourceEvent().touches;\r\n  \r\n    for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {\r\n      points[i] = point(node, touches[i]);\r\n    }\r\n  \r\n    return points;\r\n  }\r\n  \r\n  function nopropagation() {\r\n    exports.event.stopImmediatePropagation();\r\n  }\r\n  \r\n  function noevent() {\r\n    exports.event.preventDefault();\r\n    exports.event.stopImmediatePropagation();\r\n  }\r\n  \r\n  function dragDisable(view) {\r\n    var root = view.document.documentElement,\r\n        selection = select(view).on(\"dragstart.drag\", noevent, true);\r\n    if (\"onselectstart\" in root) {\r\n      selection.on(\"selectstart.drag\", noevent, true);\r\n    } else {\r\n      root.__noselect = root.style.MozUserSelect;\r\n      root.style.MozUserSelect = \"none\";\r\n    }\r\n  }\r\n  \r\n  function yesdrag(view, noclick) {\r\n    var root = view.document.documentElement,\r\n        selection = select(view).on(\"dragstart.drag\", null);\r\n    if (noclick) {\r\n      selection.on(\"click.drag\", noevent, true);\r\n      setTimeout(function() { selection.on(\"click.drag\", null); }, 0);\r\n    }\r\n    if (\"onselectstart\" in root) {\r\n      selection.on(\"selectstart.drag\", null);\r\n    } else {\r\n      root.style.MozUserSelect = root.__noselect;\r\n      delete root.__noselect;\r\n    }\r\n  }\r\n  \r\n  function constant$2(x) {\r\n    return function() {\r\n      return x;\r\n    };\r\n  }\r\n  \r\n  function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {\r\n    this.target = target;\r\n    this.type = type;\r\n    this.subject = subject;\r\n    this.identifier = id;\r\n    this.active = active;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.dx = dx;\r\n    this.dy = dy;\r\n    this._ = dispatch;\r\n  }\r\n  \r\n  DragEvent.prototype.on = function() {\r\n    var value = this._.on.apply(this._, arguments);\r\n    return value === this._ ? this : value;\r\n  };\r\n  \r\n  // Ignore right-click, since that should open the context menu.\r\n  function defaultFilter() {\r\n    return !exports.event.ctrlKey && !exports.event.button;\r\n  }\r\n  \r\n  function defaultContainer() {\r\n    return this.parentNode;\r\n  }\r\n  \r\n  function defaultSubject(d) {\r\n    return d == null ? {x: exports.event.x, y: exports.event.y} : d;\r\n  }\r\n  \r\n  function defaultTouchable() {\r\n    return navigator.maxTouchPoints || (\"ontouchstart\" in this);\r\n  }\r\n  \r\n  function drag() {\r\n    var filter = defaultFilter,\r\n        container = defaultContainer,\r\n        subject = defaultSubject,\r\n        touchable = defaultTouchable,\r\n        gestures = {},\r\n        listeners = dispatch(\"start\", \"drag\", \"end\"),\r\n        active = 0,\r\n        mousedownx,\r\n        mousedowny,\r\n        mousemoving,\r\n        touchending,\r\n        clickDistance2 = 0;\r\n  \r\n    function drag(selection) {\r\n      selection\r\n          .on(\"mousedown.drag\", mousedowned)\r\n        .filter(touchable)\r\n          .on(\"touchstart.drag\", touchstarted)\r\n          .on(\"touchmove.drag\", touchmoved)\r\n          .on(\"touchend.drag touchcancel.drag\", touchended)\r\n          .style(\"touch-action\", \"none\")\r\n          .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\r\n    }\r\n  \r\n    function mousedowned() {\r\n      if (touchending || !filter.apply(this, arguments)) return;\r\n      var gesture = beforestart(\"mouse\", container.apply(this, arguments), mouse, this, arguments);\r\n      if (!gesture) return;\r\n      select(exports.event.view).on(\"mousemove.drag\", mousemoved, true).on(\"mouseup.drag\", mouseupped, true);\r\n      dragDisable(exports.event.view);\r\n      nopropagation();\r\n      mousemoving = false;\r\n      mousedownx = exports.event.clientX;\r\n      mousedowny = exports.event.clientY;\r\n      gesture(\"start\");\r\n    }\r\n  \r\n    function mousemoved() {\r\n      noevent();\r\n      if (!mousemoving) {\r\n        var dx = exports.event.clientX - mousedownx, dy = exports.event.clientY - mousedowny;\r\n        mousemoving = dx * dx + dy * dy > clickDistance2;\r\n      }\r\n      gestures.mouse(\"drag\");\r\n    }\r\n  \r\n    function mouseupped() {\r\n      select(exports.event.view).on(\"mousemove.drag mouseup.drag\", null);\r\n      yesdrag(exports.event.view, mousemoving);\r\n      noevent();\r\n      gestures.mouse(\"end\");\r\n    }\r\n  \r\n    function touchstarted() {\r\n      if (!filter.apply(this, arguments)) return;\r\n      var touches = exports.event.changedTouches,\r\n          c = container.apply(this, arguments),\r\n          n = touches.length, i, gesture;\r\n  \r\n      for (i = 0; i < n; ++i) {\r\n        if (gesture = beforestart(touches[i].identifier, c, touch, this, arguments)) {\r\n          nopropagation();\r\n          gesture(\"start\");\r\n        }\r\n      }\r\n    }\r\n  \r\n    function touchmoved() {\r\n      var touches = exports.event.changedTouches,\r\n          n = touches.length, i, gesture;\r\n  \r\n      for (i = 0; i < n; ++i) {\r\n        if (gesture = gestures[touches[i].identifier]) {\r\n          noevent();\r\n          gesture(\"drag\");\r\n        }\r\n      }\r\n    }\r\n  \r\n    function touchended() {\r\n      var touches = exports.event.changedTouches,\r\n          n = touches.length, i, gesture;\r\n  \r\n      if (touchending) clearTimeout(touchending);\r\n      touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\r\n      for (i = 0; i < n; ++i) {\r\n        if (gesture = gestures[touches[i].identifier]) {\r\n          nopropagation();\r\n          gesture(\"end\");\r\n        }\r\n      }\r\n    }\r\n  \r\n    function beforestart(id, container, point, that, args) {\r\n      var p = point(container, id), s, dx, dy,\r\n          sublisteners = listeners.copy();\r\n  \r\n      if (!customEvent(new DragEvent(drag, \"beforestart\", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {\r\n        if ((exports.event.subject = s = subject.apply(that, args)) == null) return false;\r\n        dx = s.x - p[0] || 0;\r\n        dy = s.y - p[1] || 0;\r\n        return true;\r\n      })) return;\r\n  \r\n      return function gesture(type) {\r\n        var p0 = p, n;\r\n        switch (type) {\r\n          case \"start\": gestures[id] = gesture, n = active++; break;\r\n          case \"end\": delete gestures[id], --active; // nobreak\r\n          case \"drag\": p = point(container, id), n = active; break;\r\n        }\r\n        customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);\r\n      };\r\n    }\r\n  \r\n    drag.filter = function(_) {\r\n      return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant$2(!!_), drag) : filter;\r\n    };\r\n  \r\n    drag.container = function(_) {\r\n      return arguments.length ? (container = typeof _ === \"function\" ? _ : constant$2(_), drag) : container;\r\n    };\r\n  \r\n    drag.subject = function(_) {\r\n      return arguments.length ? (subject = typeof _ === \"function\" ? _ : constant$2(_), drag) : subject;\r\n    };\r\n  \r\n    drag.touchable = function(_) {\r\n      return arguments.length ? (touchable = typeof _ === \"function\" ? _ : constant$2(!!_), drag) : touchable;\r\n    };\r\n  \r\n    drag.on = function() {\r\n      var value = listeners.on.apply(listeners, arguments);\r\n      return value === listeners ? drag : value;\r\n    };\r\n  \r\n    drag.clickDistance = function(_) {\r\n      return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);\r\n    };\r\n  \r\n    return drag;\r\n  }\r\n  \r\n  function define(constructor, factory, prototype) {\r\n    constructor.prototype = factory.prototype = prototype;\r\n    prototype.constructor = constructor;\r\n  }\r\n  \r\n  function extend(parent, definition) {\r\n    var prototype = Object.create(parent.prototype);\r\n    for (var key in definition) prototype[key] = definition[key];\r\n    return prototype;\r\n  }\r\n  \r\n  function Color() {}\r\n  \r\n  var darker = 0.7;\r\n  var brighter = 1 / darker;\r\n  \r\n  var reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\r\n      reN = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\r\n      reP = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\r\n      reHex = /^#([0-9a-f]{3,8})$/,\r\n      reRgbInteger = new RegExp(\"^rgb\\\\(\" + [reI, reI, reI] + \"\\\\)$\"),\r\n      reRgbPercent = new RegExp(\"^rgb\\\\(\" + [reP, reP, reP] + \"\\\\)$\"),\r\n      reRgbaInteger = new RegExp(\"^rgba\\\\(\" + [reI, reI, reI, reN] + \"\\\\)$\"),\r\n      reRgbaPercent = new RegExp(\"^rgba\\\\(\" + [reP, reP, reP, reN] + \"\\\\)$\"),\r\n      reHslPercent = new RegExp(\"^hsl\\\\(\" + [reN, reP, reP] + \"\\\\)$\"),\r\n      reHslaPercent = new RegExp(\"^hsla\\\\(\" + [reN, reP, reP, reN] + \"\\\\)$\");\r\n  \r\n  var named = {\r\n    aliceblue: 0xf0f8ff,\r\n    antiquewhite: 0xfaebd7,\r\n    aqua: 0x00ffff,\r\n    aquamarine: 0x7fffd4,\r\n    azure: 0xf0ffff,\r\n    beige: 0xf5f5dc,\r\n    bisque: 0xffe4c4,\r\n    black: 0x000000,\r\n    blanchedalmond: 0xffebcd,\r\n    blue: 0x0000ff,\r\n    blueviolet: 0x8a2be2,\r\n    brown: 0xa52a2a,\r\n    burlywood: 0xdeb887,\r\n    cadetblue: 0x5f9ea0,\r\n    chartreuse: 0x7fff00,\r\n    chocolate: 0xd2691e,\r\n    coral: 0xff7f50,\r\n    cornflowerblue: 0x6495ed,\r\n    cornsilk: 0xfff8dc,\r\n    crimson: 0xdc143c,\r\n    cyan: 0x00ffff,\r\n    darkblue: 0x00008b,\r\n    darkcyan: 0x008b8b,\r\n    darkgoldenrod: 0xb8860b,\r\n    darkgray: 0xa9a9a9,\r\n    darkgreen: 0x006400,\r\n    darkgrey: 0xa9a9a9,\r\n    darkkhaki: 0xbdb76b,\r\n    darkmagenta: 0x8b008b,\r\n    darkolivegreen: 0x556b2f,\r\n    darkorange: 0xff8c00,\r\n    darkorchid: 0x9932cc,\r\n    darkred: 0x8b0000,\r\n    darksalmon: 0xe9967a,\r\n    darkseagreen: 0x8fbc8f,\r\n    darkslateblue: 0x483d8b,\r\n    darkslategray: 0x2f4f4f,\r\n    darkslategrey: 0x2f4f4f,\r\n    darkturquoise: 0x00ced1,\r\n    darkviolet: 0x9400d3,\r\n    deeppink: 0xff1493,\r\n    deepskyblue: 0x00bfff,\r\n    dimgray: 0x696969,\r\n    dimgrey: 0x696969,\r\n    dodgerblue: 0x1e90ff,\r\n    firebrick: 0xb22222,\r\n    floralwhite: 0xfffaf0,\r\n    forestgreen: 0x228b22,\r\n    fuchsia: 0xff00ff,\r\n    gainsboro: 0xdcdcdc,\r\n    ghostwhite: 0xf8f8ff,\r\n    gold: 0xffd700,\r\n    goldenrod: 0xdaa520,\r\n    gray: 0x808080,\r\n    green: 0x008000,\r\n    greenyellow: 0xadff2f,\r\n    grey: 0x808080,\r\n    honeydew: 0xf0fff0,\r\n    hotpink: 0xff69b4,\r\n    indianred: 0xcd5c5c,\r\n    indigo: 0x4b0082,\r\n    ivory: 0xfffff0,\r\n    khaki: 0xf0e68c,\r\n    lavender: 0xe6e6fa,\r\n    lavenderblush: 0xfff0f5,\r\n    lawngreen: 0x7cfc00,\r\n    lemonchiffon: 0xfffacd,\r\n    lightblue: 0xadd8e6,\r\n    lightcoral: 0xf08080,\r\n    lightcyan: 0xe0ffff,\r\n    lightgoldenrodyellow: 0xfafad2,\r\n    lightgray: 0xd3d3d3,\r\n    lightgreen: 0x90ee90,\r\n    lightgrey: 0xd3d3d3,\r\n    lightpink: 0xffb6c1,\r\n    lightsalmon: 0xffa07a,\r\n    lightseagreen: 0x20b2aa,\r\n    lightskyblue: 0x87cefa,\r\n    lightslategray: 0x778899,\r\n    lightslategrey: 0x778899,\r\n    lightsteelblue: 0xb0c4de,\r\n    lightyellow: 0xffffe0,\r\n    lime: 0x00ff00,\r\n    limegreen: 0x32cd32,\r\n    linen: 0xfaf0e6,\r\n    magenta: 0xff00ff,\r\n    maroon: 0x800000,\r\n    mediumaquamarine: 0x66cdaa,\r\n    mediumblue: 0x0000cd,\r\n    mediumorchid: 0xba55d3,\r\n    mediumpurple: 0x9370db,\r\n    mediumseagreen: 0x3cb371,\r\n    mediumslateblue: 0x7b68ee,\r\n    mediumspringgreen: 0x00fa9a,\r\n    mediumturquoise: 0x48d1cc,\r\n    mediumvioletred: 0xc71585,\r\n    midnightblue: 0x191970,\r\n    mintcream: 0xf5fffa,\r\n    mistyrose: 0xffe4e1,\r\n    moccasin: 0xffe4b5,\r\n    navajowhite: 0xffdead,\r\n    navy: 0x000080,\r\n    oldlace: 0xfdf5e6,\r\n    olive: 0x808000,\r\n    olivedrab: 0x6b8e23,\r\n    orange: 0xffa500,\r\n    orangered: 0xff4500,\r\n    orchid: 0xda70d6,\r\n    palegoldenrod: 0xeee8aa,\r\n    palegreen: 0x98fb98,\r\n    paleturquoise: 0xafeeee,\r\n    palevioletred: 0xdb7093,\r\n    papayawhip: 0xffefd5,\r\n    peachpuff: 0xffdab9,\r\n    peru: 0xcd853f,\r\n    pink: 0xffc0cb,\r\n    plum: 0xdda0dd,\r\n    powderblue: 0xb0e0e6,\r\n    purple: 0x800080,\r\n    rebeccapurple: 0x663399,\r\n    red: 0xff0000,\r\n    rosybrown: 0xbc8f8f,\r\n    royalblue: 0x4169e1,\r\n    saddlebrown: 0x8b4513,\r\n    salmon: 0xfa8072,\r\n    sandybrown: 0xf4a460,\r\n    seagreen: 0x2e8b57,\r\n    seashell: 0xfff5ee,\r\n    sienna: 0xa0522d,\r\n    silver: 0xc0c0c0,\r\n    skyblue: 0x87ceeb,\r\n    slateblue: 0x6a5acd,\r\n    slategray: 0x708090,\r\n    slategrey: 0x708090,\r\n    snow: 0xfffafa,\r\n    springgreen: 0x00ff7f,\r\n    steelblue: 0x4682b4,\r\n    tan: 0xd2b48c,\r\n    teal: 0x008080,\r\n    thistle: 0xd8bfd8,\r\n    tomato: 0xff6347,\r\n    turquoise: 0x40e0d0,\r\n    violet: 0xee82ee,\r\n    wheat: 0xf5deb3,\r\n    white: 0xffffff,\r\n    whitesmoke: 0xf5f5f5,\r\n    yellow: 0xffff00,\r\n    yellowgreen: 0x9acd32\r\n  };\r\n  \r\n  define(Color, color, {\r\n    copy: function(channels) {\r\n      return Object.assign(new this.constructor, this, channels);\r\n    },\r\n    displayable: function() {\r\n      return this.rgb().displayable();\r\n    },\r\n    hex: color_formatHex, // Deprecated! Use color.formatHex.\r\n    formatHex: color_formatHex,\r\n    formatHsl: color_formatHsl,\r\n    formatRgb: color_formatRgb,\r\n    toString: color_formatRgb\r\n  });\r\n  \r\n  function color_formatHex() {\r\n    return this.rgb().formatHex();\r\n  }\r\n  \r\n  function color_formatHsl() {\r\n    return hslConvert(this).formatHsl();\r\n  }\r\n  \r\n  function color_formatRgb() {\r\n    return this.rgb().formatRgb();\r\n  }\r\n  \r\n  function color(format) {\r\n    var m, l;\r\n    format = (format + \"\").trim().toLowerCase();\r\n    return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000\r\n        : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00\r\n        : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000\r\n        : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000\r\n        : null) // invalid hex\r\n        : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\r\n        : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\r\n        : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\r\n        : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\r\n        : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\r\n        : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\r\n        : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins\r\n        : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0)\r\n        : null;\r\n  }\r\n  \r\n  function rgbn(n) {\r\n    return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\r\n  }\r\n  \r\n  function rgba(r, g, b, a) {\r\n    if (a <= 0) r = g = b = NaN;\r\n    return new Rgb(r, g, b, a);\r\n  }\r\n  \r\n  function rgbConvert(o) {\r\n    if (!(o instanceof Color)) o = color(o);\r\n    if (!o) return new Rgb;\r\n    o = o.rgb();\r\n    return new Rgb(o.r, o.g, o.b, o.opacity);\r\n  }\r\n  \r\n  function rgb(r, g, b, opacity) {\r\n    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\r\n  }\r\n  \r\n  function Rgb(r, g, b, opacity) {\r\n    this.r = +r;\r\n    this.g = +g;\r\n    this.b = +b;\r\n    this.opacity = +opacity;\r\n  }\r\n  \r\n  define(Rgb, rgb, extend(Color, {\r\n    brighter: function(k) {\r\n      k = k == null ? brighter : Math.pow(brighter, k);\r\n      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\r\n    },\r\n    darker: function(k) {\r\n      k = k == null ? darker : Math.pow(darker, k);\r\n      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\r\n    },\r\n    rgb: function() {\r\n      return this;\r\n    },\r\n    displayable: function() {\r\n      return (-0.5 <= this.r && this.r < 255.5)\r\n          && (-0.5 <= this.g && this.g < 255.5)\r\n          && (-0.5 <= this.b && this.b < 255.5)\r\n          && (0 <= this.opacity && this.opacity <= 1);\r\n    },\r\n    hex: rgb_formatHex, // Deprecated! Use color.formatHex.\r\n    formatHex: rgb_formatHex,\r\n    formatRgb: rgb_formatRgb,\r\n    toString: rgb_formatRgb\r\n  }));\r\n  \r\n  function rgb_formatHex() {\r\n    return \"#\" + hex(this.r) + hex(this.g) + hex(this.b);\r\n  }\r\n  \r\n  function rgb_formatRgb() {\r\n    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\r\n    return (a === 1 ? \"rgb(\" : \"rgba(\")\r\n        + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \"\r\n        + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \"\r\n        + Math.max(0, Math.min(255, Math.round(this.b) || 0))\r\n        + (a === 1 ? \")\" : \", \" + a + \")\");\r\n  }\r\n  \r\n  function hex(value) {\r\n    value = Math.max(0, Math.min(255, Math.round(value) || 0));\r\n    return (value < 16 ? \"0\" : \"\") + value.toString(16);\r\n  }\r\n  \r\n  function hsla(h, s, l, a) {\r\n    if (a <= 0) h = s = l = NaN;\r\n    else if (l <= 0 || l >= 1) h = s = NaN;\r\n    else if (s <= 0) h = NaN;\r\n    return new Hsl(h, s, l, a);\r\n  }\r\n  \r\n  function hslConvert(o) {\r\n    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\r\n    if (!(o instanceof Color)) o = color(o);\r\n    if (!o) return new Hsl;\r\n    if (o instanceof Hsl) return o;\r\n    o = o.rgb();\r\n    var r = o.r / 255,\r\n        g = o.g / 255,\r\n        b = o.b / 255,\r\n        min = Math.min(r, g, b),\r\n        max = Math.max(r, g, b),\r\n        h = NaN,\r\n        s = max - min,\r\n        l = (max + min) / 2;\r\n    if (s) {\r\n      if (r === max) h = (g - b) / s + (g < b) * 6;\r\n      else if (g === max) h = (b - r) / s + 2;\r\n      else h = (r - g) / s + 4;\r\n      s /= l < 0.5 ? max + min : 2 - max - min;\r\n      h *= 60;\r\n    } else {\r\n      s = l > 0 && l < 1 ? 0 : h;\r\n    }\r\n    return new Hsl(h, s, l, o.opacity);\r\n  }\r\n  \r\n  function hsl(h, s, l, opacity) {\r\n    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\r\n  }\r\n  \r\n  function Hsl(h, s, l, opacity) {\r\n    this.h = +h;\r\n    this.s = +s;\r\n    this.l = +l;\r\n    this.opacity = +opacity;\r\n  }\r\n  \r\n  define(Hsl, hsl, extend(Color, {\r\n    brighter: function(k) {\r\n      k = k == null ? brighter : Math.pow(brighter, k);\r\n      return new Hsl(this.h, this.s, this.l * k, this.opacity);\r\n    },\r\n    darker: function(k) {\r\n      k = k == null ? darker : Math.pow(darker, k);\r\n      return new Hsl(this.h, this.s, this.l * k, this.opacity);\r\n    },\r\n    rgb: function() {\r\n      var h = this.h % 360 + (this.h < 0) * 360,\r\n          s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\r\n          l = this.l,\r\n          m2 = l + (l < 0.5 ? l : 1 - l) * s,\r\n          m1 = 2 * l - m2;\r\n      return new Rgb(\r\n        hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\r\n        hsl2rgb(h, m1, m2),\r\n        hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\r\n        this.opacity\r\n      );\r\n    },\r\n    displayable: function() {\r\n      return (0 <= this.s && this.s <= 1 || isNaN(this.s))\r\n          && (0 <= this.l && this.l <= 1)\r\n          && (0 <= this.opacity && this.opacity <= 1);\r\n    },\r\n    formatHsl: function() {\r\n      var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\r\n      return (a === 1 ? \"hsl(\" : \"hsla(\")\r\n          + (this.h || 0) + \", \"\r\n          + (this.s || 0) * 100 + \"%, \"\r\n          + (this.l || 0) * 100 + \"%\"\r\n          + (a === 1 ? \")\" : \", \" + a + \")\");\r\n    }\r\n  }));\r\n  \r\n  /* From FvD 13.37, CSS Color Module Level 3 */\r\n  function hsl2rgb(h, m1, m2) {\r\n    return (h < 60 ? m1 + (m2 - m1) * h / 60\r\n        : h < 180 ? m2\r\n        : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\r\n        : m1) * 255;\r\n  }\r\n  \r\n  var deg2rad = Math.PI / 180;\r\n  var rad2deg = 180 / Math.PI;\r\n  \r\n  // https://observablehq.com/@mbostock/lab-and-rgb\r\n  var K = 18,\r\n      Xn = 0.96422,\r\n      Yn = 1,\r\n      Zn = 0.82521,\r\n      t0 = 4 / 29,\r\n      t1 = 6 / 29,\r\n      t2 = 3 * t1 * t1,\r\n      t3 = t1 * t1 * t1;\r\n  \r\n  function labConvert(o) {\r\n    if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);\r\n    if (o instanceof Hcl) return hcl2lab(o);\r\n    if (!(o instanceof Rgb)) o = rgbConvert(o);\r\n    var r = rgb2lrgb(o.r),\r\n        g = rgb2lrgb(o.g),\r\n        b = rgb2lrgb(o.b),\r\n        y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;\r\n    if (r === g && g === b) x = z = y; else {\r\n      x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);\r\n      z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);\r\n    }\r\n    return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);\r\n  }\r\n  \r\n  function gray(l, opacity) {\r\n    return new Lab(l, 0, 0, opacity == null ? 1 : opacity);\r\n  }\r\n  \r\n  function lab(l, a, b, opacity) {\r\n    return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);\r\n  }\r\n  \r\n  function Lab(l, a, b, opacity) {\r\n    this.l = +l;\r\n    this.a = +a;\r\n    this.b = +b;\r\n    this.opacity = +opacity;\r\n  }\r\n  \r\n  define(Lab, lab, extend(Color, {\r\n    brighter: function(k) {\r\n      return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);\r\n    },\r\n    darker: function(k) {\r\n      return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);\r\n    },\r\n    rgb: function() {\r\n      var y = (this.l + 16) / 116,\r\n          x = isNaN(this.a) ? y : y + this.a / 500,\r\n          z = isNaN(this.b) ? y : y - this.b / 200;\r\n      x = Xn * lab2xyz(x);\r\n      y = Yn * lab2xyz(y);\r\n      z = Zn * lab2xyz(z);\r\n      return new Rgb(\r\n        lrgb2rgb( 3.1338561 * x - 1.6168667 * y - 0.4906146 * z),\r\n        lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),\r\n        lrgb2rgb( 0.0719453 * x - 0.2289914 * y + 1.4052427 * z),\r\n        this.opacity\r\n      );\r\n    }\r\n  }));\r\n  \r\n  function xyz2lab(t) {\r\n    return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;\r\n  }\r\n  \r\n  function lab2xyz(t) {\r\n    return t > t1 ? t * t * t : t2 * (t - t0);\r\n  }\r\n  \r\n  function lrgb2rgb(x) {\r\n    return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);\r\n  }\r\n  \r\n  function rgb2lrgb(x) {\r\n    return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\r\n  }\r\n  \r\n  function hclConvert(o) {\r\n    if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);\r\n    if (!(o instanceof Lab)) o = labConvert(o);\r\n    if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);\r\n    var h = Math.atan2(o.b, o.a) * rad2deg;\r\n    return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);\r\n  }\r\n  \r\n  function lch(l, c, h, opacity) {\r\n    return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\r\n  }\r\n  \r\n  function hcl(h, c, l, opacity) {\r\n    return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\r\n  }\r\n  \r\n  function Hcl(h, c, l, opacity) {\r\n    this.h = +h;\r\n    this.c = +c;\r\n    this.l = +l;\r\n    this.opacity = +opacity;\r\n  }\r\n  \r\n  function hcl2lab(o) {\r\n    if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);\r\n    var h = o.h * deg2rad;\r\n    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);\r\n  }\r\n  \r\n  define(Hcl, hcl, extend(Color, {\r\n    brighter: function(k) {\r\n      return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);\r\n    },\r\n    darker: function(k) {\r\n      return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);\r\n    },\r\n    rgb: function() {\r\n      return hcl2lab(this).rgb();\r\n    }\r\n  }));\r\n  \r\n  var A = -0.14861,\r\n      B = +1.78277,\r\n      C = -0.29227,\r\n      D = -0.90649,\r\n      E = +1.97294,\r\n      ED = E * D,\r\n      EB = E * B,\r\n      BC_DA = B * C - D * A;\r\n  \r\n  function cubehelixConvert(o) {\r\n    if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);\r\n    if (!(o instanceof Rgb)) o = rgbConvert(o);\r\n    var r = o.r / 255,\r\n        g = o.g / 255,\r\n        b = o.b / 255,\r\n        l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),\r\n        bl = b - l,\r\n        k = (E * (g - l) - C * bl) / D,\r\n        s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1\r\n        h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;\r\n    return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);\r\n  }\r\n  \r\n  function cubehelix(h, s, l, opacity) {\r\n    return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);\r\n  }\r\n  \r\n  function Cubehelix(h, s, l, opacity) {\r\n    this.h = +h;\r\n    this.s = +s;\r\n    this.l = +l;\r\n    this.opacity = +opacity;\r\n  }\r\n  \r\n  define(Cubehelix, cubehelix, extend(Color, {\r\n    brighter: function(k) {\r\n      k = k == null ? brighter : Math.pow(brighter, k);\r\n      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\r\n    },\r\n    darker: function(k) {\r\n      k = k == null ? darker : Math.pow(darker, k);\r\n      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\r\n    },\r\n    rgb: function() {\r\n      var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,\r\n          l = +this.l,\r\n          a = isNaN(this.s) ? 0 : this.s * l * (1 - l),\r\n          cosh = Math.cos(h),\r\n          sinh = Math.sin(h);\r\n      return new Rgb(\r\n        255 * (l + a * (A * cosh + B * sinh)),\r\n        255 * (l + a * (C * cosh + D * sinh)),\r\n        255 * (l + a * (E * cosh)),\r\n        this.opacity\r\n      );\r\n    }\r\n  }));\r\n  \r\n  function basis(t1, v0, v1, v2, v3) {\r\n    var t2 = t1 * t1, t3 = t2 * t1;\r\n    return ((1 - 3 * t1 + 3 * t2 - t3) * v0\r\n        + (4 - 6 * t2 + 3 * t3) * v1\r\n        + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\r\n        + t3 * v3) / 6;\r\n  }\r\n  \r\n  function basis$1(values) {\r\n    var n = values.length - 1;\r\n    return function(t) {\r\n      var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\r\n          v1 = values[i],\r\n          v2 = values[i + 1],\r\n          v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\r\n          v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\r\n      return basis((t - i / n) * n, v0, v1, v2, v3);\r\n    };\r\n  }\r\n  \r\n  function basisClosed(values) {\r\n    var n = values.length;\r\n    return function(t) {\r\n      var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\r\n          v0 = values[(i + n - 1) % n],\r\n          v1 = values[i % n],\r\n          v2 = values[(i + 1) % n],\r\n          v3 = values[(i + 2) % n];\r\n      return basis((t - i / n) * n, v0, v1, v2, v3);\r\n    };\r\n  }\r\n  \r\n  function constant$3(x) {\r\n    return function() {\r\n      return x;\r\n    };\r\n  }\r\n  \r\n  function linear(a, d) {\r\n    return function(t) {\r\n      return a + t * d;\r\n    };\r\n  }\r\n  \r\n  function exponential(a, b, y) {\r\n    return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\r\n      return Math.pow(a + t * b, y);\r\n    };\r\n  }\r\n  \r\n  function hue(a, b) {\r\n    var d = b - a;\r\n    return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$3(isNaN(a) ? b : a);\r\n  }\r\n  \r\n  function gamma(y) {\r\n    return (y = +y) === 1 ? nogamma : function(a, b) {\r\n      return b - a ? exponential(a, b, y) : constant$3(isNaN(a) ? b : a);\r\n    };\r\n  }\r\n  \r\n  function nogamma(a, b) {\r\n    var d = b - a;\r\n    return d ? linear(a, d) : constant$3(isNaN(a) ? b : a);\r\n  }\r\n  \r\n  var interpolateRgb = (function rgbGamma(y) {\r\n    var color = gamma(y);\r\n  \r\n    function rgb$1(start, end) {\r\n      var r = color((start = rgb(start)).r, (end = rgb(end)).r),\r\n          g = color(start.g, end.g),\r\n          b = color(start.b, end.b),\r\n          opacity = nogamma(start.opacity, end.opacity);\r\n      return function(t) {\r\n        start.r = r(t);\r\n        start.g = g(t);\r\n        start.b = b(t);\r\n        start.opacity = opacity(t);\r\n        return start + \"\";\r\n      };\r\n    }\r\n  \r\n    rgb$1.gamma = rgbGamma;\r\n  \r\n    return rgb$1;\r\n  })(1);\r\n  \r\n  function rgbSpline(spline) {\r\n    return function(colors) {\r\n      var n = colors.length,\r\n          r = new Array(n),\r\n          g = new Array(n),\r\n          b = new Array(n),\r\n          i, color;\r\n      for (i = 0; i < n; ++i) {\r\n        color = rgb(colors[i]);\r\n        r[i] = color.r || 0;\r\n        g[i] = color.g || 0;\r\n        b[i] = color.b || 0;\r\n      }\r\n      r = spline(r);\r\n      g = spline(g);\r\n      b = spline(b);\r\n      color.opacity = 1;\r\n      return function(t) {\r\n        color.r = r(t);\r\n        color.g = g(t);\r\n        color.b = b(t);\r\n        return color + \"\";\r\n      };\r\n    };\r\n  }\r\n  \r\n  var rgbBasis = rgbSpline(basis$1);\r\n  var rgbBasisClosed = rgbSpline(basisClosed);\r\n  \r\n  function numberArray(a, b) {\r\n    if (!b) b = [];\r\n    var n = a ? Math.min(b.length, a.length) : 0,\r\n        c = b.slice(),\r\n        i;\r\n    return function(t) {\r\n      for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;\r\n      return c;\r\n    };\r\n  }\r\n  \r\n  function isNumberArray(x) {\r\n    return ArrayBuffer.isView(x) && !(x instanceof DataView);\r\n  }\r\n  \r\n  function array$1(a, b) {\r\n    return (isNumberArray(b) ? numberArray : genericArray)(a, b);\r\n  }\r\n  \r\n  function genericArray(a, b) {\r\n    var nb = b ? b.length : 0,\r\n        na = a ? Math.min(nb, a.length) : 0,\r\n        x = new Array(na),\r\n        c = new Array(nb),\r\n        i;\r\n  \r\n    for (i = 0; i < na; ++i) x[i] = interpolateValue(a[i], b[i]);\r\n    for (; i < nb; ++i) c[i] = b[i];\r\n  \r\n    return function(t) {\r\n      for (i = 0; i < na; ++i) c[i] = x[i](t);\r\n      return c;\r\n    };\r\n  }\r\n  \r\n  function date(a, b) {\r\n    var d = new Date;\r\n    return a = +a, b = +b, function(t) {\r\n      return d.setTime(a * (1 - t) + b * t), d;\r\n    };\r\n  }\r\n  \r\n  function interpolateNumber(a, b) {\r\n    return a = +a, b = +b, function(t) {\r\n      return a * (1 - t) + b * t;\r\n    };\r\n  }\r\n  \r\n  function object(a, b) {\r\n    var i = {},\r\n        c = {},\r\n        k;\r\n  \r\n    if (a === null || typeof a !== \"object\") a = {};\r\n    if (b === null || typeof b !== \"object\") b = {};\r\n  \r\n    for (k in b) {\r\n      if (k in a) {\r\n        i[k] = interpolateValue(a[k], b[k]);\r\n      } else {\r\n        c[k] = b[k];\r\n      }\r\n    }\r\n  \r\n    return function(t) {\r\n      for (k in i) c[k] = i[k](t);\r\n      return c;\r\n    };\r\n  }\r\n  \r\n  var reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\r\n      reB = new RegExp(reA.source, \"g\");\r\n  \r\n  function zero(b) {\r\n    return function() {\r\n      return b;\r\n    };\r\n  }\r\n  \r\n  function one(b) {\r\n    return function(t) {\r\n      return b(t) + \"\";\r\n    };\r\n  }\r\n  \r\n  function interpolateString(a, b) {\r\n    var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\r\n        am, // current match in a\r\n        bm, // current match in b\r\n        bs, // string preceding current number in b, if any\r\n        i = -1, // index in s\r\n        s = [], // string constants and placeholders\r\n        q = []; // number interpolators\r\n  \r\n    // Coerce inputs to strings.\r\n    a = a + \"\", b = b + \"\";\r\n  \r\n    // Interpolate pairs of numbers in a & b.\r\n    while ((am = reA.exec(a))\r\n        && (bm = reB.exec(b))) {\r\n      if ((bs = bm.index) > bi) { // a string precedes the next number in b\r\n        bs = b.slice(bi, bs);\r\n        if (s[i]) s[i] += bs; // coalesce with previous string\r\n        else s[++i] = bs;\r\n      }\r\n      if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\r\n        if (s[i]) s[i] += bm; // coalesce with previous string\r\n        else s[++i] = bm;\r\n      } else { // interpolate non-matching numbers\r\n        s[++i] = null;\r\n        q.push({i: i, x: interpolateNumber(am, bm)});\r\n      }\r\n      bi = reB.lastIndex;\r\n    }\r\n  \r\n    // Add remains of b.\r\n    if (bi < b.length) {\r\n      bs = b.slice(bi);\r\n      if (s[i]) s[i] += bs; // coalesce with previous string\r\n      else s[++i] = bs;\r\n    }\r\n  \r\n    // Special optimization for only a single match.\r\n    // Otherwise, interpolate each of the numbers and rejoin the string.\r\n    return s.length < 2 ? (q[0]\r\n        ? one(q[0].x)\r\n        : zero(b))\r\n        : (b = q.length, function(t) {\r\n            for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\r\n            return s.join(\"\");\r\n          });\r\n  }\r\n  \r\n  function interpolateValue(a, b) {\r\n    var t = typeof b, c;\r\n    return b == null || t === \"boolean\" ? constant$3(b)\r\n        : (t === \"number\" ? interpolateNumber\r\n        : t === \"string\" ? ((c = color(b)) ? (b = c, interpolateRgb) : interpolateString)\r\n        : b instanceof color ? interpolateRgb\r\n        : b instanceof Date ? date\r\n        : isNumberArray(b) ? numberArray\r\n        : Array.isArray(b) ? genericArray\r\n        : typeof b.valueOf !== \"function\" && typeof b.toString !== \"function\" || isNaN(b) ? object\r\n        : interpolateNumber)(a, b);\r\n  }\r\n  \r\n  function discrete(range) {\r\n    var n = range.length;\r\n    return function(t) {\r\n      return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\r\n    };\r\n  }\r\n  \r\n  function hue$1(a, b) {\r\n    var i = hue(+a, +b);\r\n    return function(t) {\r\n      var x = i(t);\r\n      return x - 360 * Math.floor(x / 360);\r\n    };\r\n  }\r\n  \r\n  function interpolateRound(a, b) {\r\n    return a = +a, b = +b, function(t) {\r\n      return Math.round(a * (1 - t) + b * t);\r\n    };\r\n  }\r\n  \r\n  var degrees = 180 / Math.PI;\r\n  \r\n  var identity$2 = {\r\n    translateX: 0,\r\n    translateY: 0,\r\n    rotate: 0,\r\n    skewX: 0,\r\n    scaleX: 1,\r\n    scaleY: 1\r\n  };\r\n  \r\n  function decompose(a, b, c, d, e, f) {\r\n    var scaleX, scaleY, skewX;\r\n    if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\r\n    if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\r\n    if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\r\n    if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\r\n    return {\r\n      translateX: e,\r\n      translateY: f,\r\n      rotate: Math.atan2(b, a) * degrees,\r\n      skewX: Math.atan(skewX) * degrees,\r\n      scaleX: scaleX,\r\n      scaleY: scaleY\r\n    };\r\n  }\r\n  \r\n  var cssNode,\r\n      cssRoot,\r\n      cssView,\r\n      svgNode;\r\n  \r\n  function parseCss(value) {\r\n    if (value === \"none\") return identity$2;\r\n    if (!cssNode) cssNode = document.createElement(\"DIV\"), cssRoot = document.documentElement, cssView = document.defaultView;\r\n    cssNode.style.transform = value;\r\n    value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue(\"transform\");\r\n    cssRoot.removeChild(cssNode);\r\n    value = value.slice(7, -1).split(\",\");\r\n    return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);\r\n  }\r\n  \r\n  function parseSvg(value) {\r\n    if (value == null) return identity$2;\r\n    if (!svgNode) svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n    svgNode.setAttribute(\"transform\", value);\r\n    if (!(value = svgNode.transform.baseVal.consolidate())) return identity$2;\r\n    value = value.matrix;\r\n    return decompose(value.a, value.b, value.c, value.d, value.e, value.f);\r\n  }\r\n  \r\n  function interpolateTransform(parse, pxComma, pxParen, degParen) {\r\n  \r\n    function pop(s) {\r\n      return s.length ? s.pop() + \" \" : \"\";\r\n    }\r\n  \r\n    function translate(xa, ya, xb, yb, s, q) {\r\n      if (xa !== xb || ya !== yb) {\r\n        var i = s.push(\"translate(\", null, pxComma, null, pxParen);\r\n        q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});\r\n      } else if (xb || yb) {\r\n        s.push(\"translate(\" + xb + pxComma + yb + pxParen);\r\n      }\r\n    }\r\n  \r\n    function rotate(a, b, s, q) {\r\n      if (a !== b) {\r\n        if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path\r\n        q.push({i: s.push(pop(s) + \"rotate(\", null, degParen) - 2, x: interpolateNumber(a, b)});\r\n      } else if (b) {\r\n        s.push(pop(s) + \"rotate(\" + b + degParen);\r\n      }\r\n    }\r\n  \r\n    function skewX(a, b, s, q) {\r\n      if (a !== b) {\r\n        q.push({i: s.push(pop(s) + \"skewX(\", null, degParen) - 2, x: interpolateNumber(a, b)});\r\n      } else if (b) {\r\n        s.push(pop(s) + \"skewX(\" + b + degParen);\r\n      }\r\n    }\r\n  \r\n    function scale(xa, ya, xb, yb, s, q) {\r\n      if (xa !== xb || ya !== yb) {\r\n        var i = s.push(pop(s) + \"scale(\", null, \",\", null, \")\");\r\n        q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});\r\n      } else if (xb !== 1 || yb !== 1) {\r\n        s.push(pop(s) + \"scale(\" + xb + \",\" + yb + \")\");\r\n      }\r\n    }\r\n  \r\n    return function(a, b) {\r\n      var s = [], // string constants and placeholders\r\n          q = []; // number interpolators\r\n      a = parse(a), b = parse(b);\r\n      translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\r\n      rotate(a.rotate, b.rotate, s, q);\r\n      skewX(a.skewX, b.skewX, s, q);\r\n      scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\r\n      a = b = null; // gc\r\n      return function(t) {\r\n        var i = -1, n = q.length, o;\r\n        while (++i < n) s[(o = q[i]).i] = o.x(t);\r\n        return s.join(\"\");\r\n      };\r\n    };\r\n  }\r\n  \r\n  var interpolateTransformCss = interpolateTransform(parseCss, \"px, \", \"px)\", \"deg)\");\r\n  var interpolateTransformSvg = interpolateTransform(parseSvg, \", \", \")\", \")\");\r\n  \r\n  var rho = Math.SQRT2,\r\n      rho2 = 2,\r\n      rho4 = 4,\r\n      epsilon2 = 1e-12;\r\n  \r\n  function cosh(x) {\r\n    return ((x = Math.exp(x)) + 1 / x) / 2;\r\n  }\r\n  \r\n  function sinh(x) {\r\n    return ((x = Math.exp(x)) - 1 / x) / 2;\r\n  }\r\n  \r\n  function tanh(x) {\r\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\r\n  }\r\n  \r\n  // p0 = [ux0, uy0, w0]\r\n  // p1 = [ux1, uy1, w1]\r\n  function interpolateZoom(p0, p1) {\r\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],\r\n        ux1 = p1[0], uy1 = p1[1], w1 = p1[2],\r\n        dx = ux1 - ux0,\r\n        dy = uy1 - uy0,\r\n        d2 = dx * dx + dy * dy,\r\n        i,\r\n        S;\r\n  \r\n    // Special case for u0 ≅ u1.\r\n    if (d2 < epsilon2) {\r\n      S = Math.log(w1 / w0) / rho;\r\n      i = function(t) {\r\n        return [\r\n          ux0 + t * dx,\r\n          uy0 + t * dy,\r\n          w0 * Math.exp(rho * t * S)\r\n        ];\r\n      };\r\n    }\r\n  \r\n    // General case.\r\n    else {\r\n      var d1 = Math.sqrt(d2),\r\n          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),\r\n          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),\r\n          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),\r\n          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\r\n      S = (r1 - r0) / rho;\r\n      i = function(t) {\r\n        var s = t * S,\r\n            coshr0 = cosh(r0),\r\n            u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));\r\n        return [\r\n          ux0 + u * dx,\r\n          uy0 + u * dy,\r\n          w0 * coshr0 / cosh(rho * s + r0)\r\n        ];\r\n      };\r\n    }\r\n  \r\n    i.duration = S * 1000;\r\n  \r\n    return i;\r\n  }\r\n  \r\n  function hsl$1(hue) {\r\n    return function(start, end) {\r\n      var h = hue((start = hsl(start)).h, (end = hsl(end)).h),\r\n          s = nogamma(start.s, end.s),\r\n          l = nogamma(start.l, end.l),\r\n          opacity = nogamma(start.opacity, end.opacity);\r\n      return function(t) {\r\n        start.h = h(t);\r\n        start.s = s(t);\r\n        start.l = l(t);\r\n        start.opacity = opacity(t);\r\n        return start + \"\";\r\n      };\r\n    }\r\n  }\r\n  \r\n  var hsl$2 = hsl$1(hue);\r\n  var hslLong = hsl$1(nogamma);\r\n  \r\n  function lab$1(start, end) {\r\n    var l = nogamma((start = lab(start)).l, (end = lab(end)).l),\r\n        a = nogamma(start.a, end.a),\r\n        b = nogamma(start.b, end.b),\r\n        opacity = nogamma(start.opacity, end.opacity);\r\n    return function(t) {\r\n      start.l = l(t);\r\n      start.a = a(t);\r\n      start.b = b(t);\r\n      start.opacity = opacity(t);\r\n      return start + \"\";\r\n    };\r\n  }\r\n  \r\n  function hcl$1(hue) {\r\n    return function(start, end) {\r\n      var h = hue((start = hcl(start)).h, (end = hcl(end)).h),\r\n          c = nogamma(start.c, end.c),\r\n          l = nogamma(start.l, end.l),\r\n          opacity = nogamma(start.opacity, end.opacity);\r\n      return function(t) {\r\n        start.h = h(t);\r\n        start.c = c(t);\r\n        start.l = l(t);\r\n        start.opacity = opacity(t);\r\n        return start + \"\";\r\n      };\r\n    }\r\n  }\r\n  \r\n  var hcl$2 = hcl$1(hue);\r\n  var hclLong = hcl$1(nogamma);\r\n  \r\n  function cubehelix$1(hue) {\r\n    return (function cubehelixGamma(y) {\r\n      y = +y;\r\n  \r\n      function cubehelix$1(start, end) {\r\n        var h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h),\r\n            s = nogamma(start.s, end.s),\r\n            l = nogamma(start.l, end.l),\r\n            opacity = nogamma(start.opacity, end.opacity);\r\n        return function(t) {\r\n          start.h = h(t);\r\n          start.s = s(t);\r\n          start.l = l(Math.pow(t, y));\r\n          start.opacity = opacity(t);\r\n          return start + \"\";\r\n        };\r\n      }\r\n  \r\n      cubehelix$1.gamma = cubehelixGamma;\r\n  \r\n      return cubehelix$1;\r\n    })(1);\r\n  }\r\n  \r\n  var cubehelix$2 = cubehelix$1(hue);\r\n  var cubehelixLong = cubehelix$1(nogamma);\r\n  \r\n  function piecewise(interpolate, values) {\r\n    var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);\r\n    while (i < n) I[i] = interpolate(v, v = values[++i]);\r\n    return function(t) {\r\n      var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));\r\n      return I[i](t - i);\r\n    };\r\n  }\r\n  \r\n  function quantize(interpolator, n) {\r\n    var samples = new Array(n);\r\n    for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));\r\n    return samples;\r\n  }\r\n  \r\n  var frame = 0, // is an animation frame pending?\r\n      timeout = 0, // is a timeout pending?\r\n      interval = 0, // are any timers active?\r\n      pokeDelay = 1000, // how frequently we check for clock skew\r\n      taskHead,\r\n      taskTail,\r\n      clockLast = 0,\r\n      clockNow = 0,\r\n      clockSkew = 0,\r\n      clock = typeof performance === \"object\" && performance.now ? performance : Date,\r\n      setFrame = typeof window === \"object\" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };\r\n  \r\n  function now() {\r\n    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\r\n  }\r\n  \r\n  function clearNow() {\r\n    clockNow = 0;\r\n  }\r\n  \r\n  function Timer() {\r\n    this._call =\r\n    this._time =\r\n    this._next = null;\r\n  }\r\n  \r\n  Timer.prototype = timer.prototype = {\r\n    constructor: Timer,\r\n    restart: function(callback, delay, time) {\r\n      if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\r\n      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\r\n      if (!this._next && taskTail !== this) {\r\n        if (taskTail) taskTail._next = this;\r\n        else taskHead = this;\r\n        taskTail = this;\r\n      }\r\n      this._call = callback;\r\n      this._time = time;\r\n      sleep();\r\n    },\r\n    stop: function() {\r\n      if (this._call) {\r\n        this._call = null;\r\n        this._time = Infinity;\r\n        sleep();\r\n      }\r\n    }\r\n  };\r\n  \r\n  function timer(callback, delay, time) {\r\n    var t = new Timer;\r\n    t.restart(callback, delay, time);\r\n    return t;\r\n  }\r\n  \r\n  function timerFlush() {\r\n    now(); // Get the current time, if not already set.\r\n    ++frame; // Pretend we’ve set an alarm, if we haven’t already.\r\n    var t = taskHead, e;\r\n    while (t) {\r\n      if ((e = clockNow - t._time) >= 0) t._call.call(null, e);\r\n      t = t._next;\r\n    }\r\n    --frame;\r\n  }\r\n  \r\n  function wake() {\r\n    clockNow = (clockLast = clock.now()) + clockSkew;\r\n    frame = timeout = 0;\r\n    try {\r\n      timerFlush();\r\n    } finally {\r\n      frame = 0;\r\n      nap();\r\n      clockNow = 0;\r\n    }\r\n  }\r\n  \r\n  function poke() {\r\n    var now = clock.now(), delay = now - clockLast;\r\n    if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\r\n  }\r\n  \r\n  function nap() {\r\n    var t0, t1 = taskHead, t2, time = Infinity;\r\n    while (t1) {\r\n      if (t1._call) {\r\n        if (time > t1._time) time = t1._time;\r\n        t0 = t1, t1 = t1._next;\r\n      } else {\r\n        t2 = t1._next, t1._next = null;\r\n        t1 = t0 ? t0._next = t2 : taskHead = t2;\r\n      }\r\n    }\r\n    taskTail = t0;\r\n    sleep(time);\r\n  }\r\n  \r\n  function sleep(time) {\r\n    if (frame) return; // Soonest alarm already set, or will be.\r\n    if (timeout) timeout = clearTimeout(timeout);\r\n    var delay = time - clockNow; // Strictly less than if we recomputed clockNow.\r\n    if (delay > 24) {\r\n      if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);\r\n      if (interval) interval = clearInterval(interval);\r\n    } else {\r\n      if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);\r\n      frame = 1, setFrame(wake);\r\n    }\r\n  }\r\n  \r\n  function timeout$1(callback, delay, time) {\r\n    var t = new Timer;\r\n    delay = delay == null ? 0 : +delay;\r\n    t.restart(function(elapsed) {\r\n      t.stop();\r\n      callback(elapsed + delay);\r\n    }, delay, time);\r\n    return t;\r\n  }\r\n  \r\n  function interval$1(callback, delay, time) {\r\n    var t = new Timer, total = delay;\r\n    if (delay == null) return t.restart(callback, delay, time), t;\r\n    delay = +delay, time = time == null ? now() : +time;\r\n    t.restart(function tick(elapsed) {\r\n      elapsed += total;\r\n      t.restart(tick, total += delay, time);\r\n      callback(elapsed);\r\n    }, delay, time);\r\n    return t;\r\n  }\r\n  \r\n  var emptyOn = dispatch(\"start\", \"end\", \"cancel\", \"interrupt\");\r\n  var emptyTween = [];\r\n  \r\n  var CREATED = 0;\r\n  var SCHEDULED = 1;\r\n  var STARTING = 2;\r\n  var STARTED = 3;\r\n  var RUNNING = 4;\r\n  var ENDING = 5;\r\n  var ENDED = 6;\r\n  \r\n  function schedule(node, name, id, index, group, timing) {\r\n    var schedules = node.__transition;\r\n    if (!schedules) node.__transition = {};\r\n    else if (id in schedules) return;\r\n    create$1(node, id, {\r\n      name: name,\r\n      index: index, // For context during callback.\r\n      group: group, // For context during callback.\r\n      on: emptyOn,\r\n      tween: emptyTween,\r\n      time: timing.time,\r\n      delay: timing.delay,\r\n      duration: timing.duration,\r\n      ease: timing.ease,\r\n      timer: null,\r\n      state: CREATED\r\n    });\r\n  }\r\n  \r\n  function init(node, id) {\r\n    var schedule = get$1(node, id);\r\n    if (schedule.state > CREATED) throw new Error(\"too late; already scheduled\");\r\n    return schedule;\r\n  }\r\n  \r\n  function set$1(node, id) {\r\n    var schedule = get$1(node, id);\r\n    if (schedule.state > STARTED) throw new Error(\"too late; already running\");\r\n    return schedule;\r\n  }\r\n  \r\n  function get$1(node, id) {\r\n    var schedule = node.__transition;\r\n    if (!schedule || !(schedule = schedule[id])) throw new Error(\"transition not found\");\r\n    return schedule;\r\n  }\r\n  \r\n  function create$1(node, id, self) {\r\n    var schedules = node.__transition,\r\n        tween;\r\n  \r\n    // Initialize the self timer when the transition is created.\r\n    // Note the actual delay is not known until the first callback!\r\n    schedules[id] = self;\r\n    self.timer = timer(schedule, 0, self.time);\r\n  \r\n    function schedule(elapsed) {\r\n      self.state = SCHEDULED;\r\n      self.timer.restart(start, self.delay, self.time);\r\n  \r\n      // If the elapsed delay is less than our first sleep, start immediately.\r\n      if (self.delay <= elapsed) start(elapsed - self.delay);\r\n    }\r\n  \r\n    function start(elapsed) {\r\n      var i, j, n, o;\r\n  \r\n      // If the state is not SCHEDULED, then we previously errored on start.\r\n      if (self.state !== SCHEDULED) return stop();\r\n  \r\n      for (i in schedules) {\r\n        o = schedules[i];\r\n        if (o.name !== self.name) continue;\r\n  \r\n        // While this element already has a starting transition during this frame,\r\n        // defer starting an interrupting transition until that transition has a\r\n        // chance to tick (and possibly end); see d3/d3-transition#54!\r\n        if (o.state === STARTED) return timeout$1(start);\r\n  \r\n        // Interrupt the active transition, if any.\r\n        if (o.state === RUNNING) {\r\n          o.state = ENDED;\r\n          o.timer.stop();\r\n          o.on.call(\"interrupt\", node, node.__data__, o.index, o.group);\r\n          delete schedules[i];\r\n        }\r\n  \r\n        // Cancel any pre-empted transitions.\r\n        else if (+i < id) {\r\n          o.state = ENDED;\r\n          o.timer.stop();\r\n          o.on.call(\"cancel\", node, node.__data__, o.index, o.group);\r\n          delete schedules[i];\r\n        }\r\n      }\r\n  \r\n      // Defer the first tick to end of the current frame; see d3/d3#1576.\r\n      // Note the transition may be canceled after start and before the first tick!\r\n      // Note this must be scheduled before the start event; see d3/d3-transition#16!\r\n      // Assuming this is successful, subsequent callbacks go straight to tick.\r\n      timeout$1(function() {\r\n        if (self.state === STARTED) {\r\n          self.state = RUNNING;\r\n          self.timer.restart(tick, self.delay, self.time);\r\n          tick(elapsed);\r\n        }\r\n      });\r\n  \r\n      // Dispatch the start event.\r\n      // Note this must be done before the tween are initialized.\r\n      self.state = STARTING;\r\n      self.on.call(\"start\", node, node.__data__, self.index, self.group);\r\n      if (self.state !== STARTING) return; // interrupted\r\n      self.state = STARTED;\r\n  \r\n      // Initialize the tween, deleting null tween.\r\n      tween = new Array(n = self.tween.length);\r\n      for (i = 0, j = -1; i < n; ++i) {\r\n        if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {\r\n          tween[++j] = o;\r\n        }\r\n      }\r\n      tween.length = j + 1;\r\n    }\r\n  \r\n    function tick(elapsed) {\r\n      var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),\r\n          i = -1,\r\n          n = tween.length;\r\n  \r\n      while (++i < n) {\r\n        tween[i].call(node, t);\r\n      }\r\n  \r\n      // Dispatch the end event.\r\n      if (self.state === ENDING) {\r\n        self.on.call(\"end\", node, node.__data__, self.index, self.group);\r\n        stop();\r\n      }\r\n    }\r\n  \r\n    function stop() {\r\n      self.state = ENDED;\r\n      self.timer.stop();\r\n      delete schedules[id];\r\n      for (var i in schedules) return; // eslint-disable-line no-unused-vars\r\n      delete node.__transition;\r\n    }\r\n  }\r\n  \r\n  function interrupt(node, name) {\r\n    var schedules = node.__transition,\r\n        schedule,\r\n        active,\r\n        empty = true,\r\n        i;\r\n  \r\n    if (!schedules) return;\r\n  \r\n    name = name == null ? null : name + \"\";\r\n  \r\n    for (i in schedules) {\r\n      if ((schedule = schedules[i]).name !== name) { empty = false; continue; }\r\n      active = schedule.state > STARTING && schedule.state < ENDING;\r\n      schedule.state = ENDED;\r\n      schedule.timer.stop();\r\n      schedule.on.call(active ? \"interrupt\" : \"cancel\", node, node.__data__, schedule.index, schedule.group);\r\n      delete schedules[i];\r\n    }\r\n  \r\n    if (empty) delete node.__transition;\r\n  }\r\n  \r\n  function selection_interrupt(name) {\r\n    return this.each(function() {\r\n      interrupt(this, name);\r\n    });\r\n  }\r\n  \r\n  function tweenRemove(id, name) {\r\n    var tween0, tween1;\r\n    return function() {\r\n      var schedule = set$1(this, id),\r\n          tween = schedule.tween;\r\n  \r\n      // If this node shared tween with the previous node,\r\n      // just assign the updated shared tween and we’re done!\r\n      // Otherwise, copy-on-write.\r\n      if (tween !== tween0) {\r\n        tween1 = tween0 = tween;\r\n        for (var i = 0, n = tween1.length; i < n; ++i) {\r\n          if (tween1[i].name === name) {\r\n            tween1 = tween1.slice();\r\n            tween1.splice(i, 1);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n  \r\n      schedule.tween = tween1;\r\n    };\r\n  }\r\n  \r\n  function tweenFunction(id, name, value) {\r\n    var tween0, tween1;\r\n    if (typeof value !== \"function\") throw new Error;\r\n    return function() {\r\n      var schedule = set$1(this, id),\r\n          tween = schedule.tween;\r\n  \r\n      // If this node shared tween with the previous node,\r\n      // just assign the updated shared tween and we’re done!\r\n      // Otherwise, copy-on-write.\r\n      if (tween !== tween0) {\r\n        tween1 = (tween0 = tween).slice();\r\n        for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {\r\n          if (tween1[i].name === name) {\r\n            tween1[i] = t;\r\n            break;\r\n          }\r\n        }\r\n        if (i === n) tween1.push(t);\r\n      }\r\n  \r\n      schedule.tween = tween1;\r\n    };\r\n  }\r\n  \r\n  function transition_tween(name, value) {\r\n    var id = this._id;\r\n  \r\n    name += \"\";\r\n  \r\n    if (arguments.length < 2) {\r\n      var tween = get$1(this.node(), id).tween;\r\n      for (var i = 0, n = tween.length, t; i < n; ++i) {\r\n        if ((t = tween[i]).name === name) {\r\n          return t.value;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  \r\n    return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));\r\n  }\r\n  \r\n  function tweenValue(transition, name, value) {\r\n    var id = transition._id;\r\n  \r\n    transition.each(function() {\r\n      var schedule = set$1(this, id);\r\n      (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);\r\n    });\r\n  \r\n    return function(node) {\r\n      return get$1(node, id).value[name];\r\n    };\r\n  }\r\n  \r\n  function interpolate(a, b) {\r\n    var c;\r\n    return (typeof b === \"number\" ? interpolateNumber\r\n        : b instanceof color ? interpolateRgb\r\n        : (c = color(b)) ? (b = c, interpolateRgb)\r\n        : interpolateString)(a, b);\r\n  }\r\n  \r\n  function attrRemove$1(name) {\r\n    return function() {\r\n      this.removeAttribute(name);\r\n    };\r\n  }\r\n  \r\n  function attrRemoveNS$1(fullname) {\r\n    return function() {\r\n      this.removeAttributeNS(fullname.space, fullname.local);\r\n    };\r\n  }\r\n  \r\n  function attrConstant$1(name, interpolate, value1) {\r\n    var string00,\r\n        string1 = value1 + \"\",\r\n        interpolate0;\r\n    return function() {\r\n      var string0 = this.getAttribute(name);\r\n      return string0 === string1 ? null\r\n          : string0 === string00 ? interpolate0\r\n          : interpolate0 = interpolate(string00 = string0, value1);\r\n    };\r\n  }\r\n  \r\n  function attrConstantNS$1(fullname, interpolate, value1) {\r\n    var string00,\r\n        string1 = value1 + \"\",\r\n        interpolate0;\r\n    return function() {\r\n      var string0 = this.getAttributeNS(fullname.space, fullname.local);\r\n      return string0 === string1 ? null\r\n          : string0 === string00 ? interpolate0\r\n          : interpolate0 = interpolate(string00 = string0, value1);\r\n    };\r\n  }\r\n  \r\n  function attrFunction$1(name, interpolate, value) {\r\n    var string00,\r\n        string10,\r\n        interpolate0;\r\n    return function() {\r\n      var string0, value1 = value(this), string1;\r\n      if (value1 == null) return void this.removeAttribute(name);\r\n      string0 = this.getAttribute(name);\r\n      string1 = value1 + \"\";\r\n      return string0 === string1 ? null\r\n          : string0 === string00 && string1 === string10 ? interpolate0\r\n          : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\r\n    };\r\n  }\r\n  \r\n  function attrFunctionNS$1(fullname, interpolate, value) {\r\n    var string00,\r\n        string10,\r\n        interpolate0;\r\n    return function() {\r\n      var string0, value1 = value(this), string1;\r\n      if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);\r\n      string0 = this.getAttributeNS(fullname.space, fullname.local);\r\n      string1 = value1 + \"\";\r\n      return string0 === string1 ? null\r\n          : string0 === string00 && string1 === string10 ? interpolate0\r\n          : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\r\n    };\r\n  }\r\n  \r\n  function transition_attr(name, value) {\r\n    var fullname = namespace(name), i = fullname === \"transform\" ? interpolateTransformSvg : interpolate;\r\n    return this.attrTween(name, typeof value === \"function\"\r\n        ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, \"attr.\" + name, value))\r\n        : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname)\r\n        : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value));\r\n  }\r\n  \r\n  function attrInterpolate(name, i) {\r\n    return function(t) {\r\n      this.setAttribute(name, i.call(this, t));\r\n    };\r\n  }\r\n  \r\n  function attrInterpolateNS(fullname, i) {\r\n    return function(t) {\r\n      this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));\r\n    };\r\n  }\r\n  \r\n  function attrTweenNS(fullname, value) {\r\n    var t0, i0;\r\n    function tween() {\r\n      var i = value.apply(this, arguments);\r\n      if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);\r\n      return t0;\r\n    }\r\n    tween._value = value;\r\n    return tween;\r\n  }\r\n  \r\n  function attrTween(name, value) {\r\n    var t0, i0;\r\n    function tween() {\r\n      var i = value.apply(this, arguments);\r\n      if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);\r\n      return t0;\r\n    }\r\n    tween._value = value;\r\n    return tween;\r\n  }\r\n  \r\n  function transition_attrTween(name, value) {\r\n    var key = \"attr.\" + name;\r\n    if (arguments.length < 2) return (key = this.tween(key)) && key._value;\r\n    if (value == null) return this.tween(key, null);\r\n    if (typeof value !== \"function\") throw new Error;\r\n    var fullname = namespace(name);\r\n    return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));\r\n  }\r\n  \r\n  function delayFunction(id, value) {\r\n    return function() {\r\n      init(this, id).delay = +value.apply(this, arguments);\r\n    };\r\n  }\r\n  \r\n  function delayConstant(id, value) {\r\n    return value = +value, function() {\r\n      init(this, id).delay = value;\r\n    };\r\n  }\r\n  \r\n  function transition_delay(value) {\r\n    var id = this._id;\r\n  \r\n    return arguments.length\r\n        ? this.each((typeof value === \"function\"\r\n            ? delayFunction\r\n            : delayConstant)(id, value))\r\n        : get$1(this.node(), id).delay;\r\n  }\r\n  \r\n  function durationFunction(id, value) {\r\n    return function() {\r\n      set$1(this, id).duration = +value.apply(this, arguments);\r\n    };\r\n  }\r\n  \r\n  function durationConstant(id, value) {\r\n    return value = +value, function() {\r\n      set$1(this, id).duration = value;\r\n    };\r\n  }\r\n  \r\n  function transition_duration(value) {\r\n    var id = this._id;\r\n  \r\n    return arguments.length\r\n        ? this.each((typeof value === \"function\"\r\n            ? durationFunction\r\n            : durationConstant)(id, value))\r\n        : get$1(this.node(), id).duration;\r\n  }\r\n  \r\n  function easeConstant(id, value) {\r\n    if (typeof value !== \"function\") throw new Error;\r\n    return function() {\r\n      set$1(this, id).ease = value;\r\n    };\r\n  }\r\n  \r\n  function transition_ease(value) {\r\n    var id = this._id;\r\n  \r\n    return arguments.length\r\n        ? this.each(easeConstant(id, value))\r\n        : get$1(this.node(), id).ease;\r\n  }\r\n  \r\n  function transition_filter(match) {\r\n    if (typeof match !== \"function\") match = matcher(match);\r\n  \r\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\r\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\r\n        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\r\n          subgroup.push(node);\r\n        }\r\n      }\r\n    }\r\n  \r\n    return new Transition(subgroups, this._parents, this._name, this._id);\r\n  }\r\n  \r\n  function transition_merge(transition) {\r\n    if (transition._id !== this._id) throw new Error;\r\n  \r\n    for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\r\n      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\r\n        if (node = group0[i] || group1[i]) {\r\n          merge[i] = node;\r\n        }\r\n      }\r\n    }\r\n  \r\n    for (; j < m0; ++j) {\r\n      merges[j] = groups0[j];\r\n    }\r\n  \r\n    return new Transition(merges, this._parents, this._name, this._id);\r\n  }\r\n  \r\n  function start(name) {\r\n    return (name + \"\").trim().split(/^|\\s+/).every(function(t) {\r\n      var i = t.indexOf(\".\");\r\n      if (i >= 0) t = t.slice(0, i);\r\n      return !t || t === \"start\";\r\n    });\r\n  }\r\n  \r\n  function onFunction(id, name, listener) {\r\n    var on0, on1, sit = start(name) ? init : set$1;\r\n    return function() {\r\n      var schedule = sit(this, id),\r\n          on = schedule.on;\r\n  \r\n      // If this node shared a dispatch with the previous node,\r\n      // just assign the updated shared dispatch and we’re done!\r\n      // Otherwise, copy-on-write.\r\n      if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);\r\n  \r\n      schedule.on = on1;\r\n    };\r\n  }\r\n  \r\n  function transition_on(name, listener) {\r\n    var id = this._id;\r\n  \r\n    return arguments.length < 2\r\n        ? get$1(this.node(), id).on.on(name)\r\n        : this.each(onFunction(id, name, listener));\r\n  }\r\n  \r\n  function removeFunction(id) {\r\n    return function() {\r\n      var parent = this.parentNode;\r\n      for (var i in this.__transition) if (+i !== id) return;\r\n      if (parent) parent.removeChild(this);\r\n    };\r\n  }\r\n  \r\n  function transition_remove() {\r\n    return this.on(\"end.remove\", removeFunction(this._id));\r\n  }\r\n  \r\n  function transition_select(select) {\r\n    var name = this._name,\r\n        id = this._id;\r\n  \r\n    if (typeof select !== \"function\") select = selector(select);\r\n  \r\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\r\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\r\n        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\r\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\r\n          subgroup[i] = subnode;\r\n          schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));\r\n        }\r\n      }\r\n    }\r\n  \r\n    return new Transition(subgroups, this._parents, name, id);\r\n  }\r\n  \r\n  function transition_selectAll(select) {\r\n    var name = this._name,\r\n        id = this._id;\r\n  \r\n    if (typeof select !== \"function\") select = selectorAll(select);\r\n  \r\n    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\r\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\r\n        if (node = group[i]) {\r\n          for (var children = select.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {\r\n            if (child = children[k]) {\r\n              schedule(child, name, id, k, children, inherit);\r\n            }\r\n          }\r\n          subgroups.push(children);\r\n          parents.push(node);\r\n        }\r\n      }\r\n    }\r\n  \r\n    return new Transition(subgroups, parents, name, id);\r\n  }\r\n  \r\n  var Selection$1 = selection.prototype.constructor;\r\n  \r\n  function transition_selection() {\r\n    return new Selection$1(this._groups, this._parents);\r\n  }\r\n  \r\n  function styleNull(name, interpolate) {\r\n    var string00,\r\n        string10,\r\n        interpolate0;\r\n    return function() {\r\n      var string0 = styleValue(this, name),\r\n          string1 = (this.style.removeProperty(name), styleValue(this, name));\r\n      return string0 === string1 ? null\r\n          : string0 === string00 && string1 === string10 ? interpolate0\r\n          : interpolate0 = interpolate(string00 = string0, string10 = string1);\r\n    };\r\n  }\r\n  \r\n  function styleRemove$1(name) {\r\n    return function() {\r\n      this.style.removeProperty(name);\r\n    };\r\n  }\r\n  \r\n  function styleConstant$1(name, interpolate, value1) {\r\n    var string00,\r\n        string1 = value1 + \"\",\r\n        interpolate0;\r\n    return function() {\r\n      var string0 = styleValue(this, name);\r\n      return string0 === string1 ? null\r\n          : string0 === string00 ? interpolate0\r\n          : interpolate0 = interpolate(string00 = string0, value1);\r\n    };\r\n  }\r\n  \r\n  function styleFunction$1(name, interpolate, value) {\r\n    var string00,\r\n        string10,\r\n        interpolate0;\r\n    return function() {\r\n      var string0 = styleValue(this, name),\r\n          value1 = value(this),\r\n          string1 = value1 + \"\";\r\n      if (value1 == null) string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));\r\n      return string0 === string1 ? null\r\n          : string0 === string00 && string1 === string10 ? interpolate0\r\n          : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\r\n    };\r\n  }\r\n  \r\n  function styleMaybeRemove(id, name) {\r\n    var on0, on1, listener0, key = \"style.\" + name, event = \"end.\" + key, remove;\r\n    return function() {\r\n      var schedule = set$1(this, id),\r\n          on = schedule.on,\r\n          listener = schedule.value[key] == null ? remove || (remove = styleRemove$1(name)) : undefined;\r\n  \r\n      // If this node shared a dispatch with the previous node,\r\n      // just assign the updated shared dispatch and we’re done!\r\n      // Otherwise, copy-on-write.\r\n      if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);\r\n  \r\n      schedule.on = on1;\r\n    };\r\n  }\r\n  \r\n  function transition_style(name, value, priority) {\r\n    var i = (name += \"\") === \"transform\" ? interpolateTransformCss : interpolate;\r\n    return value == null ? this\r\n        .styleTween(name, styleNull(name, i))\r\n        .on(\"end.style.\" + name, styleRemove$1(name))\r\n      : typeof value === \"function\" ? this\r\n        .styleTween(name, styleFunction$1(name, i, tweenValue(this, \"style.\" + name, value)))\r\n        .each(styleMaybeRemove(this._id, name))\r\n      : this\r\n        .styleTween(name, styleConstant$1(name, i, value), priority)\r\n        .on(\"end.style.\" + name, null);\r\n  }\r\n  \r\n  function styleInterpolate(name, i, priority) {\r\n    return function(t) {\r\n      this.style.setProperty(name, i.call(this, t), priority);\r\n    };\r\n  }\r\n  \r\n  function styleTween(name, value, priority) {\r\n    var t, i0;\r\n    function tween() {\r\n      var i = value.apply(this, arguments);\r\n      if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);\r\n      return t;\r\n    }\r\n    tween._value = value;\r\n    return tween;\r\n  }\r\n  \r\n  function transition_styleTween(name, value, priority) {\r\n    var key = \"style.\" + (name += \"\");\r\n    if (arguments.length < 2) return (key = this.tween(key)) && key._value;\r\n    if (value == null) return this.tween(key, null);\r\n    if (typeof value !== \"function\") throw new Error;\r\n    return this.tween(key, styleTween(name, value, priority == null ? \"\" : priority));\r\n  }\r\n  \r\n  function textConstant$1(value) {\r\n    return function() {\r\n      this.textContent = value;\r\n    };\r\n  }\r\n  \r\n  function textFunction$1(value) {\r\n    return function() {\r\n      var value1 = value(this);\r\n      this.textContent = value1 == null ? \"\" : value1;\r\n    };\r\n  }\r\n  \r\n  function transition_text(value) {\r\n    return this.tween(\"text\", typeof value === \"function\"\r\n        ? textFunction$1(tweenValue(this, \"text\", value))\r\n        : textConstant$1(value == null ? \"\" : value + \"\"));\r\n  }\r\n  \r\n  function textInterpolate(i) {\r\n    return function(t) {\r\n      this.textContent = i.call(this, t);\r\n    };\r\n  }\r\n  \r\n  function textTween(value) {\r\n    var t0, i0;\r\n    function tween() {\r\n      var i = value.apply(this, arguments);\r\n      if (i !== i0) t0 = (i0 = i) && textInterpolate(i);\r\n      return t0;\r\n    }\r\n    tween._value = value;\r\n    return tween;\r\n  }\r\n  \r\n  function transition_textTween(value) {\r\n    var key = \"text\";\r\n    if (arguments.length < 1) return (key = this.tween(key)) && key._value;\r\n    if (value == null) return this.tween(key, null);\r\n    if (typeof value !== \"function\") throw new Error;\r\n    return this.tween(key, textTween(value));\r\n  }\r\n  \r\n  function transition_transition() {\r\n    var name = this._name,\r\n        id0 = this._id,\r\n        id1 = newId();\r\n  \r\n    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\r\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\r\n        if (node = group[i]) {\r\n          var inherit = get$1(node, id0);\r\n          schedule(node, name, id1, i, group, {\r\n            time: inherit.time + inherit.delay + inherit.duration,\r\n            delay: 0,\r\n            duration: inherit.duration,\r\n            ease: inherit.ease\r\n          });\r\n        }\r\n      }\r\n    }\r\n  \r\n    return new Transition(groups, this._parents, name, id1);\r\n  }\r\n  \r\n  function transition_end() {\r\n    var on0, on1, that = this, id = that._id, size = that.size();\r\n    return new Promise(function(resolve, reject) {\r\n      var cancel = {value: reject},\r\n          end = {value: function() { if (--size === 0) resolve(); }};\r\n  \r\n      that.each(function() {\r\n        var schedule = set$1(this, id),\r\n            on = schedule.on;\r\n  \r\n        // If this node shared a dispatch with the previous node,\r\n        // just assign the updated shared dispatch and we’re done!\r\n        // Otherwise, copy-on-write.\r\n        if (on !== on0) {\r\n          on1 = (on0 = on).copy();\r\n          on1._.cancel.push(cancel);\r\n          on1._.interrupt.push(cancel);\r\n          on1._.end.push(end);\r\n        }\r\n  \r\n        schedule.on = on1;\r\n      });\r\n    });\r\n  }\r\n  \r\n  var id = 0;\r\n  \r\n  function Transition(groups, parents, name, id) {\r\n    this._groups = groups;\r\n    this._parents = parents;\r\n    this._name = name;\r\n    this._id = id;\r\n  }\r\n  \r\n  function transition(name) {\r\n    return selection().transition(name);\r\n  }\r\n  \r\n  function newId() {\r\n    return ++id;\r\n  }\r\n  \r\n  var selection_prototype = selection.prototype;\r\n  \r\n  Transition.prototype = transition.prototype = {\r\n    constructor: Transition,\r\n    select: transition_select,\r\n    selectAll: transition_selectAll,\r\n    filter: transition_filter,\r\n    merge: transition_merge,\r\n    selection: transition_selection,\r\n    transition: transition_transition,\r\n    call: selection_prototype.call,\r\n    nodes: selection_prototype.nodes,\r\n    node: selection_prototype.node,\r\n    size: selection_prototype.size,\r\n    empty: selection_prototype.empty,\r\n    each: selection_prototype.each,\r\n    on: transition_on,\r\n    attr: transition_attr,\r\n    attrTween: transition_attrTween,\r\n    style: transition_style,\r\n    styleTween: transition_styleTween,\r\n    text: transition_text,\r\n    textTween: transition_textTween,\r\n    remove: transition_remove,\r\n    tween: transition_tween,\r\n    delay: transition_delay,\r\n    duration: transition_duration,\r\n    ease: transition_ease,\r\n    end: transition_end\r\n  };\r\n  \r\n  function linear$1(t) {\r\n    return +t;\r\n  }\r\n  \r\n  function quadIn(t) {\r\n    return t * t;\r\n  }\r\n  \r\n  function quadOut(t) {\r\n    return t * (2 - t);\r\n  }\r\n  \r\n  function quadInOut(t) {\r\n    return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;\r\n  }\r\n  \r\n  function cubicIn(t) {\r\n    return t * t * t;\r\n  }\r\n  \r\n  function cubicOut(t) {\r\n    return --t * t * t + 1;\r\n  }\r\n  \r\n  function cubicInOut(t) {\r\n    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\r\n  }\r\n  \r\n  var exponent = 3;\r\n  \r\n  var polyIn = (function custom(e) {\r\n    e = +e;\r\n  \r\n    function polyIn(t) {\r\n      return Math.pow(t, e);\r\n    }\r\n  \r\n    polyIn.exponent = custom;\r\n  \r\n    return polyIn;\r\n  })(exponent);\r\n  \r\n  var polyOut = (function custom(e) {\r\n    e = +e;\r\n  \r\n    function polyOut(t) {\r\n      return 1 - Math.pow(1 - t, e);\r\n    }\r\n  \r\n    polyOut.exponent = custom;\r\n  \r\n    return polyOut;\r\n  })(exponent);\r\n  \r\n  var polyInOut = (function custom(e) {\r\n    e = +e;\r\n  \r\n    function polyInOut(t) {\r\n      return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;\r\n    }\r\n  \r\n    polyInOut.exponent = custom;\r\n  \r\n    return polyInOut;\r\n  })(exponent);\r\n  \r\n  var pi = Math.PI,\r\n      halfPi = pi / 2;\r\n  \r\n  function sinIn(t) {\r\n    return 1 - Math.cos(t * halfPi);\r\n  }\r\n  \r\n  function sinOut(t) {\r\n    return Math.sin(t * halfPi);\r\n  }\r\n  \r\n  function sinInOut(t) {\r\n    return (1 - Math.cos(pi * t)) / 2;\r\n  }\r\n  \r\n  function expIn(t) {\r\n    return Math.pow(2, 10 * t - 10);\r\n  }\r\n  \r\n  function expOut(t) {\r\n    return 1 - Math.pow(2, -10 * t);\r\n  }\r\n  \r\n  function expInOut(t) {\r\n    return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;\r\n  }\r\n  \r\n  function circleIn(t) {\r\n    return 1 - Math.sqrt(1 - t * t);\r\n  }\r\n  \r\n  function circleOut(t) {\r\n    return Math.sqrt(1 - --t * t);\r\n  }\r\n  \r\n  function circleInOut(t) {\r\n    return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;\r\n  }\r\n  \r\n  var b1 = 4 / 11,\r\n      b2 = 6 / 11,\r\n      b3 = 8 / 11,\r\n      b4 = 3 / 4,\r\n      b5 = 9 / 11,\r\n      b6 = 10 / 11,\r\n      b7 = 15 / 16,\r\n      b8 = 21 / 22,\r\n      b9 = 63 / 64,\r\n      b0 = 1 / b1 / b1;\r\n  \r\n  function bounceIn(t) {\r\n    return 1 - bounceOut(1 - t);\r\n  }\r\n  \r\n  function bounceOut(t) {\r\n    return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;\r\n  }\r\n  \r\n  function bounceInOut(t) {\r\n    return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;\r\n  }\r\n  \r\n  var overshoot = 1.70158;\r\n  \r\n  var backIn = (function custom(s) {\r\n    s = +s;\r\n  \r\n    function backIn(t) {\r\n      return t * t * ((s + 1) * t - s);\r\n    }\r\n  \r\n    backIn.overshoot = custom;\r\n  \r\n    return backIn;\r\n  })(overshoot);\r\n  \r\n  var backOut = (function custom(s) {\r\n    s = +s;\r\n  \r\n    function backOut(t) {\r\n      return --t * t * ((s + 1) * t + s) + 1;\r\n    }\r\n  \r\n    backOut.overshoot = custom;\r\n  \r\n    return backOut;\r\n  })(overshoot);\r\n  \r\n  var backInOut = (function custom(s) {\r\n    s = +s;\r\n  \r\n    function backInOut(t) {\r\n      return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;\r\n    }\r\n  \r\n    backInOut.overshoot = custom;\r\n  \r\n    return backInOut;\r\n  })(overshoot);\r\n  \r\n  var tau = 2 * Math.PI,\r\n      amplitude = 1,\r\n      period = 0.3;\r\n  \r\n  var elasticIn = (function custom(a, p) {\r\n    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\r\n  \r\n    function elasticIn(t) {\r\n      return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);\r\n    }\r\n  \r\n    elasticIn.amplitude = function(a) { return custom(a, p * tau); };\r\n    elasticIn.period = function(p) { return custom(a, p); };\r\n  \r\n    return elasticIn;\r\n  })(amplitude, period);\r\n  \r\n  var elasticOut = (function custom(a, p) {\r\n    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\r\n  \r\n    function elasticOut(t) {\r\n      return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);\r\n    }\r\n  \r\n    elasticOut.amplitude = function(a) { return custom(a, p * tau); };\r\n    elasticOut.period = function(p) { return custom(a, p); };\r\n  \r\n    return elasticOut;\r\n  })(amplitude, period);\r\n  \r\n  var elasticInOut = (function custom(a, p) {\r\n    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\r\n  \r\n    function elasticInOut(t) {\r\n      return ((t = t * 2 - 1) < 0\r\n          ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)\r\n          : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;\r\n    }\r\n  \r\n    elasticInOut.amplitude = function(a) { return custom(a, p * tau); };\r\n    elasticInOut.period = function(p) { return custom(a, p); };\r\n  \r\n    return elasticInOut;\r\n  })(amplitude, period);\r\n  \r\n  var defaultTiming = {\r\n    time: null, // Set on use.\r\n    delay: 0,\r\n    duration: 250,\r\n    ease: cubicInOut\r\n  };\r\n  \r\n  function inherit(node, id) {\r\n    var timing;\r\n    while (!(timing = node.__transition) || !(timing = timing[id])) {\r\n      if (!(node = node.parentNode)) {\r\n        return defaultTiming.time = now(), defaultTiming;\r\n      }\r\n    }\r\n    return timing;\r\n  }\r\n  \r\n  function selection_transition(name) {\r\n    var id,\r\n        timing;\r\n  \r\n    if (name instanceof Transition) {\r\n      id = name._id, name = name._name;\r\n    } else {\r\n      id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + \"\";\r\n    }\r\n  \r\n    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\r\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\r\n        if (node = group[i]) {\r\n          schedule(node, name, id, i, group, timing || inherit(node, id));\r\n        }\r\n      }\r\n    }\r\n  \r\n    return new Transition(groups, this._parents, name, id);\r\n  }\r\n  \r\n  selection.prototype.interrupt = selection_interrupt;\r\n  selection.prototype.transition = selection_transition;\r\n  \r\n  var root$1 = [null];\r\n  \r\n  function active(node, name) {\r\n    var schedules = node.__transition,\r\n        schedule,\r\n        i;\r\n  \r\n    if (schedules) {\r\n      name = name == null ? null : name + \"\";\r\n      for (i in schedules) {\r\n        if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {\r\n          return new Transition([[node]], root$1, name, +i);\r\n        }\r\n      }\r\n    }\r\n  \r\n    return null;\r\n  }\r\n  \r\n  function constant$4(x) {\r\n    return function() {\r\n      return x;\r\n    };\r\n  }\r\n  \r\n  function BrushEvent(target, type, selection) {\r\n    this.target = target;\r\n    this.type = type;\r\n    this.selection = selection;\r\n  }\r\n  \r\n  function nopropagation$1() {\r\n    exports.event.stopImmediatePropagation();\r\n  }\r\n  \r\n  function noevent$1() {\r\n    exports.event.preventDefault();\r\n    exports.event.stopImmediatePropagation();\r\n  }\r\n  \r\n  var MODE_DRAG = {name: \"drag\"},\r\n      MODE_SPACE = {name: \"space\"},\r\n      MODE_HANDLE = {name: \"handle\"},\r\n      MODE_CENTER = {name: \"center\"};\r\n  \r\n  function number1(e) {\r\n    return [+e[0], +e[1]];\r\n  }\r\n  \r\n  function number2(e) {\r\n    return [number1(e[0]), number1(e[1])];\r\n  }\r\n  \r\n  function toucher(identifier) {\r\n    return function(target) {\r\n      return touch(target, exports.event.touches, identifier);\r\n    };\r\n  }\r\n  \r\n  var X = {\r\n    name: \"x\",\r\n    handles: [\"w\", \"e\"].map(type),\r\n    input: function(x, e) { return x == null ? null : [[+x[0], e[0][1]], [+x[1], e[1][1]]]; },\r\n    output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }\r\n  };\r\n  \r\n  var Y = {\r\n    name: \"y\",\r\n    handles: [\"n\", \"s\"].map(type),\r\n    input: function(y, e) { return y == null ? null : [[e[0][0], +y[0]], [e[1][0], +y[1]]]; },\r\n    output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }\r\n  };\r\n  \r\n  var XY = {\r\n    name: \"xy\",\r\n    handles: [\"n\", \"w\", \"e\", \"s\", \"nw\", \"ne\", \"sw\", \"se\"].map(type),\r\n    input: function(xy) { return xy == null ? null : number2(xy); },\r\n    output: function(xy) { return xy; }\r\n  };\r\n  \r\n  var cursors = {\r\n    overlay: \"crosshair\",\r\n    selection: \"move\",\r\n    n: \"ns-resize\",\r\n    e: \"ew-resize\",\r\n    s: \"ns-resize\",\r\n    w: \"ew-resize\",\r\n    nw: \"nwse-resize\",\r\n    ne: \"nesw-resize\",\r\n    se: \"nwse-resize\",\r\n    sw: \"nesw-resize\"\r\n  };\r\n  \r\n  var flipX = {\r\n    e: \"w\",\r\n    w: \"e\",\r\n    nw: \"ne\",\r\n    ne: \"nw\",\r\n    se: \"sw\",\r\n    sw: \"se\"\r\n  };\r\n  \r\n  var flipY = {\r\n    n: \"s\",\r\n    s: \"n\",\r\n    nw: \"sw\",\r\n    ne: \"se\",\r\n    se: \"ne\",\r\n    sw: \"nw\"\r\n  };\r\n  \r\n  var signsX = {\r\n    overlay: +1,\r\n    selection: +1,\r\n    n: null,\r\n    e: +1,\r\n    s: null,\r\n    w: -1,\r\n    nw: -1,\r\n    ne: +1,\r\n    se: +1,\r\n    sw: -1\r\n  };\r\n  \r\n  var signsY = {\r\n    overlay: +1,\r\n    selection: +1,\r\n    n: -1,\r\n    e: null,\r\n    s: +1,\r\n    w: null,\r\n    nw: -1,\r\n    ne: -1,\r\n    se: +1,\r\n    sw: +1\r\n  };\r\n  \r\n  function type(t) {\r\n    return {type: t};\r\n  }\r\n  \r\n  // Ignore right-click, since that should open the context menu.\r\n  function defaultFilter$1() {\r\n    return !exports.event.ctrlKey && !exports.event.button;\r\n  }\r\n  \r\n  function defaultExtent() {\r\n    var svg = this.ownerSVGElement || this;\r\n    if (svg.hasAttribute(\"viewBox\")) {\r\n      svg = svg.viewBox.baseVal;\r\n      return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];\r\n    }\r\n    return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];\r\n  }\r\n  \r\n  function defaultTouchable$1() {\r\n    return navigator.maxTouchPoints || (\"ontouchstart\" in this);\r\n  }\r\n  \r\n  // Like d3.local, but with the name “__brush” rather than auto-generated.\r\n  function local$1(node) {\r\n    while (!node.__brush) if (!(node = node.parentNode)) return;\r\n    return node.__brush;\r\n  }\r\n  \r\n  function empty$1(extent) {\r\n    return extent[0][0] === extent[1][0]\r\n        || extent[0][1] === extent[1][1];\r\n  }\r\n  \r\n  function brushSelection(node) {\r\n    var state = node.__brush;\r\n    return state ? state.dim.output(state.selection) : null;\r\n  }\r\n  \r\n  function brushX() {\r\n    return brush$1(X);\r\n  }\r\n  \r\n  function brushY() {\r\n    return brush$1(Y);\r\n  }\r\n  \r\n  function brush() {\r\n    return brush$1(XY);\r\n  }\r\n  \r\n  function brush$1(dim) {\r\n    var extent = defaultExtent,\r\n        filter = defaultFilter$1,\r\n        touchable = defaultTouchable$1,\r\n        keys = true,\r\n        listeners = dispatch(\"start\", \"brush\", \"end\"),\r\n        handleSize = 6,\r\n        touchending;\r\n  \r\n    function brush(group) {\r\n      var overlay = group\r\n          .property(\"__brush\", initialize)\r\n        .selectAll(\".overlay\")\r\n        .data([type(\"overlay\")]);\r\n  \r\n      overlay.enter().append(\"rect\")\r\n          .attr(\"class\", \"overlay\")\r\n          .attr(\"pointer-events\", \"all\")\r\n          .attr(\"cursor\", cursors.overlay)\r\n        .merge(overlay)\r\n          .each(function() {\r\n            var extent = local$1(this).extent;\r\n            select(this)\r\n                .attr(\"x\", extent[0][0])\r\n                .attr(\"y\", extent[0][1])\r\n                .attr(\"width\", extent[1][0] - extent[0][0])\r\n                .attr(\"height\", extent[1][1] - extent[0][1]);\r\n          });\r\n  \r\n      group.selectAll(\".selection\")\r\n        .data([type(\"selection\")])\r\n        .enter().append(\"rect\")\r\n          .attr(\"class\", \"selection\")\r\n          .attr(\"cursor\", cursors.selection)\r\n          .attr(\"fill\", \"#777\")\r\n          .attr(\"fill-opacity\", 0.3)\r\n          .attr(\"stroke\", \"#fff\")\r\n          .attr(\"shape-rendering\", \"crispEdges\");\r\n  \r\n      var handle = group.selectAll(\".handle\")\r\n        .data(dim.handles, function(d) { return d.type; });\r\n  \r\n      handle.exit().remove();\r\n  \r\n      handle.enter().append(\"rect\")\r\n          .attr(\"class\", function(d) { return \"handle handle--\" + d.type; })\r\n          .attr(\"cursor\", function(d) { return cursors[d.type]; });\r\n  \r\n      group\r\n          .each(redraw)\r\n          .attr(\"fill\", \"none\")\r\n          .attr(\"pointer-events\", \"all\")\r\n          .on(\"mousedown.brush\", started)\r\n        .filter(touchable)\r\n          .on(\"touchstart.brush\", started)\r\n          .on(\"touchmove.brush\", touchmoved)\r\n          .on(\"touchend.brush touchcancel.brush\", touchended)\r\n          .style(\"touch-action\", \"none\")\r\n          .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\r\n    }\r\n  \r\n    brush.move = function(group, selection) {\r\n      if (group.selection) {\r\n        group\r\n            .on(\"start.brush\", function() { emitter(this, arguments).beforestart().start(); })\r\n            .on(\"interrupt.brush end.brush\", function() { emitter(this, arguments).end(); })\r\n            .tween(\"brush\", function() {\r\n              var that = this,\r\n                  state = that.__brush,\r\n                  emit = emitter(that, arguments),\r\n                  selection0 = state.selection,\r\n                  selection1 = dim.input(typeof selection === \"function\" ? selection.apply(this, arguments) : selection, state.extent),\r\n                  i = interpolateValue(selection0, selection1);\r\n  \r\n              function tween(t) {\r\n                state.selection = t === 1 && selection1 === null ? null : i(t);\r\n                redraw.call(that);\r\n                emit.brush();\r\n              }\r\n  \r\n              return selection0 !== null && selection1 !== null ? tween : tween(1);\r\n            });\r\n      } else {\r\n        group\r\n            .each(function() {\r\n              var that = this,\r\n                  args = arguments,\r\n                  state = that.__brush,\r\n                  selection1 = dim.input(typeof selection === \"function\" ? selection.apply(that, args) : selection, state.extent),\r\n                  emit = emitter(that, args).beforestart();\r\n  \r\n              interrupt(that);\r\n              state.selection = selection1 === null ? null : selection1;\r\n              redraw.call(that);\r\n              emit.start().brush().end();\r\n            });\r\n      }\r\n    };\r\n  \r\n    brush.clear = function(group) {\r\n      brush.move(group, null);\r\n    };\r\n  \r\n    function redraw() {\r\n      var group = select(this),\r\n          selection = local$1(this).selection;\r\n  \r\n      if (selection) {\r\n        group.selectAll(\".selection\")\r\n            .style(\"display\", null)\r\n            .attr(\"x\", selection[0][0])\r\n            .attr(\"y\", selection[0][1])\r\n            .attr(\"width\", selection[1][0] - selection[0][0])\r\n            .attr(\"height\", selection[1][1] - selection[0][1]);\r\n  \r\n        group.selectAll(\".handle\")\r\n            .style(\"display\", null)\r\n            .attr(\"x\", function(d) { return d.type[d.type.length - 1] === \"e\" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })\r\n            .attr(\"y\", function(d) { return d.type[0] === \"s\" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })\r\n            .attr(\"width\", function(d) { return d.type === \"n\" || d.type === \"s\" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })\r\n            .attr(\"height\", function(d) { return d.type === \"e\" || d.type === \"w\" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });\r\n      }\r\n  \r\n      else {\r\n        group.selectAll(\".selection,.handle\")\r\n            .style(\"display\", \"none\")\r\n            .attr(\"x\", null)\r\n            .attr(\"y\", null)\r\n            .attr(\"width\", null)\r\n            .attr(\"height\", null);\r\n      }\r\n    }\r\n  \r\n    function emitter(that, args, clean) {\r\n      return (!clean && that.__brush.emitter) || new Emitter(that, args);\r\n    }\r\n  \r\n    function Emitter(that, args) {\r\n      this.that = that;\r\n      this.args = args;\r\n      this.state = that.__brush;\r\n      this.active = 0;\r\n    }\r\n  \r\n    Emitter.prototype = {\r\n      beforestart: function() {\r\n        if (++this.active === 1) this.state.emitter = this, this.starting = true;\r\n        return this;\r\n      },\r\n      start: function() {\r\n        if (this.starting) this.starting = false, this.emit(\"start\");\r\n        else this.emit(\"brush\");\r\n        return this;\r\n      },\r\n      brush: function() {\r\n        this.emit(\"brush\");\r\n        return this;\r\n      },\r\n      end: function() {\r\n        if (--this.active === 0) delete this.state.emitter, this.emit(\"end\");\r\n        return this;\r\n      },\r\n      emit: function(type) {\r\n        customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);\r\n      }\r\n    };\r\n  \r\n    function started() {\r\n      if (touchending && !exports.event.touches) return;\r\n      if (!filter.apply(this, arguments)) return;\r\n  \r\n      var that = this,\r\n          type = exports.event.target.__data__.type,\r\n          mode = (keys && exports.event.metaKey ? type = \"overlay\" : type) === \"selection\" ? MODE_DRAG : (keys && exports.event.altKey ? MODE_CENTER : MODE_HANDLE),\r\n          signX = dim === Y ? null : signsX[type],\r\n          signY = dim === X ? null : signsY[type],\r\n          state = local$1(that),\r\n          extent = state.extent,\r\n          selection = state.selection,\r\n          W = extent[0][0], w0, w1,\r\n          N = extent[0][1], n0, n1,\r\n          E = extent[1][0], e0, e1,\r\n          S = extent[1][1], s0, s1,\r\n          dx = 0,\r\n          dy = 0,\r\n          moving,\r\n          shifting = signX && signY && keys && exports.event.shiftKey,\r\n          lockX,\r\n          lockY,\r\n          pointer = exports.event.touches ? toucher(exports.event.changedTouches[0].identifier) : mouse,\r\n          point0 = pointer(that),\r\n          point = point0,\r\n          emit = emitter(that, arguments, true).beforestart();\r\n  \r\n      if (type === \"overlay\") {\r\n        if (selection) moving = true;\r\n        state.selection = selection = [\r\n          [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],\r\n          [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]\r\n        ];\r\n      } else {\r\n        w0 = selection[0][0];\r\n        n0 = selection[0][1];\r\n        e0 = selection[1][0];\r\n        s0 = selection[1][1];\r\n      }\r\n  \r\n      w1 = w0;\r\n      n1 = n0;\r\n      e1 = e0;\r\n      s1 = s0;\r\n  \r\n      var group = select(that)\r\n          .attr(\"pointer-events\", \"none\");\r\n  \r\n      var overlay = group.selectAll(\".overlay\")\r\n          .attr(\"cursor\", cursors[type]);\r\n  \r\n      if (exports.event.touches) {\r\n        emit.moved = moved;\r\n        emit.ended = ended;\r\n      } else {\r\n        var view = select(exports.event.view)\r\n            .on(\"mousemove.brush\", moved, true)\r\n            .on(\"mouseup.brush\", ended, true);\r\n        if (keys) view\r\n            .on(\"keydown.brush\", keydowned, true)\r\n            .on(\"keyup.brush\", keyupped, true);\r\n  \r\n        dragDisable(exports.event.view);\r\n      }\r\n  \r\n      nopropagation$1();\r\n      interrupt(that);\r\n      redraw.call(that);\r\n      emit.start();\r\n  \r\n      function moved() {\r\n        var point1 = pointer(that);\r\n        if (shifting && !lockX && !lockY) {\r\n          if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;\r\n          else lockX = true;\r\n        }\r\n        point = point1;\r\n        moving = true;\r\n        noevent$1();\r\n        move();\r\n      }\r\n  \r\n      function move() {\r\n        var t;\r\n  \r\n        dx = point[0] - point0[0];\r\n        dy = point[1] - point0[1];\r\n  \r\n        switch (mode) {\r\n          case MODE_SPACE:\r\n          case MODE_DRAG: {\r\n            if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;\r\n            if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;\r\n            break;\r\n          }\r\n          case MODE_HANDLE: {\r\n            if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;\r\n            else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;\r\n            if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;\r\n            else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;\r\n            break;\r\n          }\r\n          case MODE_CENTER: {\r\n            if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));\r\n            if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));\r\n            break;\r\n          }\r\n        }\r\n  \r\n        if (e1 < w1) {\r\n          signX *= -1;\r\n          t = w0, w0 = e0, e0 = t;\r\n          t = w1, w1 = e1, e1 = t;\r\n          if (type in flipX) overlay.attr(\"cursor\", cursors[type = flipX[type]]);\r\n        }\r\n  \r\n        if (s1 < n1) {\r\n          signY *= -1;\r\n          t = n0, n0 = s0, s0 = t;\r\n          t = n1, n1 = s1, s1 = t;\r\n          if (type in flipY) overlay.attr(\"cursor\", cursors[type = flipY[type]]);\r\n        }\r\n  \r\n        if (state.selection) selection = state.selection; // May be set by brush.move!\r\n        if (lockX) w1 = selection[0][0], e1 = selection[1][0];\r\n        if (lockY) n1 = selection[0][1], s1 = selection[1][1];\r\n  \r\n        if (selection[0][0] !== w1\r\n            || selection[0][1] !== n1\r\n            || selection[1][0] !== e1\r\n            || selection[1][1] !== s1) {\r\n          state.selection = [[w1, n1], [e1, s1]];\r\n          redraw.call(that);\r\n          emit.brush();\r\n        }\r\n      }\r\n  \r\n      function ended() {\r\n        nopropagation$1();\r\n        if (exports.event.touches) {\r\n          if (exports.event.touches.length) return;\r\n          if (touchending) clearTimeout(touchending);\r\n          touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\r\n        } else {\r\n          yesdrag(exports.event.view, moving);\r\n          view.on(\"keydown.brush keyup.brush mousemove.brush mouseup.brush\", null);\r\n        }\r\n        group.attr(\"pointer-events\", \"all\");\r\n        overlay.attr(\"cursor\", cursors.overlay);\r\n        if (state.selection) selection = state.selection; // May be set by brush.move (on start)!\r\n        if (empty$1(selection)) state.selection = null, redraw.call(that);\r\n        emit.end();\r\n      }\r\n  \r\n      function keydowned() {\r\n        switch (exports.event.keyCode) {\r\n          case 16: { // SHIFT\r\n            shifting = signX && signY;\r\n            break;\r\n          }\r\n          case 18: { // ALT\r\n            if (mode === MODE_HANDLE) {\r\n              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\r\n              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\r\n              mode = MODE_CENTER;\r\n              move();\r\n            }\r\n            break;\r\n          }\r\n          case 32: { // SPACE; takes priority over ALT\r\n            if (mode === MODE_HANDLE || mode === MODE_CENTER) {\r\n              if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;\r\n              if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;\r\n              mode = MODE_SPACE;\r\n              overlay.attr(\"cursor\", cursors.selection);\r\n              move();\r\n            }\r\n            break;\r\n          }\r\n          default: return;\r\n        }\r\n        noevent$1();\r\n      }\r\n  \r\n      function keyupped() {\r\n        switch (exports.event.keyCode) {\r\n          case 16: { // SHIFT\r\n            if (shifting) {\r\n              lockX = lockY = shifting = false;\r\n              move();\r\n            }\r\n            break;\r\n          }\r\n          case 18: { // ALT\r\n            if (mode === MODE_CENTER) {\r\n              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\r\n              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\r\n              mode = MODE_HANDLE;\r\n              move();\r\n            }\r\n            break;\r\n          }\r\n          case 32: { // SPACE\r\n            if (mode === MODE_SPACE) {\r\n              if (exports.event.altKey) {\r\n                if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\r\n                if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\r\n                mode = MODE_CENTER;\r\n              } else {\r\n                if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\r\n                if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\r\n                mode = MODE_HANDLE;\r\n              }\r\n              overlay.attr(\"cursor\", cursors[type]);\r\n              move();\r\n            }\r\n            break;\r\n          }\r\n          default: return;\r\n        }\r\n        noevent$1();\r\n      }\r\n    }\r\n  \r\n    function touchmoved() {\r\n      emitter(this, arguments).moved();\r\n    }\r\n  \r\n    function touchended() {\r\n      emitter(this, arguments).ended();\r\n    }\r\n  \r\n    function initialize() {\r\n      var state = this.__brush || {selection: null};\r\n      state.extent = number2(extent.apply(this, arguments));\r\n      state.dim = dim;\r\n      return state;\r\n    }\r\n  \r\n    brush.extent = function(_) {\r\n      return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant$4(number2(_)), brush) : extent;\r\n    };\r\n  \r\n    brush.filter = function(_) {\r\n      return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant$4(!!_), brush) : filter;\r\n    };\r\n  \r\n    brush.touchable = function(_) {\r\n      return arguments.length ? (touchable = typeof _ === \"function\" ? _ : constant$4(!!_), brush) : touchable;\r\n    };\r\n  \r\n    brush.handleSize = function(_) {\r\n      return arguments.length ? (handleSize = +_, brush) : handleSize;\r\n    };\r\n  \r\n    brush.keyModifiers = function(_) {\r\n      return arguments.length ? (keys = !!_, brush) : keys;\r\n    };\r\n  \r\n    brush.on = function() {\r\n      var value = listeners.on.apply(listeners, arguments);\r\n      return value === listeners ? brush : value;\r\n    };\r\n  \r\n    return brush;\r\n  }\r\n  \r\n  var cos = Math.cos;\r\n  var sin = Math.sin;\r\n  var pi$1 = Math.PI;\r\n  var halfPi$1 = pi$1 / 2;\r\n  var tau$1 = pi$1 * 2;\r\n  var max$1 = Math.max;\r\n  \r\n  function compareValue(compare) {\r\n    return function(a, b) {\r\n      return compare(\r\n        a.source.value + a.target.value,\r\n        b.source.value + b.target.value\r\n      );\r\n    };\r\n  }\r\n  \r\n  function chord() {\r\n    var padAngle = 0,\r\n        sortGroups = null,\r\n        sortSubgroups = null,\r\n        sortChords = null;\r\n  \r\n    function chord(matrix) {\r\n      var n = matrix.length,\r\n          groupSums = [],\r\n          groupIndex = sequence(n),\r\n          subgroupIndex = [],\r\n          chords = [],\r\n          groups = chords.groups = new Array(n),\r\n          subgroups = new Array(n * n),\r\n          k,\r\n          x,\r\n          x0,\r\n          dx,\r\n          i,\r\n          j;\r\n  \r\n      // Compute the sum.\r\n      k = 0, i = -1; while (++i < n) {\r\n        x = 0, j = -1; while (++j < n) {\r\n          x += matrix[i][j];\r\n        }\r\n        groupSums.push(x);\r\n        subgroupIndex.push(sequence(n));\r\n        k += x;\r\n      }\r\n  \r\n      // Sort groups…\r\n      if (sortGroups) groupIndex.sort(function(a, b) {\r\n        return sortGroups(groupSums[a], groupSums[b]);\r\n      });\r\n  \r\n      // Sort subgroups…\r\n      if (sortSubgroups) subgroupIndex.forEach(function(d, i) {\r\n        d.sort(function(a, b) {\r\n          return sortSubgroups(matrix[i][a], matrix[i][b]);\r\n        });\r\n      });\r\n  \r\n      // Convert the sum to scaling factor for [0, 2pi].\r\n      // TODO Allow start and end angle to be specified?\r\n      // TODO Allow padding to be specified as percentage?\r\n      k = max$1(0, tau$1 - padAngle * n) / k;\r\n      dx = k ? padAngle : tau$1 / n;\r\n  \r\n      // Compute the start and end angle for each group and subgroup.\r\n      // Note: Opera has a bug reordering object literal properties!\r\n      x = 0, i = -1; while (++i < n) {\r\n        x0 = x, j = -1; while (++j < n) {\r\n          var di = groupIndex[i],\r\n              dj = subgroupIndex[di][j],\r\n              v = matrix[di][dj],\r\n              a0 = x,\r\n              a1 = x += v * k;\r\n          subgroups[dj * n + di] = {\r\n            index: di,\r\n            subindex: dj,\r\n            startAngle: a0,\r\n            endAngle: a1,\r\n            value: v\r\n          };\r\n        }\r\n        groups[di] = {\r\n          index: di,\r\n          startAngle: x0,\r\n          endAngle: x,\r\n          value: groupSums[di]\r\n        };\r\n        x += dx;\r\n      }\r\n  \r\n      // Generate chords for each (non-empty) subgroup-subgroup link.\r\n      i = -1; while (++i < n) {\r\n        j = i - 1; while (++j < n) {\r\n          var source = subgroups[j * n + i],\r\n              target = subgroups[i * n + j];\r\n          if (source.value || target.value) {\r\n            chords.push(source.value < target.value\r\n                ? {source: target, target: source}\r\n                : {source: source, target: target});\r\n          }\r\n        }\r\n      }\r\n  \r\n      return sortChords ? chords.sort(sortChords) : chords;\r\n    }\r\n  \r\n    chord.padAngle = function(_) {\r\n      return arguments.length ? (padAngle = max$1(0, _), chord) : padAngle;\r\n    };\r\n  \r\n    chord.sortGroups = function(_) {\r\n      return arguments.length ? (sortGroups = _, chord) : sortGroups;\r\n    };\r\n  \r\n    chord.sortSubgroups = function(_) {\r\n      return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;\r\n    };\r\n  \r\n    chord.sortChords = function(_) {\r\n      return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;\r\n    };\r\n  \r\n    return chord;\r\n  }\r\n  \r\n  var slice$2 = Array.prototype.slice;\r\n  \r\n  function constant$5(x) {\r\n    return function() {\r\n      return x;\r\n    };\r\n  }\r\n  \r\n  var pi$2 = Math.PI,\r\n      tau$2 = 2 * pi$2,\r\n      epsilon$1 = 1e-6,\r\n      tauEpsilon = tau$2 - epsilon$1;\r\n  \r\n  function Path() {\r\n    this._x0 = this._y0 = // start of current subpath\r\n    this._x1 = this._y1 = null; // end of current subpath\r\n    this._ = \"\";\r\n  }\r\n  \r\n  function path() {\r\n    return new Path;\r\n  }\r\n  \r\n  Path.prototype = path.prototype = {\r\n    constructor: Path,\r\n    moveTo: function(x, y) {\r\n      this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\r\n    },\r\n    closePath: function() {\r\n      if (this._x1 !== null) {\r\n        this._x1 = this._x0, this._y1 = this._y0;\r\n        this._ += \"Z\";\r\n      }\r\n    },\r\n    lineTo: function(x, y) {\r\n      this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\r\n    },\r\n    quadraticCurveTo: function(x1, y1, x, y) {\r\n      this._ += \"Q\" + (+x1) + \",\" + (+y1) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\r\n    },\r\n    bezierCurveTo: function(x1, y1, x2, y2, x, y) {\r\n      this._ += \"C\" + (+x1) + \",\" + (+y1) + \",\" + (+x2) + \",\" + (+y2) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\r\n    },\r\n    arcTo: function(x1, y1, x2, y2, r) {\r\n      x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\r\n      var x0 = this._x1,\r\n          y0 = this._y1,\r\n          x21 = x2 - x1,\r\n          y21 = y2 - y1,\r\n          x01 = x0 - x1,\r\n          y01 = y0 - y1,\r\n          l01_2 = x01 * x01 + y01 * y01;\r\n  \r\n      // Is the radius negative? Error.\r\n      if (r < 0) throw new Error(\"negative radius: \" + r);\r\n  \r\n      // Is this path empty? Move to (x1,y1).\r\n      if (this._x1 === null) {\r\n        this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\r\n      }\r\n  \r\n      // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\r\n      else if (!(l01_2 > epsilon$1));\r\n  \r\n      // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\r\n      // Equivalently, is (x1,y1) coincident with (x2,y2)?\r\n      // Or, is the radius zero? Line to (x1,y1).\r\n      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$1) || !r) {\r\n        this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\r\n      }\r\n  \r\n      // Otherwise, draw an arc!\r\n      else {\r\n        var x20 = x2 - x0,\r\n            y20 = y2 - y0,\r\n            l21_2 = x21 * x21 + y21 * y21,\r\n            l20_2 = x20 * x20 + y20 * y20,\r\n            l21 = Math.sqrt(l21_2),\r\n            l01 = Math.sqrt(l01_2),\r\n            l = r * Math.tan((pi$2 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\r\n            t01 = l / l01,\r\n            t21 = l / l21;\r\n  \r\n        // If the start tangent is not coincident with (x0,y0), line to.\r\n        if (Math.abs(t01 - 1) > epsilon$1) {\r\n          this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\r\n        }\r\n  \r\n        this._ += \"A\" + r + \",\" + r + \",0,0,\" + (+(y01 * x20 > x01 * y20)) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\r\n      }\r\n    },\r\n    arc: function(x, y, r, a0, a1, ccw) {\r\n      x = +x, y = +y, r = +r, ccw = !!ccw;\r\n      var dx = r * Math.cos(a0),\r\n          dy = r * Math.sin(a0),\r\n          x0 = x + dx,\r\n          y0 = y + dy,\r\n          cw = 1 ^ ccw,\r\n          da = ccw ? a0 - a1 : a1 - a0;\r\n  \r\n      // Is the radius negative? Error.\r\n      if (r < 0) throw new Error(\"negative radius: \" + r);\r\n  \r\n      // Is this path empty? Move to (x0,y0).\r\n      if (this._x1 === null) {\r\n        this._ += \"M\" + x0 + \",\" + y0;\r\n      }\r\n  \r\n      // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\r\n      else if (Math.abs(this._x1 - x0) > epsilon$1 || Math.abs(this._y1 - y0) > epsilon$1) {\r\n        this._ += \"L\" + x0 + \",\" + y0;\r\n      }\r\n  \r\n      // Is this arc empty? We’re done.\r\n      if (!r) return;\r\n  \r\n      // Does the angle go the wrong way? Flip the direction.\r\n      if (da < 0) da = da % tau$2 + tau$2;\r\n  \r\n      // Is this a complete circle? Draw two arcs to complete the circle.\r\n      if (da > tauEpsilon) {\r\n        this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\r\n      }\r\n  \r\n      // Is this arc non-empty? Draw an arc!\r\n      else if (da > epsilon$1) {\r\n        this._ += \"A\" + r + \",\" + r + \",0,\" + (+(da >= pi$2)) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\r\n      }\r\n    },\r\n    rect: function(x, y, w, h) {\r\n      this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + (+w) + \"v\" + (+h) + \"h\" + (-w) + \"Z\";\r\n    },\r\n    toString: function() {\r\n      return this._;\r\n    }\r\n  };\r\n  \r\n  function defaultSource(d) {\r\n    return d.source;\r\n  }\r\n  \r\n  function defaultTarget(d) {\r\n    return d.target;\r\n  }\r\n  \r\n  function defaultRadius(d) {\r\n    return d.radius;\r\n  }\r\n  \r\n  function defaultStartAngle(d) {\r\n    return d.startAngle;\r\n  }\r\n  \r\n  function defaultEndAngle(d) {\r\n    return d.endAngle;\r\n  }\r\n  \r\n  function ribbon() {\r\n    var source = defaultSource,\r\n        target = defaultTarget,\r\n        radius = defaultRadius,\r\n        startAngle = defaultStartAngle,\r\n        endAngle = defaultEndAngle,\r\n        context = null;\r\n  \r\n    function ribbon() {\r\n      var buffer,\r\n          argv = slice$2.call(arguments),\r\n          s = source.apply(this, argv),\r\n          t = target.apply(this, argv),\r\n          sr = +radius.apply(this, (argv[0] = s, argv)),\r\n          sa0 = startAngle.apply(this, argv) - halfPi$1,\r\n          sa1 = endAngle.apply(this, argv) - halfPi$1,\r\n          sx0 = sr * cos(sa0),\r\n          sy0 = sr * sin(sa0),\r\n          tr = +radius.apply(this, (argv[0] = t, argv)),\r\n          ta0 = startAngle.apply(this, argv) - halfPi$1,\r\n          ta1 = endAngle.apply(this, argv) - halfPi$1;\r\n  \r\n      if (!context) context = buffer = path();\r\n  \r\n      context.moveTo(sx0, sy0);\r\n      context.arc(0, 0, sr, sa0, sa1);\r\n      if (sa0 !== ta0 || sa1 !== ta1) { // TODO sr !== tr?\r\n        context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));\r\n        context.arc(0, 0, tr, ta0, ta1);\r\n      }\r\n      context.quadraticCurveTo(0, 0, sx0, sy0);\r\n      context.closePath();\r\n  \r\n      if (buffer) return context = null, buffer + \"\" || null;\r\n    }\r\n  \r\n    ribbon.radius = function(_) {\r\n      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant$5(+_), ribbon) : radius;\r\n    };\r\n  \r\n    ribbon.startAngle = function(_) {\r\n      return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant$5(+_), ribbon) : startAngle;\r\n    };\r\n  \r\n    ribbon.endAngle = function(_) {\r\n      return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant$5(+_), ribbon) : endAngle;\r\n    };\r\n  \r\n    ribbon.source = function(_) {\r\n      return arguments.length ? (source = _, ribbon) : source;\r\n    };\r\n  \r\n    ribbon.target = function(_) {\r\n      return arguments.length ? (target = _, ribbon) : target;\r\n    };\r\n  \r\n    ribbon.context = function(_) {\r\n      return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;\r\n    };\r\n  \r\n    return ribbon;\r\n  }\r\n  \r\n  var prefix = \"$\";\r\n  \r\n  function Map() {}\r\n  \r\n  Map.prototype = map$1.prototype = {\r\n    constructor: Map,\r\n    has: function(key) {\r\n      return (prefix + key) in this;\r\n    },\r\n    get: function(key) {\r\n      return this[prefix + key];\r\n    },\r\n    set: function(key, value) {\r\n      this[prefix + key] = value;\r\n      return this;\r\n    },\r\n    remove: function(key) {\r\n      var property = prefix + key;\r\n      return property in this && delete this[property];\r\n    },\r\n    clear: function() {\r\n      for (var property in this) if (property[0] === prefix) delete this[property];\r\n    },\r\n    keys: function() {\r\n      var keys = [];\r\n      for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));\r\n      return keys;\r\n    },\r\n    values: function() {\r\n      var values = [];\r\n      for (var property in this) if (property[0] === prefix) values.push(this[property]);\r\n      return values;\r\n    },\r\n    entries: function() {\r\n      var entries = [];\r\n      for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});\r\n      return entries;\r\n    },\r\n    size: function() {\r\n      var size = 0;\r\n      for (var property in this) if (property[0] === prefix) ++size;\r\n      return size;\r\n    },\r\n    empty: function() {\r\n      for (var property in this) if (property[0] === prefix) return false;\r\n      return true;\r\n    },\r\n    each: function(f) {\r\n      for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);\r\n    }\r\n  };\r\n  \r\n  function map$1(object, f) {\r\n    var map = new Map;\r\n  \r\n    // Copy constructor.\r\n    if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });\r\n  \r\n    // Index array by numeric index or specified key function.\r\n    else if (Array.isArray(object)) {\r\n      var i = -1,\r\n          n = object.length,\r\n          o;\r\n  \r\n      if (f == null) while (++i < n) map.set(i, object[i]);\r\n      else while (++i < n) map.set(f(o = object[i], i, object), o);\r\n    }\r\n  \r\n    // Convert object to map.\r\n    else if (object) for (var key in object) map.set(key, object[key]);\r\n  \r\n    return map;\r\n  }\r\n  \r\n  function nest() {\r\n    var keys = [],\r\n        sortKeys = [],\r\n        sortValues,\r\n        rollup,\r\n        nest;\r\n  \r\n    function apply(array, depth, createResult, setResult) {\r\n      if (depth >= keys.length) {\r\n        if (sortValues != null) array.sort(sortValues);\r\n        return rollup != null ? rollup(array) : array;\r\n      }\r\n  \r\n      var i = -1,\r\n          n = array.length,\r\n          key = keys[depth++],\r\n          keyValue,\r\n          value,\r\n          valuesByKey = map$1(),\r\n          values,\r\n          result = createResult();\r\n  \r\n      while (++i < n) {\r\n        if (values = valuesByKey.get(keyValue = key(value = array[i]) + \"\")) {\r\n          values.push(value);\r\n        } else {\r\n          valuesByKey.set(keyValue, [value]);\r\n        }\r\n      }\r\n  \r\n      valuesByKey.each(function(values, key) {\r\n        setResult(result, key, apply(values, depth, createResult, setResult));\r\n      });\r\n  \r\n      return result;\r\n    }\r\n  \r\n    function entries(map, depth) {\r\n      if (++depth > keys.length) return map;\r\n      var array, sortKey = sortKeys[depth - 1];\r\n      if (rollup != null && depth >= keys.length) array = map.entries();\r\n      else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });\r\n      return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;\r\n    }\r\n  \r\n    return nest = {\r\n      object: function(array) { return apply(array, 0, createObject, setObject); },\r\n      map: function(array) { return apply(array, 0, createMap, setMap); },\r\n      entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },\r\n      key: function(d) { keys.push(d); return nest; },\r\n      sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },\r\n      sortValues: function(order) { sortValues = order; return nest; },\r\n      rollup: function(f) { rollup = f; return nest; }\r\n    };\r\n  }\r\n  \r\n  function createObject() {\r\n    return {};\r\n  }\r\n  \r\n  function setObject(object, key, value) {\r\n    object[key] = value;\r\n  }\r\n  \r\n  function createMap() {\r\n    return map$1();\r\n  }\r\n  \r\n  function setMap(map, key, value) {\r\n    map.set(key, value);\r\n  }\r\n  \r\n  function Set() {}\r\n  \r\n  var proto = map$1.prototype;\r\n  \r\n  Set.prototype = set$2.prototype = {\r\n    constructor: Set,\r\n    has: proto.has,\r\n    add: function(value) {\r\n      value += \"\";\r\n      this[prefix + value] = value;\r\n      return this;\r\n    },\r\n    remove: proto.remove,\r\n    clear: proto.clear,\r\n    values: proto.keys,\r\n    size: proto.size,\r\n    empty: proto.empty,\r\n    each: proto.each\r\n  };\r\n  \r\n  function set$2(object, f) {\r\n    var set = new Set;\r\n  \r\n    // Copy constructor.\r\n    if (object instanceof Set) object.each(function(value) { set.add(value); });\r\n  \r\n    // Otherwise, assume it’s an array.\r\n    else if (object) {\r\n      var i = -1, n = object.length;\r\n      if (f == null) while (++i < n) set.add(object[i]);\r\n      else while (++i < n) set.add(f(object[i], i, object));\r\n    }\r\n  \r\n    return set;\r\n  }\r\n  \r\n  function keys(map) {\r\n    var keys = [];\r\n    for (var key in map) keys.push(key);\r\n    return keys;\r\n  }\r\n  \r\n  function values(map) {\r\n    var values = [];\r\n    for (var key in map) values.push(map[key]);\r\n    return values;\r\n  }\r\n  \r\n  function entries(map) {\r\n    var entries = [];\r\n    for (var key in map) entries.push({key: key, value: map[key]});\r\n    return entries;\r\n  }\r\n  \r\n  var array$2 = Array.prototype;\r\n  \r\n  var slice$3 = array$2.slice;\r\n  \r\n  function ascending$2(a, b) {\r\n    return a - b;\r\n  }\r\n  \r\n  function area(ring) {\r\n    var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];\r\n    while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];\r\n    return area;\r\n  }\r\n  \r\n  function constant$6(x) {\r\n    return function() {\r\n      return x;\r\n    };\r\n  }\r\n  \r\n  function contains(ring, hole) {\r\n    var i = -1, n = hole.length, c;\r\n    while (++i < n) if (c = ringContains(ring, hole[i])) return c;\r\n    return 0;\r\n  }\r\n  \r\n  function ringContains(ring, point) {\r\n    var x = point[0], y = point[1], contains = -1;\r\n    for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {\r\n      var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];\r\n      if (segmentContains(pi, pj, point)) return 0;\r\n      if (((yi > y) !== (yj > y)) && ((x < (xj - xi) * (y - yi) / (yj - yi) + xi))) contains = -contains;\r\n    }\r\n    return contains;\r\n  }\r\n  \r\n  function segmentContains(a, b, c) {\r\n    var i; return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);\r\n  }\r\n  \r\n  function collinear(a, b, c) {\r\n    return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);\r\n  }\r\n  \r\n  function within(p, q, r) {\r\n    return p <= q && q <= r || r <= q && q <= p;\r\n  }\r\n  \r\n  function noop$1() {}\r\n  \r\n  var cases = [\r\n    [],\r\n    [[[1.0, 1.5], [0.5, 1.0]]],\r\n    [[[1.5, 1.0], [1.0, 1.5]]],\r\n    [[[1.5, 1.0], [0.5, 1.0]]],\r\n    [[[1.0, 0.5], [1.5, 1.0]]],\r\n    [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]],\r\n    [[[1.0, 0.5], [1.0, 1.5]]],\r\n    [[[1.0, 0.5], [0.5, 1.0]]],\r\n    [[[0.5, 1.0], [1.0, 0.5]]],\r\n    [[[1.0, 1.5], [1.0, 0.5]]],\r\n    [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]],\r\n    [[[1.5, 1.0], [1.0, 0.5]]],\r\n    [[[0.5, 1.0], [1.5, 1.0]]],\r\n    [[[1.0, 1.5], [1.5, 1.0]]],\r\n    [[[0.5, 1.0], [1.0, 1.5]]],\r\n    []\r\n  ];\r\n  \r\n  function contours() {\r\n    var dx = 1,\r\n        dy = 1,\r\n        threshold = thresholdSturges,\r\n        smooth = smoothLinear;\r\n  \r\n    function contours(values) {\r\n      var tz = threshold(values);\r\n  \r\n      // Convert number of thresholds into uniform thresholds.\r\n      if (!Array.isArray(tz)) {\r\n        var domain = extent(values), start = domain[0], stop = domain[1];\r\n        tz = tickStep(start, stop, tz);\r\n        tz = sequence(Math.floor(start / tz) * tz, Math.floor(stop / tz) * tz, tz);\r\n      } else {\r\n        tz = tz.slice().sort(ascending$2);\r\n      }\r\n  \r\n      return tz.map(function(value) {\r\n        return contour(values, value);\r\n      });\r\n    }\r\n  \r\n    // Accumulate, smooth contour rings, assign holes to exterior rings.\r\n    // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js\r\n    function contour(values, value) {\r\n      var polygons = [],\r\n          holes = [];\r\n  \r\n      isorings(values, value, function(ring) {\r\n        smooth(ring, values, value);\r\n        if (area(ring) > 0) polygons.push([ring]);\r\n        else holes.push(ring);\r\n      });\r\n  \r\n      holes.forEach(function(hole) {\r\n        for (var i = 0, n = polygons.length, polygon; i < n; ++i) {\r\n          if (contains((polygon = polygons[i])[0], hole) !== -1) {\r\n            polygon.push(hole);\r\n            return;\r\n          }\r\n        }\r\n      });\r\n  \r\n      return {\r\n        type: \"MultiPolygon\",\r\n        value: value,\r\n        coordinates: polygons\r\n      };\r\n    }\r\n  \r\n    // Marching squares with isolines stitched into rings.\r\n    // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js\r\n    function isorings(values, value, callback) {\r\n      var fragmentByStart = new Array,\r\n          fragmentByEnd = new Array,\r\n          x, y, t0, t1, t2, t3;\r\n  \r\n      // Special case for the first row (y = -1, t2 = t3 = 0).\r\n      x = y = -1;\r\n      t1 = values[0] >= value;\r\n      cases[t1 << 1].forEach(stitch);\r\n      while (++x < dx - 1) {\r\n        t0 = t1, t1 = values[x + 1] >= value;\r\n        cases[t0 | t1 << 1].forEach(stitch);\r\n      }\r\n      cases[t1 << 0].forEach(stitch);\r\n  \r\n      // General case for the intermediate rows.\r\n      while (++y < dy - 1) {\r\n        x = -1;\r\n        t1 = values[y * dx + dx] >= value;\r\n        t2 = values[y * dx] >= value;\r\n        cases[t1 << 1 | t2 << 2].forEach(stitch);\r\n        while (++x < dx - 1) {\r\n          t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;\r\n          t3 = t2, t2 = values[y * dx + x + 1] >= value;\r\n          cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);\r\n        }\r\n        cases[t1 | t2 << 3].forEach(stitch);\r\n      }\r\n  \r\n      // Special case for the last row (y = dy - 1, t0 = t1 = 0).\r\n      x = -1;\r\n      t2 = values[y * dx] >= value;\r\n      cases[t2 << 2].forEach(stitch);\r\n      while (++x < dx - 1) {\r\n        t3 = t2, t2 = values[y * dx + x + 1] >= value;\r\n        cases[t2 << 2 | t3 << 3].forEach(stitch);\r\n      }\r\n      cases[t2 << 3].forEach(stitch);\r\n  \r\n      function stitch(line) {\r\n        var start = [line[0][0] + x, line[0][1] + y],\r\n            end = [line[1][0] + x, line[1][1] + y],\r\n            startIndex = index(start),\r\n            endIndex = index(end),\r\n            f, g;\r\n        if (f = fragmentByEnd[startIndex]) {\r\n          if (g = fragmentByStart[endIndex]) {\r\n            delete fragmentByEnd[f.end];\r\n            delete fragmentByStart[g.start];\r\n            if (f === g) {\r\n              f.ring.push(end);\r\n              callback(f.ring);\r\n            } else {\r\n              fragmentByStart[f.start] = fragmentByEnd[g.end] = {start: f.start, end: g.end, ring: f.ring.concat(g.ring)};\r\n            }\r\n          } else {\r\n            delete fragmentByEnd[f.end];\r\n            f.ring.push(end);\r\n            fragmentByEnd[f.end = endIndex] = f;\r\n          }\r\n        } else if (f = fragmentByStart[endIndex]) {\r\n          if (g = fragmentByEnd[startIndex]) {\r\n            delete fragmentByStart[f.start];\r\n            delete fragmentByEnd[g.end];\r\n            if (f === g) {\r\n              f.ring.push(end);\r\n              callback(f.ring);\r\n            } else {\r\n              fragmentByStart[g.start] = fragmentByEnd[f.end] = {start: g.start, end: f.end, ring: g.ring.concat(f.ring)};\r\n            }\r\n          } else {\r\n            delete fragmentByStart[f.start];\r\n            f.ring.unshift(start);\r\n            fragmentByStart[f.start = startIndex] = f;\r\n          }\r\n        } else {\r\n          fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {start: startIndex, end: endIndex, ring: [start, end]};\r\n        }\r\n      }\r\n    }\r\n  \r\n    function index(point) {\r\n      return point[0] * 2 + point[1] * (dx + 1) * 4;\r\n    }\r\n  \r\n    function smoothLinear(ring, values, value) {\r\n      ring.forEach(function(point) {\r\n        var x = point[0],\r\n            y = point[1],\r\n            xt = x | 0,\r\n            yt = y | 0,\r\n            v0,\r\n            v1 = values[yt * dx + xt];\r\n        if (x > 0 && x < dx && xt === x) {\r\n          v0 = values[yt * dx + xt - 1];\r\n          point[0] = x + (value - v0) / (v1 - v0) - 0.5;\r\n        }\r\n        if (y > 0 && y < dy && yt === y) {\r\n          v0 = values[(yt - 1) * dx + xt];\r\n          point[1] = y + (value - v0) / (v1 - v0) - 0.5;\r\n        }\r\n      });\r\n    }\r\n  \r\n    contours.contour = contour;\r\n  \r\n    contours.size = function(_) {\r\n      if (!arguments.length) return [dx, dy];\r\n      var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);\r\n      if (!(_0 > 0) || !(_1 > 0)) throw new Error(\"invalid size\");\r\n      return dx = _0, dy = _1, contours;\r\n    };\r\n  \r\n    contours.thresholds = function(_) {\r\n      return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant$6(slice$3.call(_)) : constant$6(_), contours) : threshold;\r\n    };\r\n  \r\n    contours.smooth = function(_) {\r\n      return arguments.length ? (smooth = _ ? smoothLinear : noop$1, contours) : smooth === smoothLinear;\r\n    };\r\n  \r\n    return contours;\r\n  }\r\n  \r\n  // TODO Optimize edge cases.\r\n  // TODO Optimize index calculation.\r\n  // TODO Optimize arguments.\r\n  function blurX(source, target, r) {\r\n    var n = source.width,\r\n        m = source.height,\r\n        w = (r << 1) + 1;\r\n    for (var j = 0; j < m; ++j) {\r\n      for (var i = 0, sr = 0; i < n + r; ++i) {\r\n        if (i < n) {\r\n          sr += source.data[i + j * n];\r\n        }\r\n        if (i >= r) {\r\n          if (i >= w) {\r\n            sr -= source.data[i - w + j * n];\r\n          }\r\n          target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  // TODO Optimize edge cases.\r\n  // TODO Optimize index calculation.\r\n  // TODO Optimize arguments.\r\n  function blurY(source, target, r) {\r\n    var n = source.width,\r\n        m = source.height,\r\n        w = (r << 1) + 1;\r\n    for (var i = 0; i < n; ++i) {\r\n      for (var j = 0, sr = 0; j < m + r; ++j) {\r\n        if (j < m) {\r\n          sr += source.data[i + j * n];\r\n        }\r\n        if (j >= r) {\r\n          if (j >= w) {\r\n            sr -= source.data[i + (j - w) * n];\r\n          }\r\n          target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  function defaultX(d) {\r\n    return d[0];\r\n  }\r\n  \r\n  function defaultY(d) {\r\n    return d[1];\r\n  }\r\n  \r\n  function defaultWeight() {\r\n    return 1;\r\n  }\r\n  \r\n  function density() {\r\n    var x = defaultX,\r\n        y = defaultY,\r\n        weight = defaultWeight,\r\n        dx = 960,\r\n        dy = 500,\r\n        r = 20, // blur radius\r\n        k = 2, // log2(grid cell size)\r\n        o = r * 3, // grid offset, to pad for blur\r\n        n = (dx + o * 2) >> k, // grid width\r\n        m = (dy + o * 2) >> k, // grid height\r\n        threshold = constant$6(20);\r\n  \r\n    function density(data) {\r\n      var values0 = new Float32Array(n * m),\r\n          values1 = new Float32Array(n * m);\r\n  \r\n      data.forEach(function(d, i, data) {\r\n        var xi = (+x(d, i, data) + o) >> k,\r\n            yi = (+y(d, i, data) + o) >> k,\r\n            wi = +weight(d, i, data);\r\n        if (xi >= 0 && xi < n && yi >= 0 && yi < m) {\r\n          values0[xi + yi * n] += wi;\r\n        }\r\n      });\r\n  \r\n      // TODO Optimize.\r\n      blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\r\n      blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\r\n      blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\r\n      blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\r\n      blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\r\n      blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\r\n  \r\n      var tz = threshold(values0);\r\n  \r\n      // Convert number of thresholds into uniform thresholds.\r\n      if (!Array.isArray(tz)) {\r\n        var stop = max(values0);\r\n        tz = tickStep(0, stop, tz);\r\n        tz = sequence(0, Math.floor(stop / tz) * tz, tz);\r\n        tz.shift();\r\n      }\r\n  \r\n      return contours()\r\n          .thresholds(tz)\r\n          .size([n, m])\r\n        (values0)\r\n          .map(transform);\r\n    }\r\n  \r\n    function transform(geometry) {\r\n      geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.\r\n      geometry.coordinates.forEach(transformPolygon);\r\n      return geometry;\r\n    }\r\n  \r\n    function transformPolygon(coordinates) {\r\n      coordinates.forEach(transformRing);\r\n    }\r\n  \r\n    function transformRing(coordinates) {\r\n      coordinates.forEach(transformPoint);\r\n    }\r\n  \r\n    // TODO Optimize.\r\n    function transformPoint(coordinates) {\r\n      coordinates[0] = coordinates[0] * Math.pow(2, k) - o;\r\n      coordinates[1] = coordinates[1] * Math.pow(2, k) - o;\r\n    }\r\n  \r\n    function resize() {\r\n      o = r * 3;\r\n      n = (dx + o * 2) >> k;\r\n      m = (dy + o * 2) >> k;\r\n      return density;\r\n    }\r\n  \r\n    density.x = function(_) {\r\n      return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$6(+_), density) : x;\r\n    };\r\n  \r\n    density.y = function(_) {\r\n      return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$6(+_), density) : y;\r\n    };\r\n  \r\n    density.weight = function(_) {\r\n      return arguments.length ? (weight = typeof _ === \"function\" ? _ : constant$6(+_), density) : weight;\r\n    };\r\n  \r\n    density.size = function(_) {\r\n      if (!arguments.length) return [dx, dy];\r\n      var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);\r\n      if (!(_0 >= 0) && !(_0 >= 0)) throw new Error(\"invalid size\");\r\n      return dx = _0, dy = _1, resize();\r\n    };\r\n  \r\n    density.cellSize = function(_) {\r\n      if (!arguments.length) return 1 << k;\r\n      if (!((_ = +_) >= 1)) throw new Error(\"invalid cell size\");\r\n      return k = Math.floor(Math.log(_) / Math.LN2), resize();\r\n    };\r\n  \r\n    density.thresholds = function(_) {\r\n      return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant$6(slice$3.call(_)) : constant$6(_), density) : threshold;\r\n    };\r\n  \r\n    density.bandwidth = function(_) {\r\n      if (!arguments.length) return Math.sqrt(r * (r + 1));\r\n      if (!((_ = +_) >= 0)) throw new Error(\"invalid bandwidth\");\r\n      return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();\r\n    };\r\n  \r\n    return density;\r\n  }\r\n  \r\n  var EOL = {},\r\n      EOF = {},\r\n      QUOTE = 34,\r\n      NEWLINE = 10,\r\n      RETURN = 13;\r\n  \r\n  function objectConverter(columns) {\r\n    return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\r\n      return JSON.stringify(name) + \": d[\" + i + \"] || \\\"\\\"\";\r\n    }).join(\",\") + \"}\");\r\n  }\r\n  \r\n  function customConverter(columns, f) {\r\n    var object = objectConverter(columns);\r\n    return function(row, i) {\r\n      return f(object(row), i, columns);\r\n    };\r\n  }\r\n  \r\n  // Compute unique columns in order of discovery.\r\n  function inferColumns(rows) {\r\n    var columnSet = Object.create(null),\r\n        columns = [];\r\n  \r\n    rows.forEach(function(row) {\r\n      for (var column in row) {\r\n        if (!(column in columnSet)) {\r\n          columns.push(columnSet[column] = column);\r\n        }\r\n      }\r\n    });\r\n  \r\n    return columns;\r\n  }\r\n  \r\n  function pad(value, width) {\r\n    var s = value + \"\", length = s.length;\r\n    return length < width ? new Array(width - length + 1).join(0) + s : s;\r\n  }\r\n  \r\n  function formatYear(year) {\r\n    return year < 0 ? \"-\" + pad(-year, 6)\r\n      : year > 9999 ? \"+\" + pad(year, 6)\r\n      : pad(year, 4);\r\n  }\r\n  \r\n  function formatDate(date) {\r\n    var hours = date.getUTCHours(),\r\n        minutes = date.getUTCMinutes(),\r\n        seconds = date.getUTCSeconds(),\r\n        milliseconds = date.getUTCMilliseconds();\r\n    return isNaN(date) ? \"Invalid Date\"\r\n        : formatYear(date.getUTCFullYear()) + \"-\" + pad(date.getUTCMonth() + 1, 2) + \"-\" + pad(date.getUTCDate(), 2)\r\n        + (milliseconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \".\" + pad(milliseconds, 3) + \"Z\"\r\n        : seconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \"Z\"\r\n        : minutes || hours ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \"Z\"\r\n        : \"\");\r\n  }\r\n  \r\n  function dsvFormat(delimiter) {\r\n    var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\r\n        DELIMITER = delimiter.charCodeAt(0);\r\n  \r\n    function parse(text, f) {\r\n      var convert, columns, rows = parseRows(text, function(row, i) {\r\n        if (convert) return convert(row, i - 1);\r\n        columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\r\n      });\r\n      rows.columns = columns || [];\r\n      return rows;\r\n    }\r\n  \r\n    function parseRows(text, f) {\r\n      var rows = [], // output rows\r\n          N = text.length,\r\n          I = 0, // current character index\r\n          n = 0, // current line number\r\n          t, // current token\r\n          eof = N <= 0, // current token followed by EOF?\r\n          eol = false; // current token followed by EOL?\r\n  \r\n      // Strip the trailing newline.\r\n      if (text.charCodeAt(N - 1) === NEWLINE) --N;\r\n      if (text.charCodeAt(N - 1) === RETURN) --N;\r\n  \r\n      function token() {\r\n        if (eof) return EOF;\r\n        if (eol) return eol = false, EOL;\r\n  \r\n        // Unescape quotes.\r\n        var i, j = I, c;\r\n        if (text.charCodeAt(j) === QUOTE) {\r\n          while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\r\n          if ((i = I) >= N) eof = true;\r\n          else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\r\n          else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\r\n          return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\r\n        }\r\n  \r\n        // Find next delimiter or newline.\r\n        while (I < N) {\r\n          if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\r\n          else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\r\n          else if (c !== DELIMITER) continue;\r\n          return text.slice(j, i);\r\n        }\r\n  \r\n        // Return last token before EOF.\r\n        return eof = true, text.slice(j, N);\r\n      }\r\n  \r\n      while ((t = token()) !== EOF) {\r\n        var row = [];\r\n        while (t !== EOL && t !== EOF) row.push(t), t = token();\r\n        if (f && (row = f(row, n++)) == null) continue;\r\n        rows.push(row);\r\n      }\r\n  \r\n      return rows;\r\n    }\r\n  \r\n    function preformatBody(rows, columns) {\r\n      return rows.map(function(row) {\r\n        return columns.map(function(column) {\r\n          return formatValue(row[column]);\r\n        }).join(delimiter);\r\n      });\r\n    }\r\n  \r\n    function format(rows, columns) {\r\n      if (columns == null) columns = inferColumns(rows);\r\n      return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join(\"\\n\");\r\n    }\r\n  \r\n    function formatBody(rows, columns) {\r\n      if (columns == null) columns = inferColumns(rows);\r\n      return preformatBody(rows, columns).join(\"\\n\");\r\n    }\r\n  \r\n    function formatRows(rows) {\r\n      return rows.map(formatRow).join(\"\\n\");\r\n    }\r\n  \r\n    function formatRow(row) {\r\n      return row.map(formatValue).join(delimiter);\r\n    }\r\n  \r\n    function formatValue(value) {\r\n      return value == null ? \"\"\r\n          : value instanceof Date ? formatDate(value)\r\n          : reFormat.test(value += \"\") ? \"\\\"\" + value.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\r\n          : value;\r\n    }\r\n  \r\n    return {\r\n      parse: parse,\r\n      parseRows: parseRows,\r\n      format: format,\r\n      formatBody: formatBody,\r\n      formatRows: formatRows,\r\n      formatRow: formatRow,\r\n      formatValue: formatValue\r\n    };\r\n  }\r\n  \r\n  var csv = dsvFormat(\",\");\r\n  \r\n  var csvParse = csv.parse;\r\n  var csvParseRows = csv.parseRows;\r\n  var csvFormat = csv.format;\r\n  var csvFormatBody = csv.formatBody;\r\n  var csvFormatRows = csv.formatRows;\r\n  var csvFormatRow = csv.formatRow;\r\n  var csvFormatValue = csv.formatValue;\r\n  \r\n  var tsv = dsvFormat(\"\\t\");\r\n  \r\n  var tsvParse = tsv.parse;\r\n  var tsvParseRows = tsv.parseRows;\r\n  var tsvFormat = tsv.format;\r\n  var tsvFormatBody = tsv.formatBody;\r\n  var tsvFormatRows = tsv.formatRows;\r\n  var tsvFormatRow = tsv.formatRow;\r\n  var tsvFormatValue = tsv.formatValue;\r\n  \r\n  function autoType(object) {\r\n    for (var key in object) {\r\n      var value = object[key].trim(), number, m;\r\n      if (!value) value = null;\r\n      else if (value === \"true\") value = true;\r\n      else if (value === \"false\") value = false;\r\n      else if (value === \"NaN\") value = NaN;\r\n      else if (!isNaN(number = +value)) value = number;\r\n      else if (m = value.match(/^([-+]\\d{2})?\\d{4}(-\\d{2}(-\\d{2})?)?(T\\d{2}:\\d{2}(:\\d{2}(\\.\\d{3})?)?(Z|[-+]\\d{2}:\\d{2})?)?$/)) {\r\n        if (fixtz && !!m[4] && !m[7]) value = value.replace(/-/g, \"/\").replace(/T/, \" \");\r\n        value = new Date(value);\r\n      }\r\n      else continue;\r\n      object[key] = value;\r\n    }\r\n    return object;\r\n  }\r\n  \r\n  // https://github.com/d3/d3-dsv/issues/45\r\n  var fixtz = new Date(\"2019-01-01T00:00\").getHours() || new Date(\"2019-07-01T00:00\").getHours();\r\n  \r\n  function responseBlob(response) {\r\n    if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\r\n    return response.blob();\r\n  }\r\n  \r\n  function blob(input, init) {\r\n    return fetch(input, init).then(responseBlob);\r\n  }\r\n  \r\n  function responseArrayBuffer(response) {\r\n    if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\r\n    return response.arrayBuffer();\r\n  }\r\n  \r\n  function buffer(input, init) {\r\n    return fetch(input, init).then(responseArrayBuffer);\r\n  }\r\n  \r\n  function responseText(response) {\r\n    if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\r\n    return response.text();\r\n  }\r\n  \r\n  function text(input, init) {\r\n    return fetch(input, init).then(responseText);\r\n  }\r\n  \r\n  function dsvParse(parse) {\r\n    return function(input, init, row) {\r\n      if (arguments.length === 2 && typeof init === \"function\") row = init, init = undefined;\r\n      return text(input, init).then(function(response) {\r\n        return parse(response, row);\r\n      });\r\n    };\r\n  }\r\n  \r\n  function dsv(delimiter, input, init, row) {\r\n    if (arguments.length === 3 && typeof init === \"function\") row = init, init = undefined;\r\n    var format = dsvFormat(delimiter);\r\n    return text(input, init).then(function(response) {\r\n      return format.parse(response, row);\r\n    });\r\n  }\r\n  \r\n  var csv$1 = dsvParse(csvParse);\r\n  var tsv$1 = dsvParse(tsvParse);\r\n  \r\n  function image(input, init) {\r\n    return new Promise(function(resolve, reject) {\r\n      var image = new Image;\r\n      for (var key in init) image[key] = init[key];\r\n      image.onerror = reject;\r\n      image.onload = function() { resolve(image); };\r\n      image.src = input;\r\n    });\r\n  }\r\n  \r\n  function responseJson(response) {\r\n    if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\r\n    return response.json();\r\n  }\r\n  \r\n  function json(input, init) {\r\n    return fetch(input, init).then(responseJson);\r\n  }\r\n  \r\n  function parser(type) {\r\n    return function(input, init)  {\r\n      return text(input, init).then(function(text) {\r\n        return (new DOMParser).parseFromString(text, type);\r\n      });\r\n    };\r\n  }\r\n  \r\n  var xml = parser(\"application/xml\");\r\n  \r\n  var html = parser(\"text/html\");\r\n  \r\n  var svg = parser(\"image/svg+xml\");\r\n  \r\n  function center$1(x, y) {\r\n    var nodes;\r\n  \r\n    if (x == null) x = 0;\r\n    if (y == null) y = 0;\r\n  \r\n    function force() {\r\n      var i,\r\n          n = nodes.length,\r\n          node,\r\n          sx = 0,\r\n          sy = 0;\r\n  \r\n      for (i = 0; i < n; ++i) {\r\n        node = nodes[i], sx += node.x, sy += node.y;\r\n      }\r\n  \r\n      for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {\r\n        node = nodes[i], node.x -= sx, node.y -= sy;\r\n      }\r\n    }\r\n  \r\n    force.initialize = function(_) {\r\n      nodes = _;\r\n    };\r\n  \r\n    force.x = function(_) {\r\n      return arguments.length ? (x = +_, force) : x;\r\n    };\r\n  \r\n    force.y = function(_) {\r\n      return arguments.length ? (y = +_, force) : y;\r\n    };\r\n  \r\n    return force;\r\n  }\r\n  \r\n  function constant$7(x) {\r\n    return function() {\r\n      return x;\r\n    };\r\n  }\r\n  \r\n  function jiggle() {\r\n    return (Math.random() - 0.5) * 1e-6;\r\n  }\r\n  \r\n  function tree_add(d) {\r\n    var x = +this._x.call(null, d),\r\n        y = +this._y.call(null, d);\r\n    return add(this.cover(x, y), x, y, d);\r\n  }\r\n  \r\n  function add(tree, x, y, d) {\r\n    if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\r\n  \r\n    var parent,\r\n        node = tree._root,\r\n        leaf = {data: d},\r\n        x0 = tree._x0,\r\n        y0 = tree._y0,\r\n        x1 = tree._x1,\r\n        y1 = tree._y1,\r\n        xm,\r\n        ym,\r\n        xp,\r\n        yp,\r\n        right,\r\n        bottom,\r\n        i,\r\n        j;\r\n  \r\n    // If the tree is empty, initialize the root as a leaf.\r\n    if (!node) return tree._root = leaf, tree;\r\n  \r\n    // Find the existing leaf for the new point, or add it.\r\n    while (node.length) {\r\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\r\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\r\n      if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\r\n    }\r\n  \r\n    // Is the new point is exactly coincident with the existing point?\r\n    xp = +tree._x.call(null, node.data);\r\n    yp = +tree._y.call(null, node.data);\r\n    if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\r\n  \r\n    // Otherwise, split the leaf node until the old and new point are separated.\r\n    do {\r\n      parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\r\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\r\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\r\n    } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));\r\n    return parent[j] = node, parent[i] = leaf, tree;\r\n  }\r\n  \r\n  function addAll(data) {\r\n    var d, i, n = data.length,\r\n        x,\r\n        y,\r\n        xz = new Array(n),\r\n        yz = new Array(n),\r\n        x0 = Infinity,\r\n        y0 = Infinity,\r\n        x1 = -Infinity,\r\n        y1 = -Infinity;\r\n  \r\n    // Compute the points and their extent.\r\n    for (i = 0; i < n; ++i) {\r\n      if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\r\n      xz[i] = x;\r\n      yz[i] = y;\r\n      if (x < x0) x0 = x;\r\n      if (x > x1) x1 = x;\r\n      if (y < y0) y0 = y;\r\n      if (y > y1) y1 = y;\r\n    }\r\n  \r\n    // If there were no (valid) points, abort.\r\n    if (x0 > x1 || y0 > y1) return this;\r\n  \r\n    // Expand the tree to cover the new points.\r\n    this.cover(x0, y0).cover(x1, y1);\r\n  \r\n    // Add the new points.\r\n    for (i = 0; i < n; ++i) {\r\n      add(this, xz[i], yz[i], data[i]);\r\n    }\r\n  \r\n    return this;\r\n  }\r\n  \r\n  function tree_cover(x, y) {\r\n    if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\r\n  \r\n    var x0 = this._x0,\r\n        y0 = this._y0,\r\n        x1 = this._x1,\r\n        y1 = this._y1;\r\n  \r\n    // If the quadtree has no extent, initialize them.\r\n    // Integer extent are necessary so that if we later double the extent,\r\n    // the existing quadrant boundaries don’t change due to floating point error!\r\n    if (isNaN(x0)) {\r\n      x1 = (x0 = Math.floor(x)) + 1;\r\n      y1 = (y0 = Math.floor(y)) + 1;\r\n    }\r\n  \r\n    // Otherwise, double repeatedly to cover.\r\n    else {\r\n      var z = x1 - x0,\r\n          node = this._root,\r\n          parent,\r\n          i;\r\n  \r\n      while (x0 > x || x >= x1 || y0 > y || y >= y1) {\r\n        i = (y < y0) << 1 | (x < x0);\r\n        parent = new Array(4), parent[i] = node, node = parent, z *= 2;\r\n        switch (i) {\r\n          case 0: x1 = x0 + z, y1 = y0 + z; break;\r\n          case 1: x0 = x1 - z, y1 = y0 + z; break;\r\n          case 2: x1 = x0 + z, y0 = y1 - z; break;\r\n          case 3: x0 = x1 - z, y0 = y1 - z; break;\r\n        }\r\n      }\r\n  \r\n      if (this._root && this._root.length) this._root = node;\r\n    }\r\n  \r\n    this._x0 = x0;\r\n    this._y0 = y0;\r\n    this._x1 = x1;\r\n    this._y1 = y1;\r\n    return this;\r\n  }\r\n  \r\n  function tree_data() {\r\n    var data = [];\r\n    this.visit(function(node) {\r\n      if (!node.length) do data.push(node.data); while (node = node.next)\r\n    });\r\n    return data;\r\n  }\r\n  \r\n  function tree_extent(_) {\r\n    return arguments.length\r\n        ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])\r\n        : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\r\n  }\r\n  \r\n  function Quad(node, x0, y0, x1, y1) {\r\n    this.node = node;\r\n    this.x0 = x0;\r\n    this.y0 = y0;\r\n    this.x1 = x1;\r\n    this.y1 = y1;\r\n  }\r\n  \r\n  function tree_find(x, y, radius) {\r\n    var data,\r\n        x0 = this._x0,\r\n        y0 = this._y0,\r\n        x1,\r\n        y1,\r\n        x2,\r\n        y2,\r\n        x3 = this._x1,\r\n        y3 = this._y1,\r\n        quads = [],\r\n        node = this._root,\r\n        q,\r\n        i;\r\n  \r\n    if (node) quads.push(new Quad(node, x0, y0, x3, y3));\r\n    if (radius == null) radius = Infinity;\r\n    else {\r\n      x0 = x - radius, y0 = y - radius;\r\n      x3 = x + radius, y3 = y + radius;\r\n      radius *= radius;\r\n    }\r\n  \r\n    while (q = quads.pop()) {\r\n  \r\n      // Stop searching if this quadrant can’t contain a closer node.\r\n      if (!(node = q.node)\r\n          || (x1 = q.x0) > x3\r\n          || (y1 = q.y0) > y3\r\n          || (x2 = q.x1) < x0\r\n          || (y2 = q.y1) < y0) continue;\r\n  \r\n      // Bisect the current quadrant.\r\n      if (node.length) {\r\n        var xm = (x1 + x2) / 2,\r\n            ym = (y1 + y2) / 2;\r\n  \r\n        quads.push(\r\n          new Quad(node[3], xm, ym, x2, y2),\r\n          new Quad(node[2], x1, ym, xm, y2),\r\n          new Quad(node[1], xm, y1, x2, ym),\r\n          new Quad(node[0], x1, y1, xm, ym)\r\n        );\r\n  \r\n        // Visit the closest quadrant first.\r\n        if (i = (y >= ym) << 1 | (x >= xm)) {\r\n          q = quads[quads.length - 1];\r\n          quads[quads.length - 1] = quads[quads.length - 1 - i];\r\n          quads[quads.length - 1 - i] = q;\r\n        }\r\n      }\r\n  \r\n      // Visit this point. (Visiting coincident points isn’t necessary!)\r\n      else {\r\n        var dx = x - +this._x.call(null, node.data),\r\n            dy = y - +this._y.call(null, node.data),\r\n            d2 = dx * dx + dy * dy;\r\n        if (d2 < radius) {\r\n          var d = Math.sqrt(radius = d2);\r\n          x0 = x - d, y0 = y - d;\r\n          x3 = x + d, y3 = y + d;\r\n          data = node.data;\r\n        }\r\n      }\r\n    }\r\n  \r\n    return data;\r\n  }\r\n  \r\n  function tree_remove(d) {\r\n    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\r\n  \r\n    var parent,\r\n        node = this._root,\r\n        retainer,\r\n        previous,\r\n        next,\r\n        x0 = this._x0,\r\n        y0 = this._y0,\r\n        x1 = this._x1,\r\n        y1 = this._y1,\r\n        x,\r\n        y,\r\n        xm,\r\n        ym,\r\n        right,\r\n        bottom,\r\n        i,\r\n        j;\r\n  \r\n    // If the tree is empty, initialize the root as a leaf.\r\n    if (!node) return this;\r\n  \r\n    // Find the leaf node for the point.\r\n    // While descending, also retain the deepest parent with a non-removed sibling.\r\n    if (node.length) while (true) {\r\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\r\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\r\n      if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\r\n      if (!node.length) break;\r\n      if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;\r\n    }\r\n  \r\n    // Find the point to remove.\r\n    while (node.data !== d) if (!(previous = node, node = node.next)) return this;\r\n    if (next = node.next) delete node.next;\r\n  \r\n    // If there are multiple coincident points, remove just the point.\r\n    if (previous) return (next ? previous.next = next : delete previous.next), this;\r\n  \r\n    // If this is the root point, remove it.\r\n    if (!parent) return this._root = next, this;\r\n  \r\n    // Remove this leaf.\r\n    next ? parent[i] = next : delete parent[i];\r\n  \r\n    // If the parent now contains exactly one leaf, collapse superfluous parents.\r\n    if ((node = parent[0] || parent[1] || parent[2] || parent[3])\r\n        && node === (parent[3] || parent[2] || parent[1] || parent[0])\r\n        && !node.length) {\r\n      if (retainer) retainer[j] = node;\r\n      else this._root = node;\r\n    }\r\n  \r\n    return this;\r\n  }\r\n  \r\n  function removeAll(data) {\r\n    for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\r\n    return this;\r\n  }\r\n  \r\n  function tree_root() {\r\n    return this._root;\r\n  }\r\n  \r\n  function tree_size() {\r\n    var size = 0;\r\n    this.visit(function(node) {\r\n      if (!node.length) do ++size; while (node = node.next)\r\n    });\r\n    return size;\r\n  }\r\n  \r\n  function tree_visit(callback) {\r\n    var quads = [], q, node = this._root, child, x0, y0, x1, y1;\r\n    if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));\r\n    while (q = quads.pop()) {\r\n      if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\r\n        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\r\n        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\r\n        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\r\n        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\r\n        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n  \r\n  function tree_visitAfter(callback) {\r\n    var quads = [], next = [], q;\r\n    if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));\r\n    while (q = quads.pop()) {\r\n      var node = q.node;\r\n      if (node.length) {\r\n        var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\r\n        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\r\n        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\r\n        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\r\n        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\r\n      }\r\n      next.push(q);\r\n    }\r\n    while (q = next.pop()) {\r\n      callback(q.node, q.x0, q.y0, q.x1, q.y1);\r\n    }\r\n    return this;\r\n  }\r\n  \r\n  function defaultX$1(d) {\r\n    return d[0];\r\n  }\r\n  \r\n  function tree_x(_) {\r\n    return arguments.length ? (this._x = _, this) : this._x;\r\n  }\r\n  \r\n  function defaultY$1(d) {\r\n    return d[1];\r\n  }\r\n  \r\n  function tree_y(_) {\r\n    return arguments.length ? (this._y = _, this) : this._y;\r\n  }\r\n  \r\n  function quadtree(nodes, x, y) {\r\n    var tree = new Quadtree(x == null ? defaultX$1 : x, y == null ? defaultY$1 : y, NaN, NaN, NaN, NaN);\r\n    return nodes == null ? tree : tree.addAll(nodes);\r\n  }\r\n  \r\n  function Quadtree(x, y, x0, y0, x1, y1) {\r\n    this._x = x;\r\n    this._y = y;\r\n    this._x0 = x0;\r\n    this._y0 = y0;\r\n    this._x1 = x1;\r\n    this._y1 = y1;\r\n    this._root = undefined;\r\n  }\r\n  \r\n  function leaf_copy(leaf) {\r\n    var copy = {data: leaf.data}, next = copy;\r\n    while (leaf = leaf.next) next = next.next = {data: leaf.data};\r\n    return copy;\r\n  }\r\n  \r\n  var treeProto = quadtree.prototype = Quadtree.prototype;\r\n  \r\n  treeProto.copy = function() {\r\n    var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\r\n        node = this._root,\r\n        nodes,\r\n        child;\r\n  \r\n    if (!node) return copy;\r\n  \r\n    if (!node.length) return copy._root = leaf_copy(node), copy;\r\n  \r\n    nodes = [{source: node, target: copy._root = new Array(4)}];\r\n    while (node = nodes.pop()) {\r\n      for (var i = 0; i < 4; ++i) {\r\n        if (child = node.source[i]) {\r\n          if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});\r\n          else node.target[i] = leaf_copy(child);\r\n        }\r\n      }\r\n    }\r\n  \r\n    return copy;\r\n  };\r\n  \r\n  treeProto.add = tree_add;\r\n  treeProto.addAll = addAll;\r\n  treeProto.cover = tree_cover;\r\n  treeProto.data = tree_data;\r\n  treeProto.extent = tree_extent;\r\n  treeProto.find = tree_find;\r\n  treeProto.remove = tree_remove;\r\n  treeProto.removeAll = removeAll;\r\n  treeProto.root = tree_root;\r\n  treeProto.size = tree_size;\r\n  treeProto.visit = tree_visit;\r\n  treeProto.visitAfter = tree_visitAfter;\r\n  treeProto.x = tree_x;\r\n  treeProto.y = tree_y;\r\n  \r\n  function x(d) {\r\n    return d.x + d.vx;\r\n  }\r\n  \r\n  function y(d) {\r\n    return d.y + d.vy;\r\n  }\r\n  \r\n  function collide(radius) {\r\n    var nodes,\r\n        radii,\r\n        strength = 1,\r\n        iterations = 1;\r\n  \r\n    if (typeof radius !== \"function\") radius = constant$7(radius == null ? 1 : +radius);\r\n  \r\n    function force() {\r\n      var i, n = nodes.length,\r\n          tree,\r\n          node,\r\n          xi,\r\n          yi,\r\n          ri,\r\n          ri2;\r\n  \r\n      for (var k = 0; k < iterations; ++k) {\r\n        tree = quadtree(nodes, x, y).visitAfter(prepare);\r\n        for (i = 0; i < n; ++i) {\r\n          node = nodes[i];\r\n          ri = radii[node.index], ri2 = ri * ri;\r\n          xi = node.x + node.vx;\r\n          yi = node.y + node.vy;\r\n          tree.visit(apply);\r\n        }\r\n      }\r\n  \r\n      function apply(quad, x0, y0, x1, y1) {\r\n        var data = quad.data, rj = quad.r, r = ri + rj;\r\n        if (data) {\r\n          if (data.index > node.index) {\r\n            var x = xi - data.x - data.vx,\r\n                y = yi - data.y - data.vy,\r\n                l = x * x + y * y;\r\n            if (l < r * r) {\r\n              if (x === 0) x = jiggle(), l += x * x;\r\n              if (y === 0) y = jiggle(), l += y * y;\r\n              l = (r - (l = Math.sqrt(l))) / l * strength;\r\n              node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\r\n              node.vy += (y *= l) * r;\r\n              data.vx -= x * (r = 1 - r);\r\n              data.vy -= y * r;\r\n            }\r\n          }\r\n          return;\r\n        }\r\n        return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\r\n      }\r\n    }\r\n  \r\n    function prepare(quad) {\r\n      if (quad.data) return quad.r = radii[quad.data.index];\r\n      for (var i = quad.r = 0; i < 4; ++i) {\r\n        if (quad[i] && quad[i].r > quad.r) {\r\n          quad.r = quad[i].r;\r\n        }\r\n      }\r\n    }\r\n  \r\n    function initialize() {\r\n      if (!nodes) return;\r\n      var i, n = nodes.length, node;\r\n      radii = new Array(n);\r\n      for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\r\n    }\r\n  \r\n    force.initialize = function(_) {\r\n      nodes = _;\r\n      initialize();\r\n    };\r\n  \r\n    force.iterations = function(_) {\r\n      return arguments.length ? (iterations = +_, force) : iterations;\r\n    };\r\n  \r\n    force.strength = function(_) {\r\n      return arguments.length ? (strength = +_, force) : strength;\r\n    };\r\n  \r\n    force.radius = function(_) {\r\n      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant$7(+_), initialize(), force) : radius;\r\n    };\r\n  \r\n    return force;\r\n  }\r\n  \r\n  function index(d) {\r\n    return d.index;\r\n  }\r\n  \r\n  function find(nodeById, nodeId) {\r\n    var node = nodeById.get(nodeId);\r\n    if (!node) throw new Error(\"missing: \" + nodeId);\r\n    return node;\r\n  }\r\n  \r\n  function link(links) {\r\n    var id = index,\r\n        strength = defaultStrength,\r\n        strengths,\r\n        distance = constant$7(30),\r\n        distances,\r\n        nodes,\r\n        count,\r\n        bias,\r\n        iterations = 1;\r\n  \r\n    if (links == null) links = [];\r\n  \r\n    function defaultStrength(link) {\r\n      return 1 / Math.min(count[link.source.index], count[link.target.index]);\r\n    }\r\n  \r\n    function force(alpha) {\r\n      for (var k = 0, n = links.length; k < iterations; ++k) {\r\n        for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\r\n          link = links[i], source = link.source, target = link.target;\r\n          x = target.x + target.vx - source.x - source.vx || jiggle();\r\n          y = target.y + target.vy - source.y - source.vy || jiggle();\r\n          l = Math.sqrt(x * x + y * y);\r\n          l = (l - distances[i]) / l * alpha * strengths[i];\r\n          x *= l, y *= l;\r\n          target.vx -= x * (b = bias[i]);\r\n          target.vy -= y * b;\r\n          source.vx += x * (b = 1 - b);\r\n          source.vy += y * b;\r\n        }\r\n      }\r\n    }\r\n  \r\n    function initialize() {\r\n      if (!nodes) return;\r\n  \r\n      var i,\r\n          n = nodes.length,\r\n          m = links.length,\r\n          nodeById = map$1(nodes, id),\r\n          link;\r\n  \r\n      for (i = 0, count = new Array(n); i < m; ++i) {\r\n        link = links[i], link.index = i;\r\n        if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\r\n        if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\r\n        count[link.source.index] = (count[link.source.index] || 0) + 1;\r\n        count[link.target.index] = (count[link.target.index] || 0) + 1;\r\n      }\r\n  \r\n      for (i = 0, bias = new Array(m); i < m; ++i) {\r\n        link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\r\n      }\r\n  \r\n      strengths = new Array(m), initializeStrength();\r\n      distances = new Array(m), initializeDistance();\r\n    }\r\n  \r\n    function initializeStrength() {\r\n      if (!nodes) return;\r\n  \r\n      for (var i = 0, n = links.length; i < n; ++i) {\r\n        strengths[i] = +strength(links[i], i, links);\r\n      }\r\n    }\r\n  \r\n    function initializeDistance() {\r\n      if (!nodes) return;\r\n  \r\n      for (var i = 0, n = links.length; i < n; ++i) {\r\n        distances[i] = +distance(links[i], i, links);\r\n      }\r\n    }\r\n  \r\n    force.initialize = function(_) {\r\n      nodes = _;\r\n      initialize();\r\n    };\r\n  \r\n    force.links = function(_) {\r\n      return arguments.length ? (links = _, initialize(), force) : links;\r\n    };\r\n  \r\n    force.id = function(_) {\r\n      return arguments.length ? (id = _, force) : id;\r\n    };\r\n  \r\n    force.iterations = function(_) {\r\n      return arguments.length ? (iterations = +_, force) : iterations;\r\n    };\r\n  \r\n    force.strength = function(_) {\r\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$7(+_), initializeStrength(), force) : strength;\r\n    };\r\n  \r\n    force.distance = function(_) {\r\n      return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant$7(+_), initializeDistance(), force) : distance;\r\n    };\r\n  \r\n    return force;\r\n  }\r\n  \r\n  function x$1(d) {\r\n    return d.x;\r\n  }\r\n  \r\n  function y$1(d) {\r\n    return d.y;\r\n  }\r\n  \r\n  var initialRadius = 10,\r\n      initialAngle = Math.PI * (3 - Math.sqrt(5));\r\n  \r\n  function simulation(nodes) {\r\n    var simulation,\r\n        alpha = 1,\r\n        alphaMin = 0.001,\r\n        alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\r\n        alphaTarget = 0,\r\n        velocityDecay = 0.6,\r\n        forces = map$1(),\r\n        stepper = timer(step),\r\n        event = dispatch(\"tick\", \"end\");\r\n  \r\n    if (nodes == null) nodes = [];\r\n  \r\n    function step() {\r\n      tick();\r\n      event.call(\"tick\", simulation);\r\n      if (alpha < alphaMin) {\r\n        stepper.stop();\r\n        event.call(\"end\", simulation);\r\n      }\r\n    }\r\n  \r\n    function tick(iterations) {\r\n      var i, n = nodes.length, node;\r\n  \r\n      if (iterations === undefined) iterations = 1;\r\n  \r\n      for (var k = 0; k < iterations; ++k) {\r\n        alpha += (alphaTarget - alpha) * alphaDecay;\r\n  \r\n        forces.each(function (force) {\r\n          force(alpha);\r\n        });\r\n  \r\n        for (i = 0; i < n; ++i) {\r\n          node = nodes[i];\r\n          if (node.fx == null) node.x += node.vx *= velocityDecay;\r\n          else node.x = node.fx, node.vx = 0;\r\n          if (node.fy == null) node.y += node.vy *= velocityDecay;\r\n          else node.y = node.fy, node.vy = 0;\r\n        }\r\n      }\r\n  \r\n      return simulation;\r\n    }\r\n  \r\n    function initializeNodes() {\r\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\r\n        node = nodes[i], node.index = i;\r\n        if (node.fx != null) node.x = node.fx;\r\n        if (node.fy != null) node.y = node.fy;\r\n        if (isNaN(node.x) || isNaN(node.y)) {\r\n          var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;\r\n          node.x = radius * Math.cos(angle);\r\n          node.y = radius * Math.sin(angle);\r\n        }\r\n        if (isNaN(node.vx) || isNaN(node.vy)) {\r\n          node.vx = node.vy = 0;\r\n        }\r\n      }\r\n    }\r\n  \r\n    function initializeForce(force) {\r\n      if (force.initialize) force.initialize(nodes);\r\n      return force;\r\n    }\r\n  \r\n    initializeNodes();\r\n  \r\n    return simulation = {\r\n      tick: tick,\r\n  \r\n      restart: function() {\r\n        return stepper.restart(step), simulation;\r\n      },\r\n  \r\n      stop: function() {\r\n        return stepper.stop(), simulation;\r\n      },\r\n  \r\n      nodes: function(_) {\r\n        return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;\r\n      },\r\n  \r\n      alpha: function(_) {\r\n        return arguments.length ? (alpha = +_, simulation) : alpha;\r\n      },\r\n  \r\n      alphaMin: function(_) {\r\n        return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\r\n      },\r\n  \r\n      alphaDecay: function(_) {\r\n        return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\r\n      },\r\n  \r\n      alphaTarget: function(_) {\r\n        return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\r\n      },\r\n  \r\n      velocityDecay: function(_) {\r\n        return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\r\n      },\r\n  \r\n      force: function(name, _) {\r\n        return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\r\n      },\r\n  \r\n      find: function(x, y, radius) {\r\n        var i = 0,\r\n            n = nodes.length,\r\n            dx,\r\n            dy,\r\n            d2,\r\n            node,\r\n            closest;\r\n  \r\n        if (radius == null) radius = Infinity;\r\n        else radius *= radius;\r\n  \r\n        for (i = 0; i < n; ++i) {\r\n          node = nodes[i];\r\n          dx = x - node.x;\r\n          dy = y - node.y;\r\n          d2 = dx * dx + dy * dy;\r\n          if (d2 < radius) closest = node, radius = d2;\r\n        }\r\n  \r\n        return closest;\r\n      },\r\n  \r\n      on: function(name, _) {\r\n        return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\r\n      }\r\n    };\r\n  }\r\n  \r\n  function manyBody() {\r\n    var nodes,\r\n        node,\r\n        alpha,\r\n        strength = constant$7(-30),\r\n        strengths,\r\n        distanceMin2 = 1,\r\n        distanceMax2 = Infinity,\r\n        theta2 = 0.81;\r\n  \r\n    function force(_) {\r\n      var i, n = nodes.length, tree = quadtree(nodes, x$1, y$1).visitAfter(accumulate);\r\n      for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\r\n    }\r\n  \r\n    function initialize() {\r\n      if (!nodes) return;\r\n      var i, n = nodes.length, node;\r\n      strengths = new Array(n);\r\n      for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\r\n    }\r\n  \r\n    function accumulate(quad) {\r\n      var strength = 0, q, c, weight = 0, x, y, i;\r\n  \r\n      // For internal nodes, accumulate forces from child quadrants.\r\n      if (quad.length) {\r\n        for (x = y = i = 0; i < 4; ++i) {\r\n          if ((q = quad[i]) && (c = Math.abs(q.value))) {\r\n            strength += q.value, weight += c, x += c * q.x, y += c * q.y;\r\n          }\r\n        }\r\n        quad.x = x / weight;\r\n        quad.y = y / weight;\r\n      }\r\n  \r\n      // For leaf nodes, accumulate forces from coincident quadrants.\r\n      else {\r\n        q = quad;\r\n        q.x = q.data.x;\r\n        q.y = q.data.y;\r\n        do strength += strengths[q.data.index];\r\n        while (q = q.next);\r\n      }\r\n  \r\n      quad.value = strength;\r\n    }\r\n  \r\n    function apply(quad, x1, _, x2) {\r\n      if (!quad.value) return true;\r\n  \r\n      var x = quad.x - node.x,\r\n          y = quad.y - node.y,\r\n          w = x2 - x1,\r\n          l = x * x + y * y;\r\n  \r\n      // Apply the Barnes-Hut approximation if possible.\r\n      // Limit forces for very close nodes; randomize direction if coincident.\r\n      if (w * w / theta2 < l) {\r\n        if (l < distanceMax2) {\r\n          if (x === 0) x = jiggle(), l += x * x;\r\n          if (y === 0) y = jiggle(), l += y * y;\r\n          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\r\n          node.vx += x * quad.value * alpha / l;\r\n          node.vy += y * quad.value * alpha / l;\r\n        }\r\n        return true;\r\n      }\r\n  \r\n      // Otherwise, process points directly.\r\n      else if (quad.length || l >= distanceMax2) return;\r\n  \r\n      // Limit forces for very close nodes; randomize direction if coincident.\r\n      if (quad.data !== node || quad.next) {\r\n        if (x === 0) x = jiggle(), l += x * x;\r\n        if (y === 0) y = jiggle(), l += y * y;\r\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\r\n      }\r\n  \r\n      do if (quad.data !== node) {\r\n        w = strengths[quad.data.index] * alpha / l;\r\n        node.vx += x * w;\r\n        node.vy += y * w;\r\n      } while (quad = quad.next);\r\n    }\r\n  \r\n    force.initialize = function(_) {\r\n      nodes = _;\r\n      initialize();\r\n    };\r\n  \r\n    force.strength = function(_) {\r\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$7(+_), initialize(), force) : strength;\r\n    };\r\n  \r\n    force.distanceMin = function(_) {\r\n      return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\r\n    };\r\n  \r\n    force.distanceMax = function(_) {\r\n      return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\r\n    };\r\n  \r\n    force.theta = function(_) {\r\n      return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\r\n    };\r\n  \r\n    return force;\r\n  }\r\n  \r\n  function radial(radius, x, y) {\r\n    var nodes,\r\n        strength = constant$7(0.1),\r\n        strengths,\r\n        radiuses;\r\n  \r\n    if (typeof radius !== \"function\") radius = constant$7(+radius);\r\n    if (x == null) x = 0;\r\n    if (y == null) y = 0;\r\n  \r\n    function force(alpha) {\r\n      for (var i = 0, n = nodes.length; i < n; ++i) {\r\n        var node = nodes[i],\r\n            dx = node.x - x || 1e-6,\r\n            dy = node.y - y || 1e-6,\r\n            r = Math.sqrt(dx * dx + dy * dy),\r\n            k = (radiuses[i] - r) * strengths[i] * alpha / r;\r\n        node.vx += dx * k;\r\n        node.vy += dy * k;\r\n      }\r\n    }\r\n  \r\n    function initialize() {\r\n      if (!nodes) return;\r\n      var i, n = nodes.length;\r\n      strengths = new Array(n);\r\n      radiuses = new Array(n);\r\n      for (i = 0; i < n; ++i) {\r\n        radiuses[i] = +radius(nodes[i], i, nodes);\r\n        strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);\r\n      }\r\n    }\r\n  \r\n    force.initialize = function(_) {\r\n      nodes = _, initialize();\r\n    };\r\n  \r\n    force.strength = function(_) {\r\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$7(+_), initialize(), force) : strength;\r\n    };\r\n  \r\n    force.radius = function(_) {\r\n      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant$7(+_), initialize(), force) : radius;\r\n    };\r\n  \r\n    force.x = function(_) {\r\n      return arguments.length ? (x = +_, force) : x;\r\n    };\r\n  \r\n    force.y = function(_) {\r\n      return arguments.length ? (y = +_, force) : y;\r\n    };\r\n  \r\n    return force;\r\n  }\r\n  \r\n  function x$2(x) {\r\n    var strength = constant$7(0.1),\r\n        nodes,\r\n        strengths,\r\n        xz;\r\n  \r\n    if (typeof x !== \"function\") x = constant$7(x == null ? 0 : +x);\r\n  \r\n    function force(alpha) {\r\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\r\n        node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\r\n      }\r\n    }\r\n  \r\n    function initialize() {\r\n      if (!nodes) return;\r\n      var i, n = nodes.length;\r\n      strengths = new Array(n);\r\n      xz = new Array(n);\r\n      for (i = 0; i < n; ++i) {\r\n        strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\r\n      }\r\n    }\r\n  \r\n    force.initialize = function(_) {\r\n      nodes = _;\r\n      initialize();\r\n    };\r\n  \r\n    force.strength = function(_) {\r\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$7(+_), initialize(), force) : strength;\r\n    };\r\n  \r\n    force.x = function(_) {\r\n      return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$7(+_), initialize(), force) : x;\r\n    };\r\n  \r\n    return force;\r\n  }\r\n  \r\n  function y$2(y) {\r\n    var strength = constant$7(0.1),\r\n        nodes,\r\n        strengths,\r\n        yz;\r\n  \r\n    if (typeof y !== \"function\") y = constant$7(y == null ? 0 : +y);\r\n  \r\n    function force(alpha) {\r\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\r\n        node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\r\n      }\r\n    }\r\n  \r\n    function initialize() {\r\n      if (!nodes) return;\r\n      var i, n = nodes.length;\r\n      strengths = new Array(n);\r\n      yz = new Array(n);\r\n      for (i = 0; i < n; ++i) {\r\n        strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\r\n      }\r\n    }\r\n  \r\n    force.initialize = function(_) {\r\n      nodes = _;\r\n      initialize();\r\n    };\r\n  \r\n    force.strength = function(_) {\r\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$7(+_), initialize(), force) : strength;\r\n    };\r\n  \r\n    force.y = function(_) {\r\n      return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$7(+_), initialize(), force) : y;\r\n    };\r\n  \r\n    return force;\r\n  }\r\n  \r\n  // Computes the decimal coefficient and exponent of the specified number x with\r\n  // significant digits p, where x is positive and p is in [1, 21] or undefined.\r\n  // For example, formatDecimal(1.23) returns [\"123\", 0].\r\n  function formatDecimal(x, p) {\r\n    if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\r\n    var i, coefficient = x.slice(0, i);\r\n  \r\n    // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\r\n    // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\r\n    return [\r\n      coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\r\n      +x.slice(i + 1)\r\n    ];\r\n  }\r\n  \r\n  function exponent$1(x) {\r\n    return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\r\n  }\r\n  \r\n  function formatGroup(grouping, thousands) {\r\n    return function(value, width) {\r\n      var i = value.length,\r\n          t = [],\r\n          j = 0,\r\n          g = grouping[0],\r\n          length = 0;\r\n  \r\n      while (i > 0 && g > 0) {\r\n        if (length + g + 1 > width) g = Math.max(1, width - length);\r\n        t.push(value.substring(i -= g, i + g));\r\n        if ((length += g + 1) > width) break;\r\n        g = grouping[j = (j + 1) % grouping.length];\r\n      }\r\n  \r\n      return t.reverse().join(thousands);\r\n    };\r\n  }\r\n  \r\n  function formatNumerals(numerals) {\r\n    return function(value) {\r\n      return value.replace(/[0-9]/g, function(i) {\r\n        return numerals[+i];\r\n      });\r\n    };\r\n  }\r\n  \r\n  // [[fill]align][sign][symbol][0][width][,][.precision][~][type]\r\n  var re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\r\n  \r\n  function formatSpecifier(specifier) {\r\n    if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\r\n    var match;\r\n    return new FormatSpecifier({\r\n      fill: match[1],\r\n      align: match[2],\r\n      sign: match[3],\r\n      symbol: match[4],\r\n      zero: match[5],\r\n      width: match[6],\r\n      comma: match[7],\r\n      precision: match[8] && match[8].slice(1),\r\n      trim: match[9],\r\n      type: match[10]\r\n    });\r\n  }\r\n  \r\n  formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\r\n  \r\n  function FormatSpecifier(specifier) {\r\n    this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\r\n    this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\r\n    this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\r\n    this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\r\n    this.zero = !!specifier.zero;\r\n    this.width = specifier.width === undefined ? undefined : +specifier.width;\r\n    this.comma = !!specifier.comma;\r\n    this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\r\n    this.trim = !!specifier.trim;\r\n    this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\r\n  }\r\n  \r\n  FormatSpecifier.prototype.toString = function() {\r\n    return this.fill\r\n        + this.align\r\n        + this.sign\r\n        + this.symbol\r\n        + (this.zero ? \"0\" : \"\")\r\n        + (this.width === undefined ? \"\" : Math.max(1, this.width | 0))\r\n        + (this.comma ? \",\" : \"\")\r\n        + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0))\r\n        + (this.trim ? \"~\" : \"\")\r\n        + this.type;\r\n  };\r\n  \r\n  // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\r\n  function formatTrim(s) {\r\n    out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\r\n      switch (s[i]) {\r\n        case \".\": i0 = i1 = i; break;\r\n        case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\r\n        default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;\r\n      }\r\n    }\r\n    return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\r\n  }\r\n  \r\n  var prefixExponent;\r\n  \r\n  function formatPrefixAuto(x, p) {\r\n    var d = formatDecimal(x, p);\r\n    if (!d) return x + \"\";\r\n    var coefficient = d[0],\r\n        exponent = d[1],\r\n        i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\r\n        n = coefficient.length;\r\n    return i === n ? coefficient\r\n        : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\r\n        : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\r\n        : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\r\n  }\r\n  \r\n  function formatRounded(x, p) {\r\n    var d = formatDecimal(x, p);\r\n    if (!d) return x + \"\";\r\n    var coefficient = d[0],\r\n        exponent = d[1];\r\n    return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\r\n        : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\r\n        : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\r\n  }\r\n  \r\n  var formatTypes = {\r\n    \"%\": function(x, p) { return (x * 100).toFixed(p); },\r\n    \"b\": function(x) { return Math.round(x).toString(2); },\r\n    \"c\": function(x) { return x + \"\"; },\r\n    \"d\": function(x) { return Math.round(x).toString(10); },\r\n    \"e\": function(x, p) { return x.toExponential(p); },\r\n    \"f\": function(x, p) { return x.toFixed(p); },\r\n    \"g\": function(x, p) { return x.toPrecision(p); },\r\n    \"o\": function(x) { return Math.round(x).toString(8); },\r\n    \"p\": function(x, p) { return formatRounded(x * 100, p); },\r\n    \"r\": formatRounded,\r\n    \"s\": formatPrefixAuto,\r\n    \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\r\n    \"x\": function(x) { return Math.round(x).toString(16); }\r\n  };\r\n  \r\n  function identity$3(x) {\r\n    return x;\r\n  }\r\n  \r\n  var map$2 = Array.prototype.map,\r\n      prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"\\xB5\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\r\n  \r\n  function formatLocale(locale) {\r\n    var group = locale.grouping === undefined || locale.thousands === undefined ? identity$3 : formatGroup(map$2.call(locale.grouping, Number), locale.thousands + \"\"),\r\n        currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\r\n        currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\r\n        decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\r\n        numerals = locale.numerals === undefined ? identity$3 : formatNumerals(map$2.call(locale.numerals, String)),\r\n        percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\r\n        minus = locale.minus === undefined ? \"-\" : locale.minus + \"\",\r\n        nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\r\n  \r\n    function newFormat(specifier) {\r\n      specifier = formatSpecifier(specifier);\r\n  \r\n      var fill = specifier.fill,\r\n          align = specifier.align,\r\n          sign = specifier.sign,\r\n          symbol = specifier.symbol,\r\n          zero = specifier.zero,\r\n          width = specifier.width,\r\n          comma = specifier.comma,\r\n          precision = specifier.precision,\r\n          trim = specifier.trim,\r\n          type = specifier.type;\r\n  \r\n      // The \"n\" type is an alias for \",g\".\r\n      if (type === \"n\") comma = true, type = \"g\";\r\n  \r\n      // The \"\" type, and any invalid type, is an alias for \".12~g\".\r\n      else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\r\n  \r\n      // If zero fill is specified, padding goes after sign and before digits.\r\n      if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\r\n  \r\n      // Compute the prefix and suffix.\r\n      // For SI-prefix, the suffix is lazily computed.\r\n      var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\r\n          suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\r\n  \r\n      // What format function should we use?\r\n      // Is this an integer type?\r\n      // Can this type generate exponential notation?\r\n      var formatType = formatTypes[type],\r\n          maybeSuffix = /[defgprs%]/.test(type);\r\n  \r\n      // Set the default precision if not specified,\r\n      // or clamp the specified precision to the supported range.\r\n      // For significant precision, it must be in [1, 21].\r\n      // For fixed precision, it must be in [0, 20].\r\n      precision = precision === undefined ? 6\r\n          : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\r\n          : Math.max(0, Math.min(20, precision));\r\n  \r\n      function format(value) {\r\n        var valuePrefix = prefix,\r\n            valueSuffix = suffix,\r\n            i, n, c;\r\n  \r\n        if (type === \"c\") {\r\n          valueSuffix = formatType(value) + valueSuffix;\r\n          value = \"\";\r\n        } else {\r\n          value = +value;\r\n  \r\n          // Determine the sign. -0 is not less than 0, but 1 / -0 is!\r\n          var valueNegative = value < 0 || 1 / value < 0;\r\n  \r\n          // Perform the initial formatting.\r\n          value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\r\n  \r\n          // Trim insignificant zeros.\r\n          if (trim) value = formatTrim(value);\r\n  \r\n          // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\r\n          if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false;\r\n  \r\n          // Compute the prefix and suffix.\r\n          valuePrefix = (valueNegative ? (sign === \"(\" ? sign : minus) : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\r\n          valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\r\n  \r\n          // Break the formatted value into the integer “value” part that can be\r\n          // grouped, and fractional or exponential “suffix” part that is not.\r\n          if (maybeSuffix) {\r\n            i = -1, n = value.length;\r\n            while (++i < n) {\r\n              if (c = value.charCodeAt(i), 48 > c || c > 57) {\r\n                valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\r\n                value = value.slice(0, i);\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n  \r\n        // If the fill character is not \"0\", grouping is applied before padding.\r\n        if (comma && !zero) value = group(value, Infinity);\r\n  \r\n        // Compute the padding.\r\n        var length = valuePrefix.length + value.length + valueSuffix.length,\r\n            padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\r\n  \r\n        // If the fill character is \"0\", grouping is applied after padding.\r\n        if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\r\n  \r\n        // Reconstruct the final output based on the desired alignment.\r\n        switch (align) {\r\n          case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\r\n          case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\r\n          case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\r\n          default: value = padding + valuePrefix + value + valueSuffix; break;\r\n        }\r\n  \r\n        return numerals(value);\r\n      }\r\n  \r\n      format.toString = function() {\r\n        return specifier + \"\";\r\n      };\r\n  \r\n      return format;\r\n    }\r\n  \r\n    function formatPrefix(specifier, value) {\r\n      var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\r\n          e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3,\r\n          k = Math.pow(10, -e),\r\n          prefix = prefixes[8 + e / 3];\r\n      return function(value) {\r\n        return f(k * value) + prefix;\r\n      };\r\n    }\r\n  \r\n    return {\r\n      format: newFormat,\r\n      formatPrefix: formatPrefix\r\n    };\r\n  }\r\n  \r\n  var locale;\r\n  \r\n  defaultLocale({\r\n    decimal: \".\",\r\n    thousands: \",\",\r\n    grouping: [3],\r\n    currency: [\"$\", \"\"],\r\n    minus: \"-\"\r\n  });\r\n  \r\n  function defaultLocale(definition) {\r\n    locale = formatLocale(definition);\r\n    exports.format = locale.format;\r\n    exports.formatPrefix = locale.formatPrefix;\r\n    return locale;\r\n  }\r\n  \r\n  function precisionFixed(step) {\r\n    return Math.max(0, -exponent$1(Math.abs(step)));\r\n  }\r\n  \r\n  function precisionPrefix(step, value) {\r\n    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));\r\n  }\r\n  \r\n  function precisionRound(step, max) {\r\n    step = Math.abs(step), max = Math.abs(max) - step;\r\n    return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;\r\n  }\r\n  \r\n  // Adds floating point numbers with twice the normal precision.\r\n  // Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\r\n  // Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\r\n  // 305–363 (1997).\r\n  // Code adapted from GeographicLib by Charles F. F. Karney,\r\n  // http://geographiclib.sourceforge.net/\r\n  \r\n  function adder() {\r\n    return new Adder;\r\n  }\r\n  \r\n  function Adder() {\r\n    this.reset();\r\n  }\r\n  \r\n  Adder.prototype = {\r\n    constructor: Adder,\r\n    reset: function() {\r\n      this.s = // rounded value\r\n      this.t = 0; // exact error\r\n    },\r\n    add: function(y) {\r\n      add$1(temp, y, this.t);\r\n      add$1(this, temp.s, this.s);\r\n      if (this.s) this.t += temp.t;\r\n      else this.s = temp.t;\r\n    },\r\n    valueOf: function() {\r\n      return this.s;\r\n    }\r\n  };\r\n  \r\n  var temp = new Adder;\r\n  \r\n  function add$1(adder, a, b) {\r\n    var x = adder.s = a + b,\r\n        bv = x - a,\r\n        av = x - bv;\r\n    adder.t = (a - av) + (b - bv);\r\n  }\r\n  \r\n  var epsilon$2 = 1e-6;\r\n  var epsilon2$1 = 1e-12;\r\n  var pi$3 = Math.PI;\r\n  var halfPi$2 = pi$3 / 2;\r\n  var quarterPi = pi$3 / 4;\r\n  var tau$3 = pi$3 * 2;\r\n  \r\n  var degrees$1 = 180 / pi$3;\r\n  var radians = pi$3 / 180;\r\n  \r\n  var abs = Math.abs;\r\n  var atan = Math.atan;\r\n  var atan2 = Math.atan2;\r\n  var cos$1 = Math.cos;\r\n  var ceil = Math.ceil;\r\n  var exp = Math.exp;\r\n  var log = Math.log;\r\n  var pow = Math.pow;\r\n  var sin$1 = Math.sin;\r\n  var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\r\n  var sqrt = Math.sqrt;\r\n  var tan = Math.tan;\r\n  \r\n  function acos(x) {\r\n    return x > 1 ? 0 : x < -1 ? pi$3 : Math.acos(x);\r\n  }\r\n  \r\n  function asin(x) {\r\n    return x > 1 ? halfPi$2 : x < -1 ? -halfPi$2 : Math.asin(x);\r\n  }\r\n  \r\n  function haversin(x) {\r\n    return (x = sin$1(x / 2)) * x;\r\n  }\r\n  \r\n  function noop$2() {}\r\n  \r\n  function streamGeometry(geometry, stream) {\r\n    if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\r\n      streamGeometryType[geometry.type](geometry, stream);\r\n    }\r\n  }\r\n  \r\n  var streamObjectType = {\r\n    Feature: function(object, stream) {\r\n      streamGeometry(object.geometry, stream);\r\n    },\r\n    FeatureCollection: function(object, stream) {\r\n      var features = object.features, i = -1, n = features.length;\r\n      while (++i < n) streamGeometry(features[i].geometry, stream);\r\n    }\r\n  };\r\n  \r\n  var streamGeometryType = {\r\n    Sphere: function(object, stream) {\r\n      stream.sphere();\r\n    },\r\n    Point: function(object, stream) {\r\n      object = object.coordinates;\r\n      stream.point(object[0], object[1], object[2]);\r\n    },\r\n    MultiPoint: function(object, stream) {\r\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\r\n      while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\r\n    },\r\n    LineString: function(object, stream) {\r\n      streamLine(object.coordinates, stream, 0);\r\n    },\r\n    MultiLineString: function(object, stream) {\r\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\r\n      while (++i < n) streamLine(coordinates[i], stream, 0);\r\n    },\r\n    Polygon: function(object, stream) {\r\n      streamPolygon(object.coordinates, stream);\r\n    },\r\n    MultiPolygon: function(object, stream) {\r\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\r\n      while (++i < n) streamPolygon(coordinates[i], stream);\r\n    },\r\n    GeometryCollection: function(object, stream) {\r\n      var geometries = object.geometries, i = -1, n = geometries.length;\r\n      while (++i < n) streamGeometry(geometries[i], stream);\r\n    }\r\n  };\r\n  \r\n  function streamLine(coordinates, stream, closed) {\r\n    var i = -1, n = coordinates.length - closed, coordinate;\r\n    stream.lineStart();\r\n    while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\r\n    stream.lineEnd();\r\n  }\r\n  \r\n  function streamPolygon(coordinates, stream) {\r\n    var i = -1, n = coordinates.length;\r\n    stream.polygonStart();\r\n    while (++i < n) streamLine(coordinates[i], stream, 1);\r\n    stream.polygonEnd();\r\n  }\r\n  \r\n  function geoStream(object, stream) {\r\n    if (object && streamObjectType.hasOwnProperty(object.type)) {\r\n      streamObjectType[object.type](object, stream);\r\n    } else {\r\n      streamGeometry(object, stream);\r\n    }\r\n  }\r\n  \r\n  var areaRingSum = adder();\r\n  \r\n  var areaSum = adder(),\r\n      lambda00,\r\n      phi00,\r\n      lambda0,\r\n      cosPhi0,\r\n      sinPhi0;\r\n  \r\n  var areaStream = {\r\n    point: noop$2,\r\n    lineStart: noop$2,\r\n    lineEnd: noop$2,\r\n    polygonStart: function() {\r\n      areaRingSum.reset();\r\n      areaStream.lineStart = areaRingStart;\r\n      areaStream.lineEnd = areaRingEnd;\r\n    },\r\n    polygonEnd: function() {\r\n      var areaRing = +areaRingSum;\r\n      areaSum.add(areaRing < 0 ? tau$3 + areaRing : areaRing);\r\n      this.lineStart = this.lineEnd = this.point = noop$2;\r\n    },\r\n    sphere: function() {\r\n      areaSum.add(tau$3);\r\n    }\r\n  };\r\n  \r\n  function areaRingStart() {\r\n    areaStream.point = areaPointFirst;\r\n  }\r\n  \r\n  function areaRingEnd() {\r\n    areaPoint(lambda00, phi00);\r\n  }\r\n  \r\n  function areaPointFirst(lambda, phi) {\r\n    areaStream.point = areaPoint;\r\n    lambda00 = lambda, phi00 = phi;\r\n    lambda *= radians, phi *= radians;\r\n    lambda0 = lambda, cosPhi0 = cos$1(phi = phi / 2 + quarterPi), sinPhi0 = sin$1(phi);\r\n  }\r\n  \r\n  function areaPoint(lambda, phi) {\r\n    lambda *= radians, phi *= radians;\r\n    phi = phi / 2 + quarterPi; // half the angular distance from south pole\r\n  \r\n    // Spherical excess E for a spherical triangle with vertices: south pole,\r\n    // previous point, current point.  Uses a formula derived from Cagnoli’s\r\n    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\r\n    var dLambda = lambda - lambda0,\r\n        sdLambda = dLambda >= 0 ? 1 : -1,\r\n        adLambda = sdLambda * dLambda,\r\n        cosPhi = cos$1(phi),\r\n        sinPhi = sin$1(phi),\r\n        k = sinPhi0 * sinPhi,\r\n        u = cosPhi0 * cosPhi + k * cos$1(adLambda),\r\n        v = k * sdLambda * sin$1(adLambda);\r\n    areaRingSum.add(atan2(v, u));\r\n  \r\n    // Advance the previous points.\r\n    lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\r\n  }\r\n  \r\n  function area$1(object) {\r\n    areaSum.reset();\r\n    geoStream(object, areaStream);\r\n    return areaSum * 2;\r\n  }\r\n  \r\n  function spherical(cartesian) {\r\n    return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\r\n  }\r\n  \r\n  function cartesian(spherical) {\r\n    var lambda = spherical[0], phi = spherical[1], cosPhi = cos$1(phi);\r\n    return [cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi)];\r\n  }\r\n  \r\n  function cartesianDot(a, b) {\r\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n  }\r\n  \r\n  function cartesianCross(a, b) {\r\n    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\r\n  }\r\n  \r\n  // TODO return a\r\n  function cartesianAddInPlace(a, b) {\r\n    a[0] += b[0], a[1] += b[1], a[2] += b[2];\r\n  }\r\n  \r\n  function cartesianScale(vector, k) {\r\n    return [vector[0] * k, vector[1] * k, vector[2] * k];\r\n  }\r\n  \r\n  // TODO return d\r\n  function cartesianNormalizeInPlace(d) {\r\n    var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\r\n    d[0] /= l, d[1] /= l, d[2] /= l;\r\n  }\r\n  \r\n  var lambda0$1, phi0, lambda1, phi1, // bounds\r\n      lambda2, // previous lambda-coordinate\r\n      lambda00$1, phi00$1, // first point\r\n      p0, // previous 3D point\r\n      deltaSum = adder(),\r\n      ranges,\r\n      range;\r\n  \r\n  var boundsStream = {\r\n    point: boundsPoint,\r\n    lineStart: boundsLineStart,\r\n    lineEnd: boundsLineEnd,\r\n    polygonStart: function() {\r\n      boundsStream.point = boundsRingPoint;\r\n      boundsStream.lineStart = boundsRingStart;\r\n      boundsStream.lineEnd = boundsRingEnd;\r\n      deltaSum.reset();\r\n      areaStream.polygonStart();\r\n    },\r\n    polygonEnd: function() {\r\n      areaStream.polygonEnd();\r\n      boundsStream.point = boundsPoint;\r\n      boundsStream.lineStart = boundsLineStart;\r\n      boundsStream.lineEnd = boundsLineEnd;\r\n      if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);\r\n      else if (deltaSum > epsilon$2) phi1 = 90;\r\n      else if (deltaSum < -epsilon$2) phi0 = -90;\r\n      range[0] = lambda0$1, range[1] = lambda1;\r\n    },\r\n    sphere: function() {\r\n      lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);\r\n    }\r\n  };\r\n  \r\n  function boundsPoint(lambda, phi) {\r\n    ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);\r\n    if (phi < phi0) phi0 = phi;\r\n    if (phi > phi1) phi1 = phi;\r\n  }\r\n  \r\n  function linePoint(lambda, phi) {\r\n    var p = cartesian([lambda * radians, phi * radians]);\r\n    if (p0) {\r\n      var normal = cartesianCross(p0, p),\r\n          equatorial = [normal[1], -normal[0], 0],\r\n          inflection = cartesianCross(equatorial, normal);\r\n      cartesianNormalizeInPlace(inflection);\r\n      inflection = spherical(inflection);\r\n      var delta = lambda - lambda2,\r\n          sign = delta > 0 ? 1 : -1,\r\n          lambdai = inflection[0] * degrees$1 * sign,\r\n          phii,\r\n          antimeridian = abs(delta) > 180;\r\n      if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\r\n        phii = inflection[1] * degrees$1;\r\n        if (phii > phi1) phi1 = phii;\r\n      } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\r\n        phii = -inflection[1] * degrees$1;\r\n        if (phii < phi0) phi0 = phii;\r\n      } else {\r\n        if (phi < phi0) phi0 = phi;\r\n        if (phi > phi1) phi1 = phi;\r\n      }\r\n      if (antimeridian) {\r\n        if (lambda < lambda2) {\r\n          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\r\n        } else {\r\n          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\r\n        }\r\n      } else {\r\n        if (lambda1 >= lambda0$1) {\r\n          if (lambda < lambda0$1) lambda0$1 = lambda;\r\n          if (lambda > lambda1) lambda1 = lambda;\r\n        } else {\r\n          if (lambda > lambda2) {\r\n            if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\r\n          } else {\r\n            if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);\r\n    }\r\n    if (phi < phi0) phi0 = phi;\r\n    if (phi > phi1) phi1 = phi;\r\n    p0 = p, lambda2 = lambda;\r\n  }\r\n  \r\n  function boundsLineStart() {\r\n    boundsStream.point = linePoint;\r\n  }\r\n  \r\n  function boundsLineEnd() {\r\n    range[0] = lambda0$1, range[1] = lambda1;\r\n    boundsStream.point = boundsPoint;\r\n    p0 = null;\r\n  }\r\n  \r\n  function boundsRingPoint(lambda, phi) {\r\n    if (p0) {\r\n      var delta = lambda - lambda2;\r\n      deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\r\n    } else {\r\n      lambda00$1 = lambda, phi00$1 = phi;\r\n    }\r\n    areaStream.point(lambda, phi);\r\n    linePoint(lambda, phi);\r\n  }\r\n  \r\n  function boundsRingStart() {\r\n    areaStream.lineStart();\r\n  }\r\n  \r\n  function boundsRingEnd() {\r\n    boundsRingPoint(lambda00$1, phi00$1);\r\n    areaStream.lineEnd();\r\n    if (abs(deltaSum) > epsilon$2) lambda0$1 = -(lambda1 = 180);\r\n    range[0] = lambda0$1, range[1] = lambda1;\r\n    p0 = null;\r\n  }\r\n  \r\n  // Finds the left-right distance between two longitudes.\r\n  // This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\r\n  // the distance between ±180° to be 360°.\r\n  function angle(lambda0, lambda1) {\r\n    return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\r\n  }\r\n  \r\n  function rangeCompare(a, b) {\r\n    return a[0] - b[0];\r\n  }\r\n  \r\n  function rangeContains(range, x) {\r\n    return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\r\n  }\r\n  \r\n  function bounds(feature) {\r\n    var i, n, a, b, merged, deltaMax, delta;\r\n  \r\n    phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);\r\n    ranges = [];\r\n    geoStream(feature, boundsStream);\r\n  \r\n    // First, sort ranges by their minimum longitudes.\r\n    if (n = ranges.length) {\r\n      ranges.sort(rangeCompare);\r\n  \r\n      // Then, merge any ranges that overlap.\r\n      for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\r\n        b = ranges[i];\r\n        if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\r\n          if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\r\n          if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\r\n        } else {\r\n          merged.push(a = b);\r\n        }\r\n      }\r\n  \r\n      // Finally, find the largest gap between the merged ranges.\r\n      // The final bounding box will be the inverse of this gap.\r\n      for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\r\n        b = merged[i];\r\n        if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];\r\n      }\r\n    }\r\n  \r\n    ranges = range = null;\r\n  \r\n    return lambda0$1 === Infinity || phi0 === Infinity\r\n        ? [[NaN, NaN], [NaN, NaN]]\r\n        : [[lambda0$1, phi0], [lambda1, phi1]];\r\n  }\r\n  \r\n  var W0, W1,\r\n      X0, Y0, Z0,\r\n      X1, Y1, Z1,\r\n      X2, Y2, Z2,\r\n      lambda00$2, phi00$2, // first point\r\n      x0, y0, z0; // previous point\r\n  \r\n  var centroidStream = {\r\n    sphere: noop$2,\r\n    point: centroidPoint,\r\n    lineStart: centroidLineStart,\r\n    lineEnd: centroidLineEnd,\r\n    polygonStart: function() {\r\n      centroidStream.lineStart = centroidRingStart;\r\n      centroidStream.lineEnd = centroidRingEnd;\r\n    },\r\n    polygonEnd: function() {\r\n      centroidStream.lineStart = centroidLineStart;\r\n      centroidStream.lineEnd = centroidLineEnd;\r\n    }\r\n  };\r\n  \r\n  // Arithmetic mean of Cartesian vectors.\r\n  function centroidPoint(lambda, phi) {\r\n    lambda *= radians, phi *= radians;\r\n    var cosPhi = cos$1(phi);\r\n    centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi));\r\n  }\r\n  \r\n  function centroidPointCartesian(x, y, z) {\r\n    ++W0;\r\n    X0 += (x - X0) / W0;\r\n    Y0 += (y - Y0) / W0;\r\n    Z0 += (z - Z0) / W0;\r\n  }\r\n  \r\n  function centroidLineStart() {\r\n    centroidStream.point = centroidLinePointFirst;\r\n  }\r\n  \r\n  function centroidLinePointFirst(lambda, phi) {\r\n    lambda *= radians, phi *= radians;\r\n    var cosPhi = cos$1(phi);\r\n    x0 = cosPhi * cos$1(lambda);\r\n    y0 = cosPhi * sin$1(lambda);\r\n    z0 = sin$1(phi);\r\n    centroidStream.point = centroidLinePoint;\r\n    centroidPointCartesian(x0, y0, z0);\r\n  }\r\n  \r\n  function centroidLinePoint(lambda, phi) {\r\n    lambda *= radians, phi *= radians;\r\n    var cosPhi = cos$1(phi),\r\n        x = cosPhi * cos$1(lambda),\r\n        y = cosPhi * sin$1(lambda),\r\n        z = sin$1(phi),\r\n        w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\r\n    W1 += w;\r\n    X1 += w * (x0 + (x0 = x));\r\n    Y1 += w * (y0 + (y0 = y));\r\n    Z1 += w * (z0 + (z0 = z));\r\n    centroidPointCartesian(x0, y0, z0);\r\n  }\r\n  \r\n  function centroidLineEnd() {\r\n    centroidStream.point = centroidPoint;\r\n  }\r\n  \r\n  // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\r\n  // J. Applied Mechanics 42, 239 (1975).\r\n  function centroidRingStart() {\r\n    centroidStream.point = centroidRingPointFirst;\r\n  }\r\n  \r\n  function centroidRingEnd() {\r\n    centroidRingPoint(lambda00$2, phi00$2);\r\n    centroidStream.point = centroidPoint;\r\n  }\r\n  \r\n  function centroidRingPointFirst(lambda, phi) {\r\n    lambda00$2 = lambda, phi00$2 = phi;\r\n    lambda *= radians, phi *= radians;\r\n    centroidStream.point = centroidRingPoint;\r\n    var cosPhi = cos$1(phi);\r\n    x0 = cosPhi * cos$1(lambda);\r\n    y0 = cosPhi * sin$1(lambda);\r\n    z0 = sin$1(phi);\r\n    centroidPointCartesian(x0, y0, z0);\r\n  }\r\n  \r\n  function centroidRingPoint(lambda, phi) {\r\n    lambda *= radians, phi *= radians;\r\n    var cosPhi = cos$1(phi),\r\n        x = cosPhi * cos$1(lambda),\r\n        y = cosPhi * sin$1(lambda),\r\n        z = sin$1(phi),\r\n        cx = y0 * z - z0 * y,\r\n        cy = z0 * x - x0 * z,\r\n        cz = x0 * y - y0 * x,\r\n        m = sqrt(cx * cx + cy * cy + cz * cz),\r\n        w = asin(m), // line weight = angle\r\n        v = m && -w / m; // area weight multiplier\r\n    X2 += v * cx;\r\n    Y2 += v * cy;\r\n    Z2 += v * cz;\r\n    W1 += w;\r\n    X1 += w * (x0 + (x0 = x));\r\n    Y1 += w * (y0 + (y0 = y));\r\n    Z1 += w * (z0 + (z0 = z));\r\n    centroidPointCartesian(x0, y0, z0);\r\n  }\r\n  \r\n  function centroid(object) {\r\n    W0 = W1 =\r\n    X0 = Y0 = Z0 =\r\n    X1 = Y1 = Z1 =\r\n    X2 = Y2 = Z2 = 0;\r\n    geoStream(object, centroidStream);\r\n  \r\n    var x = X2,\r\n        y = Y2,\r\n        z = Z2,\r\n        m = x * x + y * y + z * z;\r\n  \r\n    // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\r\n    if (m < epsilon2$1) {\r\n      x = X1, y = Y1, z = Z1;\r\n      // If the feature has zero length, fall back to arithmetic mean of point vectors.\r\n      if (W1 < epsilon$2) x = X0, y = Y0, z = Z0;\r\n      m = x * x + y * y + z * z;\r\n      // If the feature still has an undefined ccentroid, then return.\r\n      if (m < epsilon2$1) return [NaN, NaN];\r\n    }\r\n  \r\n    return [atan2(y, x) * degrees$1, asin(z / sqrt(m)) * degrees$1];\r\n  }\r\n  \r\n  function constant$8(x) {\r\n    return function() {\r\n      return x;\r\n    };\r\n  }\r\n  \r\n  function compose(a, b) {\r\n  \r\n    function compose(x, y) {\r\n      return x = a(x, y), b(x[0], x[1]);\r\n    }\r\n  \r\n    if (a.invert && b.invert) compose.invert = function(x, y) {\r\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\r\n    };\r\n  \r\n    return compose;\r\n  }\r\n  \r\n  function rotationIdentity(lambda, phi) {\r\n    return [abs(lambda) > pi$3 ? lambda + Math.round(-lambda / tau$3) * tau$3 : lambda, phi];\r\n  }\r\n  \r\n  rotationIdentity.invert = rotationIdentity;\r\n  \r\n  function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\r\n    return (deltaLambda %= tau$3) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\r\n      : rotationLambda(deltaLambda))\r\n      : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\r\n      : rotationIdentity);\r\n  }\r\n  \r\n  function forwardRotationLambda(deltaLambda) {\r\n    return function(lambda, phi) {\r\n      return lambda += deltaLambda, [lambda > pi$3 ? lambda - tau$3 : lambda < -pi$3 ? lambda + tau$3 : lambda, phi];\r\n    };\r\n  }\r\n  \r\n  function rotationLambda(deltaLambda) {\r\n    var rotation = forwardRotationLambda(deltaLambda);\r\n    rotation.invert = forwardRotationLambda(-deltaLambda);\r\n    return rotation;\r\n  }\r\n  \r\n  function rotationPhiGamma(deltaPhi, deltaGamma) {\r\n    var cosDeltaPhi = cos$1(deltaPhi),\r\n        sinDeltaPhi = sin$1(deltaPhi),\r\n        cosDeltaGamma = cos$1(deltaGamma),\r\n        sinDeltaGamma = sin$1(deltaGamma);\r\n  \r\n    function rotation(lambda, phi) {\r\n      var cosPhi = cos$1(phi),\r\n          x = cos$1(lambda) * cosPhi,\r\n          y = sin$1(lambda) * cosPhi,\r\n          z = sin$1(phi),\r\n          k = z * cosDeltaPhi + x * sinDeltaPhi;\r\n      return [\r\n        atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\r\n        asin(k * cosDeltaGamma + y * sinDeltaGamma)\r\n      ];\r\n    }\r\n  \r\n    rotation.invert = function(lambda, phi) {\r\n      var cosPhi = cos$1(phi),\r\n          x = cos$1(lambda) * cosPhi,\r\n          y = sin$1(lambda) * cosPhi,\r\n          z = sin$1(phi),\r\n          k = z * cosDeltaGamma - y * sinDeltaGamma;\r\n      return [\r\n        atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\r\n        asin(k * cosDeltaPhi - x * sinDeltaPhi)\r\n      ];\r\n    };\r\n  \r\n    return rotation;\r\n  }\r\n  \r\n  function rotation(rotate) {\r\n    rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\r\n  \r\n    function forward(coordinates) {\r\n      coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\r\n      return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;\r\n    }\r\n  \r\n    forward.invert = function(coordinates) {\r\n      coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\r\n      return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;\r\n    };\r\n  \r\n    return forward;\r\n  }\r\n  \r\n  // Generates a circle centered at [0°, 0°], with a given radius and precision.\r\n  function circleStream(stream, radius, delta, direction, t0, t1) {\r\n    if (!delta) return;\r\n    var cosRadius = cos$1(radius),\r\n        sinRadius = sin$1(radius),\r\n        step = direction * delta;\r\n    if (t0 == null) {\r\n      t0 = radius + direction * tau$3;\r\n      t1 = radius - step / 2;\r\n    } else {\r\n      t0 = circleRadius(cosRadius, t0);\r\n      t1 = circleRadius(cosRadius, t1);\r\n      if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$3;\r\n    }\r\n    for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\r\n      point = spherical([cosRadius, -sinRadius * cos$1(t), -sinRadius * sin$1(t)]);\r\n      stream.point(point[0], point[1]);\r\n    }\r\n  }\r\n  \r\n  // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\r\n  function circleRadius(cosRadius, point) {\r\n    point = cartesian(point), point[0] -= cosRadius;\r\n    cartesianNormalizeInPlace(point);\r\n    var radius = acos(-point[1]);\r\n    return ((-point[2] < 0 ? -radius : radius) + tau$3 - epsilon$2) % tau$3;\r\n  }\r\n  \r\n  function circle() {\r\n    var center = constant$8([0, 0]),\r\n        radius = constant$8(90),\r\n        precision = constant$8(6),\r\n        ring,\r\n        rotate,\r\n        stream = {point: point};\r\n  \r\n    function point(x, y) {\r\n      ring.push(x = rotate(x, y));\r\n      x[0] *= degrees$1, x[1] *= degrees$1;\r\n    }\r\n  \r\n    function circle() {\r\n      var c = center.apply(this, arguments),\r\n          r = radius.apply(this, arguments) * radians,\r\n          p = precision.apply(this, arguments) * radians;\r\n      ring = [];\r\n      rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\r\n      circleStream(stream, r, p, 1);\r\n      c = {type: \"Polygon\", coordinates: [ring]};\r\n      ring = rotate = null;\r\n      return c;\r\n    }\r\n  \r\n    circle.center = function(_) {\r\n      return arguments.length ? (center = typeof _ === \"function\" ? _ : constant$8([+_[0], +_[1]]), circle) : center;\r\n    };\r\n  \r\n    circle.radius = function(_) {\r\n      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant$8(+_), circle) : radius;\r\n    };\r\n  \r\n    circle.precision = function(_) {\r\n      return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant$8(+_), circle) : precision;\r\n    };\r\n  \r\n    return circle;\r\n  }\r\n  \r\n  function clipBuffer() {\r\n    var lines = [],\r\n        line;\r\n    return {\r\n      point: function(x, y) {\r\n        line.push([x, y]);\r\n      },\r\n      lineStart: function() {\r\n        lines.push(line = []);\r\n      },\r\n      lineEnd: noop$2,\r\n      rejoin: function() {\r\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\r\n      },\r\n      result: function() {\r\n        var result = lines;\r\n        lines = [];\r\n        line = null;\r\n        return result;\r\n      }\r\n    };\r\n  }\r\n  \r\n  function pointEqual(a, b) {\r\n    return abs(a[0] - b[0]) < epsilon$2 && abs(a[1] - b[1]) < epsilon$2;\r\n  }\r\n  \r\n  function Intersection(point, points, other, entry) {\r\n    this.x = point;\r\n    this.z = points;\r\n    this.o = other; // another intersection\r\n    this.e = entry; // is an entry?\r\n    this.v = false; // visited\r\n    this.n = this.p = null; // next & previous\r\n  }\r\n  \r\n  // A generalized polygon clipping algorithm: given a polygon that has been cut\r\n  // into its visible line segments, and rejoins the segments by interpolating\r\n  // along the clip edge.\r\n  function clipRejoin(segments, compareIntersection, startInside, interpolate, stream) {\r\n    var subject = [],\r\n        clip = [],\r\n        i,\r\n        n;\r\n  \r\n    segments.forEach(function(segment) {\r\n      if ((n = segment.length - 1) <= 0) return;\r\n      var n, p0 = segment[0], p1 = segment[n], x;\r\n  \r\n      // If the first and last points of a segment are coincident, then treat as a\r\n      // closed ring. TODO if all rings are closed, then the winding order of the\r\n      // exterior ring should be checked.\r\n      if (pointEqual(p0, p1)) {\r\n        stream.lineStart();\r\n        for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\r\n        stream.lineEnd();\r\n        return;\r\n      }\r\n  \r\n      subject.push(x = new Intersection(p0, segment, null, true));\r\n      clip.push(x.o = new Intersection(p0, null, x, false));\r\n      subject.push(x = new Intersection(p1, segment, null, false));\r\n      clip.push(x.o = new Intersection(p1, null, x, true));\r\n    });\r\n  \r\n    if (!subject.length) return;\r\n  \r\n    clip.sort(compareIntersection);\r\n    link$1(subject);\r\n    link$1(clip);\r\n  \r\n    for (i = 0, n = clip.length; i < n; ++i) {\r\n      clip[i].e = startInside = !startInside;\r\n    }\r\n  \r\n    var start = subject[0],\r\n        points,\r\n        point;\r\n  \r\n    while (1) {\r\n      // Find first unvisited intersection.\r\n      var current = start,\r\n          isSubject = true;\r\n      while (current.v) if ((current = current.n) === start) return;\r\n      points = current.z;\r\n      stream.lineStart();\r\n      do {\r\n        current.v = current.o.v = true;\r\n        if (current.e) {\r\n          if (isSubject) {\r\n            for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\r\n          } else {\r\n            interpolate(current.x, current.n.x, 1, stream);\r\n          }\r\n          current = current.n;\r\n        } else {\r\n          if (isSubject) {\r\n            points = current.p.z;\r\n            for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\r\n          } else {\r\n            interpolate(current.x, current.p.x, -1, stream);\r\n          }\r\n          current = current.p;\r\n        }\r\n        current = current.o;\r\n        points = current.z;\r\n        isSubject = !isSubject;\r\n      } while (!current.v);\r\n      stream.lineEnd();\r\n    }\r\n  }\r\n  \r\n  function link$1(array) {\r\n    if (!(n = array.length)) return;\r\n    var n,\r\n        i = 0,\r\n        a = array[0],\r\n        b;\r\n    while (++i < n) {\r\n      a.n = b = array[i];\r\n      b.p = a;\r\n      a = b;\r\n    }\r\n    a.n = b = array[0];\r\n    b.p = a;\r\n  }\r\n  \r\n  var sum$1 = adder();\r\n  \r\n  function longitude(point) {\r\n    if (abs(point[0]) <= pi$3)\r\n      return point[0];\r\n    else\r\n      return sign(point[0]) * ((abs(point[0]) + pi$3) % tau$3 - pi$3);\r\n  }\r\n  \r\n  function polygonContains(polygon, point) {\r\n    var lambda = longitude(point),\r\n        phi = point[1],\r\n        sinPhi = sin$1(phi),\r\n        normal = [sin$1(lambda), -cos$1(lambda), 0],\r\n        angle = 0,\r\n        winding = 0;\r\n  \r\n    sum$1.reset();\r\n  \r\n    if (sinPhi === 1) phi = halfPi$2 + epsilon$2;\r\n    else if (sinPhi === -1) phi = -halfPi$2 - epsilon$2;\r\n  \r\n    for (var i = 0, n = polygon.length; i < n; ++i) {\r\n      if (!(m = (ring = polygon[i]).length)) continue;\r\n      var ring,\r\n          m,\r\n          point0 = ring[m - 1],\r\n          lambda0 = longitude(point0),\r\n          phi0 = point0[1] / 2 + quarterPi,\r\n          sinPhi0 = sin$1(phi0),\r\n          cosPhi0 = cos$1(phi0);\r\n  \r\n      for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\r\n        var point1 = ring[j],\r\n            lambda1 = longitude(point1),\r\n            phi1 = point1[1] / 2 + quarterPi,\r\n            sinPhi1 = sin$1(phi1),\r\n            cosPhi1 = cos$1(phi1),\r\n            delta = lambda1 - lambda0,\r\n            sign = delta >= 0 ? 1 : -1,\r\n            absDelta = sign * delta,\r\n            antimeridian = absDelta > pi$3,\r\n            k = sinPhi0 * sinPhi1;\r\n  \r\n        sum$1.add(atan2(k * sign * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));\r\n        angle += antimeridian ? delta + sign * tau$3 : delta;\r\n  \r\n        // Are the longitudes either side of the point’s meridian (lambda),\r\n        // and are the latitudes smaller than the parallel (phi)?\r\n        if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\r\n          var arc = cartesianCross(cartesian(point0), cartesian(point1));\r\n          cartesianNormalizeInPlace(arc);\r\n          var intersection = cartesianCross(normal, arc);\r\n          cartesianNormalizeInPlace(intersection);\r\n          var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\r\n          if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\r\n            winding += antimeridian ^ delta >= 0 ? 1 : -1;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    // First, determine whether the South pole is inside or outside:\r\n    //\r\n    // It is inside if:\r\n    // * the polygon winds around it in a clockwise direction.\r\n    // * the polygon does not (cumulatively) wind around it, but has a negative\r\n    //   (counter-clockwise) area.\r\n    //\r\n    // Second, count the (signed) number of times a segment crosses a lambda\r\n    // from the point to the South pole.  If it is zero, then the point is the\r\n    // same side as the South pole.\r\n  \r\n    return (angle < -epsilon$2 || angle < epsilon$2 && sum$1 < -epsilon$2) ^ (winding & 1);\r\n  }\r\n  \r\n  function clip(pointVisible, clipLine, interpolate, start) {\r\n    return function(sink) {\r\n      var line = clipLine(sink),\r\n          ringBuffer = clipBuffer(),\r\n          ringSink = clipLine(ringBuffer),\r\n          polygonStarted = false,\r\n          polygon,\r\n          segments,\r\n          ring;\r\n  \r\n      var clip = {\r\n        point: point,\r\n        lineStart: lineStart,\r\n        lineEnd: lineEnd,\r\n        polygonStart: function() {\r\n          clip.point = pointRing;\r\n          clip.lineStart = ringStart;\r\n          clip.lineEnd = ringEnd;\r\n          segments = [];\r\n          polygon = [];\r\n        },\r\n        polygonEnd: function() {\r\n          clip.point = point;\r\n          clip.lineStart = lineStart;\r\n          clip.lineEnd = lineEnd;\r\n          segments = merge(segments);\r\n          var startInside = polygonContains(polygon, start);\r\n          if (segments.length) {\r\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\r\n            clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\r\n          } else if (startInside) {\r\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\r\n            sink.lineStart();\r\n            interpolate(null, null, 1, sink);\r\n            sink.lineEnd();\r\n          }\r\n          if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\r\n          segments = polygon = null;\r\n        },\r\n        sphere: function() {\r\n          sink.polygonStart();\r\n          sink.lineStart();\r\n          interpolate(null, null, 1, sink);\r\n          sink.lineEnd();\r\n          sink.polygonEnd();\r\n        }\r\n      };\r\n  \r\n      function point(lambda, phi) {\r\n        if (pointVisible(lambda, phi)) sink.point(lambda, phi);\r\n      }\r\n  \r\n      function pointLine(lambda, phi) {\r\n        line.point(lambda, phi);\r\n      }\r\n  \r\n      function lineStart() {\r\n        clip.point = pointLine;\r\n        line.lineStart();\r\n      }\r\n  \r\n      function lineEnd() {\r\n        clip.point = point;\r\n        line.lineEnd();\r\n      }\r\n  \r\n      function pointRing(lambda, phi) {\r\n        ring.push([lambda, phi]);\r\n        ringSink.point(lambda, phi);\r\n      }\r\n  \r\n      function ringStart() {\r\n        ringSink.lineStart();\r\n        ring = [];\r\n      }\r\n  \r\n      function ringEnd() {\r\n        pointRing(ring[0][0], ring[0][1]);\r\n        ringSink.lineEnd();\r\n  \r\n        var clean = ringSink.clean(),\r\n            ringSegments = ringBuffer.result(),\r\n            i, n = ringSegments.length, m,\r\n            segment,\r\n            point;\r\n  \r\n        ring.pop();\r\n        polygon.push(ring);\r\n        ring = null;\r\n  \r\n        if (!n) return;\r\n  \r\n        // No intersections.\r\n        if (clean & 1) {\r\n          segment = ringSegments[0];\r\n          if ((m = segment.length - 1) > 0) {\r\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\r\n            sink.lineStart();\r\n            for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\r\n            sink.lineEnd();\r\n          }\r\n          return;\r\n        }\r\n  \r\n        // Rejoin connected segments.\r\n        // TODO reuse ringBuffer.rejoin()?\r\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\r\n  \r\n        segments.push(ringSegments.filter(validSegment));\r\n      }\r\n  \r\n      return clip;\r\n    };\r\n  }\r\n  \r\n  function validSegment(segment) {\r\n    return segment.length > 1;\r\n  }\r\n  \r\n  // Intersections are sorted along the clip edge. For both antimeridian cutting\r\n  // and circle clipping, the same comparison is used.\r\n  function compareIntersection(a, b) {\r\n    return ((a = a.x)[0] < 0 ? a[1] - halfPi$2 - epsilon$2 : halfPi$2 - a[1])\r\n         - ((b = b.x)[0] < 0 ? b[1] - halfPi$2 - epsilon$2 : halfPi$2 - b[1]);\r\n  }\r\n  \r\n  var clipAntimeridian = clip(\r\n    function() { return true; },\r\n    clipAntimeridianLine,\r\n    clipAntimeridianInterpolate,\r\n    [-pi$3, -halfPi$2]\r\n  );\r\n  \r\n  // Takes a line and cuts into visible segments. Return values: 0 - there were\r\n  // intersections or the line was empty; 1 - no intersections; 2 - there were\r\n  // intersections, and the first and last segments should be rejoined.\r\n  function clipAntimeridianLine(stream) {\r\n    var lambda0 = NaN,\r\n        phi0 = NaN,\r\n        sign0 = NaN,\r\n        clean; // no intersections\r\n  \r\n    return {\r\n      lineStart: function() {\r\n        stream.lineStart();\r\n        clean = 1;\r\n      },\r\n      point: function(lambda1, phi1) {\r\n        var sign1 = lambda1 > 0 ? pi$3 : -pi$3,\r\n            delta = abs(lambda1 - lambda0);\r\n        if (abs(delta - pi$3) < epsilon$2) { // line crosses a pole\r\n          stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$2 : -halfPi$2);\r\n          stream.point(sign0, phi0);\r\n          stream.lineEnd();\r\n          stream.lineStart();\r\n          stream.point(sign1, phi0);\r\n          stream.point(lambda1, phi0);\r\n          clean = 0;\r\n        } else if (sign0 !== sign1 && delta >= pi$3) { // line crosses antimeridian\r\n          if (abs(lambda0 - sign0) < epsilon$2) lambda0 -= sign0 * epsilon$2; // handle degeneracies\r\n          if (abs(lambda1 - sign1) < epsilon$2) lambda1 -= sign1 * epsilon$2;\r\n          phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\r\n          stream.point(sign0, phi0);\r\n          stream.lineEnd();\r\n          stream.lineStart();\r\n          stream.point(sign1, phi0);\r\n          clean = 0;\r\n        }\r\n        stream.point(lambda0 = lambda1, phi0 = phi1);\r\n        sign0 = sign1;\r\n      },\r\n      lineEnd: function() {\r\n        stream.lineEnd();\r\n        lambda0 = phi0 = NaN;\r\n      },\r\n      clean: function() {\r\n        return 2 - clean; // if intersections, rejoin first and last segments\r\n      }\r\n    };\r\n  }\r\n  \r\n  function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\r\n    var cosPhi0,\r\n        cosPhi1,\r\n        sinLambda0Lambda1 = sin$1(lambda0 - lambda1);\r\n    return abs(sinLambda0Lambda1) > epsilon$2\r\n        ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1)\r\n            - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0))\r\n            / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\r\n        : (phi0 + phi1) / 2;\r\n  }\r\n  \r\n  function clipAntimeridianInterpolate(from, to, direction, stream) {\r\n    var phi;\r\n    if (from == null) {\r\n      phi = direction * halfPi$2;\r\n      stream.point(-pi$3, phi);\r\n      stream.point(0, phi);\r\n      stream.point(pi$3, phi);\r\n      stream.point(pi$3, 0);\r\n      stream.point(pi$3, -phi);\r\n      stream.point(0, -phi);\r\n      stream.point(-pi$3, -phi);\r\n      stream.point(-pi$3, 0);\r\n      stream.point(-pi$3, phi);\r\n    } else if (abs(from[0] - to[0]) > epsilon$2) {\r\n      var lambda = from[0] < to[0] ? pi$3 : -pi$3;\r\n      phi = direction * lambda / 2;\r\n      stream.point(-lambda, phi);\r\n      stream.point(0, phi);\r\n      stream.point(lambda, phi);\r\n    } else {\r\n      stream.point(to[0], to[1]);\r\n    }\r\n  }\r\n  \r\n  function clipCircle(radius) {\r\n    var cr = cos$1(radius),\r\n        delta = 6 * radians,\r\n        smallRadius = cr > 0,\r\n        notHemisphere = abs(cr) > epsilon$2; // TODO optimise for this common case\r\n  \r\n    function interpolate(from, to, direction, stream) {\r\n      circleStream(stream, radius, delta, direction, from, to);\r\n    }\r\n  \r\n    function visible(lambda, phi) {\r\n      return cos$1(lambda) * cos$1(phi) > cr;\r\n    }\r\n  \r\n    // Takes a line and cuts into visible segments. Return values used for polygon\r\n    // clipping: 0 - there were intersections or the line was empty; 1 - no\r\n    // intersections 2 - there were intersections, and the first and last segments\r\n    // should be rejoined.\r\n    function clipLine(stream) {\r\n      var point0, // previous point\r\n          c0, // code for previous point\r\n          v0, // visibility of previous point\r\n          v00, // visibility of first point\r\n          clean; // no intersections\r\n      return {\r\n        lineStart: function() {\r\n          v00 = v0 = false;\r\n          clean = 1;\r\n        },\r\n        point: function(lambda, phi) {\r\n          var point1 = [lambda, phi],\r\n              point2,\r\n              v = visible(lambda, phi),\r\n              c = smallRadius\r\n                ? v ? 0 : code(lambda, phi)\r\n                : v ? code(lambda + (lambda < 0 ? pi$3 : -pi$3), phi) : 0;\r\n          if (!point0 && (v00 = v0 = v)) stream.lineStart();\r\n          // Handle degeneracies.\r\n          // TODO ignore if not clipping polygons.\r\n          if (v !== v0) {\r\n            point2 = intersect(point0, point1);\r\n            if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {\r\n              point1[0] += epsilon$2;\r\n              point1[1] += epsilon$2;\r\n              v = visible(point1[0], point1[1]);\r\n            }\r\n          }\r\n          if (v !== v0) {\r\n            clean = 0;\r\n            if (v) {\r\n              // outside going in\r\n              stream.lineStart();\r\n              point2 = intersect(point1, point0);\r\n              stream.point(point2[0], point2[1]);\r\n            } else {\r\n              // inside going out\r\n              point2 = intersect(point0, point1);\r\n              stream.point(point2[0], point2[1]);\r\n              stream.lineEnd();\r\n            }\r\n            point0 = point2;\r\n          } else if (notHemisphere && point0 && smallRadius ^ v) {\r\n            var t;\r\n            // If the codes for two points are different, or are both zero,\r\n            // and there this segment intersects with the small circle.\r\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {\r\n              clean = 0;\r\n              if (smallRadius) {\r\n                stream.lineStart();\r\n                stream.point(t[0][0], t[0][1]);\r\n                stream.point(t[1][0], t[1][1]);\r\n                stream.lineEnd();\r\n              } else {\r\n                stream.point(t[1][0], t[1][1]);\r\n                stream.lineEnd();\r\n                stream.lineStart();\r\n                stream.point(t[0][0], t[0][1]);\r\n              }\r\n            }\r\n          }\r\n          if (v && (!point0 || !pointEqual(point0, point1))) {\r\n            stream.point(point1[0], point1[1]);\r\n          }\r\n          point0 = point1, v0 = v, c0 = c;\r\n        },\r\n        lineEnd: function() {\r\n          if (v0) stream.lineEnd();\r\n          point0 = null;\r\n        },\r\n        // Rejoin first and last segments if there were intersections and the first\r\n        // and last points were visible.\r\n        clean: function() {\r\n          return clean | ((v00 && v0) << 1);\r\n        }\r\n      };\r\n    }\r\n  \r\n    // Intersects the great circle between a and b with the clip circle.\r\n    function intersect(a, b, two) {\r\n      var pa = cartesian(a),\r\n          pb = cartesian(b);\r\n  \r\n      // We have two planes, n1.p = d1 and n2.p = d2.\r\n      // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\r\n      var n1 = [1, 0, 0], // normal\r\n          n2 = cartesianCross(pa, pb),\r\n          n2n2 = cartesianDot(n2, n2),\r\n          n1n2 = n2[0], // cartesianDot(n1, n2),\r\n          determinant = n2n2 - n1n2 * n1n2;\r\n  \r\n      // Two polar points.\r\n      if (!determinant) return !two && a;\r\n  \r\n      var c1 =  cr * n2n2 / determinant,\r\n          c2 = -cr * n1n2 / determinant,\r\n          n1xn2 = cartesianCross(n1, n2),\r\n          A = cartesianScale(n1, c1),\r\n          B = cartesianScale(n2, c2);\r\n      cartesianAddInPlace(A, B);\r\n  \r\n      // Solve |p(t)|^2 = 1.\r\n      var u = n1xn2,\r\n          w = cartesianDot(A, u),\r\n          uu = cartesianDot(u, u),\r\n          t2 = w * w - uu * (cartesianDot(A, A) - 1);\r\n  \r\n      if (t2 < 0) return;\r\n  \r\n      var t = sqrt(t2),\r\n          q = cartesianScale(u, (-w - t) / uu);\r\n      cartesianAddInPlace(q, A);\r\n      q = spherical(q);\r\n  \r\n      if (!two) return q;\r\n  \r\n      // Two intersection points.\r\n      var lambda0 = a[0],\r\n          lambda1 = b[0],\r\n          phi0 = a[1],\r\n          phi1 = b[1],\r\n          z;\r\n  \r\n      if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\r\n  \r\n      var delta = lambda1 - lambda0,\r\n          polar = abs(delta - pi$3) < epsilon$2,\r\n          meridian = polar || delta < epsilon$2;\r\n  \r\n      if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\r\n  \r\n      // Check that the first point is between a and b.\r\n      if (meridian\r\n          ? polar\r\n            ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon$2 ? phi0 : phi1)\r\n            : phi0 <= q[1] && q[1] <= phi1\r\n          : delta > pi$3 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\r\n        var q1 = cartesianScale(u, (-w + t) / uu);\r\n        cartesianAddInPlace(q1, A);\r\n        return [q, spherical(q1)];\r\n      }\r\n    }\r\n  \r\n    // Generates a 4-bit vector representing the location of a point relative to\r\n    // the small circle's bounding box.\r\n    function code(lambda, phi) {\r\n      var r = smallRadius ? radius : pi$3 - radius,\r\n          code = 0;\r\n      if (lambda < -r) code |= 1; // left\r\n      else if (lambda > r) code |= 2; // right\r\n      if (phi < -r) code |= 4; // below\r\n      else if (phi > r) code |= 8; // above\r\n      return code;\r\n    }\r\n  \r\n    return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$3, radius - pi$3]);\r\n  }\r\n  \r\n  function clipLine(a, b, x0, y0, x1, y1) {\r\n    var ax = a[0],\r\n        ay = a[1],\r\n        bx = b[0],\r\n        by = b[1],\r\n        t0 = 0,\r\n        t1 = 1,\r\n        dx = bx - ax,\r\n        dy = by - ay,\r\n        r;\r\n  \r\n    r = x0 - ax;\r\n    if (!dx && r > 0) return;\r\n    r /= dx;\r\n    if (dx < 0) {\r\n      if (r < t0) return;\r\n      if (r < t1) t1 = r;\r\n    } else if (dx > 0) {\r\n      if (r > t1) return;\r\n      if (r > t0) t0 = r;\r\n    }\r\n  \r\n    r = x1 - ax;\r\n    if (!dx && r < 0) return;\r\n    r /= dx;\r\n    if (dx < 0) {\r\n      if (r > t1) return;\r\n      if (r > t0) t0 = r;\r\n    } else if (dx > 0) {\r\n      if (r < t0) return;\r\n      if (r < t1) t1 = r;\r\n    }\r\n  \r\n    r = y0 - ay;\r\n    if (!dy && r > 0) return;\r\n    r /= dy;\r\n    if (dy < 0) {\r\n      if (r < t0) return;\r\n      if (r < t1) t1 = r;\r\n    } else if (dy > 0) {\r\n      if (r > t1) return;\r\n      if (r > t0) t0 = r;\r\n    }\r\n  \r\n    r = y1 - ay;\r\n    if (!dy && r < 0) return;\r\n    r /= dy;\r\n    if (dy < 0) {\r\n      if (r > t1) return;\r\n      if (r > t0) t0 = r;\r\n    } else if (dy > 0) {\r\n      if (r < t0) return;\r\n      if (r < t1) t1 = r;\r\n    }\r\n  \r\n    if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\r\n    if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\r\n    return true;\r\n  }\r\n  \r\n  var clipMax = 1e9, clipMin = -clipMax;\r\n  \r\n  // TODO Use d3-polygon’s polygonContains here for the ring check?\r\n  // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\r\n  \r\n  function clipRectangle(x0, y0, x1, y1) {\r\n  \r\n    function visible(x, y) {\r\n      return x0 <= x && x <= x1 && y0 <= y && y <= y1;\r\n    }\r\n  \r\n    function interpolate(from, to, direction, stream) {\r\n      var a = 0, a1 = 0;\r\n      if (from == null\r\n          || (a = corner(from, direction)) !== (a1 = corner(to, direction))\r\n          || comparePoint(from, to) < 0 ^ direction > 0) {\r\n        do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\r\n        while ((a = (a + direction + 4) % 4) !== a1);\r\n      } else {\r\n        stream.point(to[0], to[1]);\r\n      }\r\n    }\r\n  \r\n    function corner(p, direction) {\r\n      return abs(p[0] - x0) < epsilon$2 ? direction > 0 ? 0 : 3\r\n          : abs(p[0] - x1) < epsilon$2 ? direction > 0 ? 2 : 1\r\n          : abs(p[1] - y0) < epsilon$2 ? direction > 0 ? 1 : 0\r\n          : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\r\n    }\r\n  \r\n    function compareIntersection(a, b) {\r\n      return comparePoint(a.x, b.x);\r\n    }\r\n  \r\n    function comparePoint(a, b) {\r\n      var ca = corner(a, 1),\r\n          cb = corner(b, 1);\r\n      return ca !== cb ? ca - cb\r\n          : ca === 0 ? b[1] - a[1]\r\n          : ca === 1 ? a[0] - b[0]\r\n          : ca === 2 ? a[1] - b[1]\r\n          : b[0] - a[0];\r\n    }\r\n  \r\n    return function(stream) {\r\n      var activeStream = stream,\r\n          bufferStream = clipBuffer(),\r\n          segments,\r\n          polygon,\r\n          ring,\r\n          x__, y__, v__, // first point\r\n          x_, y_, v_, // previous point\r\n          first,\r\n          clean;\r\n  \r\n      var clipStream = {\r\n        point: point,\r\n        lineStart: lineStart,\r\n        lineEnd: lineEnd,\r\n        polygonStart: polygonStart,\r\n        polygonEnd: polygonEnd\r\n      };\r\n  \r\n      function point(x, y) {\r\n        if (visible(x, y)) activeStream.point(x, y);\r\n      }\r\n  \r\n      function polygonInside() {\r\n        var winding = 0;\r\n  \r\n        for (var i = 0, n = polygon.length; i < n; ++i) {\r\n          for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\r\n            a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\r\n            if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\r\n            else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\r\n          }\r\n        }\r\n  \r\n        return winding;\r\n      }\r\n  \r\n      // Buffer geometry within a polygon and then clip it en masse.\r\n      function polygonStart() {\r\n        activeStream = bufferStream, segments = [], polygon = [], clean = true;\r\n      }\r\n  \r\n      function polygonEnd() {\r\n        var startInside = polygonInside(),\r\n            cleanInside = clean && startInside,\r\n            visible = (segments = merge(segments)).length;\r\n        if (cleanInside || visible) {\r\n          stream.polygonStart();\r\n          if (cleanInside) {\r\n            stream.lineStart();\r\n            interpolate(null, null, 1, stream);\r\n            stream.lineEnd();\r\n          }\r\n          if (visible) {\r\n            clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\r\n          }\r\n          stream.polygonEnd();\r\n        }\r\n        activeStream = stream, segments = polygon = ring = null;\r\n      }\r\n  \r\n      function lineStart() {\r\n        clipStream.point = linePoint;\r\n        if (polygon) polygon.push(ring = []);\r\n        first = true;\r\n        v_ = false;\r\n        x_ = y_ = NaN;\r\n      }\r\n  \r\n      // TODO rather than special-case polygons, simply handle them separately.\r\n      // Ideally, coincident intersection points should be jittered to avoid\r\n      // clipping issues.\r\n      function lineEnd() {\r\n        if (segments) {\r\n          linePoint(x__, y__);\r\n          if (v__ && v_) bufferStream.rejoin();\r\n          segments.push(bufferStream.result());\r\n        }\r\n        clipStream.point = point;\r\n        if (v_) activeStream.lineEnd();\r\n      }\r\n  \r\n      function linePoint(x, y) {\r\n        var v = visible(x, y);\r\n        if (polygon) ring.push([x, y]);\r\n        if (first) {\r\n          x__ = x, y__ = y, v__ = v;\r\n          first = false;\r\n          if (v) {\r\n            activeStream.lineStart();\r\n            activeStream.point(x, y);\r\n          }\r\n        } else {\r\n          if (v && v_) activeStream.point(x, y);\r\n          else {\r\n            var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\r\n                b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\r\n            if (clipLine(a, b, x0, y0, x1, y1)) {\r\n              if (!v_) {\r\n                activeStream.lineStart();\r\n                activeStream.point(a[0], a[1]);\r\n              }\r\n              activeStream.point(b[0], b[1]);\r\n              if (!v) activeStream.lineEnd();\r\n              clean = false;\r\n            } else if (v) {\r\n              activeStream.lineStart();\r\n              activeStream.point(x, y);\r\n              clean = false;\r\n            }\r\n          }\r\n        }\r\n        x_ = x, y_ = y, v_ = v;\r\n      }\r\n  \r\n      return clipStream;\r\n    };\r\n  }\r\n  \r\n  function extent$1() {\r\n    var x0 = 0,\r\n        y0 = 0,\r\n        x1 = 960,\r\n        y1 = 500,\r\n        cache,\r\n        cacheStream,\r\n        clip;\r\n  \r\n    return clip = {\r\n      stream: function(stream) {\r\n        return cache && cacheStream === stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = stream);\r\n      },\r\n      extent: function(_) {\r\n        return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\r\n      }\r\n    };\r\n  }\r\n  \r\n  var lengthSum = adder(),\r\n      lambda0$2,\r\n      sinPhi0$1,\r\n      cosPhi0$1;\r\n  \r\n  var lengthStream = {\r\n    sphere: noop$2,\r\n    point: noop$2,\r\n    lineStart: lengthLineStart,\r\n    lineEnd: noop$2,\r\n    polygonStart: noop$2,\r\n    polygonEnd: noop$2\r\n  };\r\n  \r\n  function lengthLineStart() {\r\n    lengthStream.point = lengthPointFirst;\r\n    lengthStream.lineEnd = lengthLineEnd;\r\n  }\r\n  \r\n  function lengthLineEnd() {\r\n    lengthStream.point = lengthStream.lineEnd = noop$2;\r\n  }\r\n  \r\n  function lengthPointFirst(lambda, phi) {\r\n    lambda *= radians, phi *= radians;\r\n    lambda0$2 = lambda, sinPhi0$1 = sin$1(phi), cosPhi0$1 = cos$1(phi);\r\n    lengthStream.point = lengthPoint;\r\n  }\r\n  \r\n  function lengthPoint(lambda, phi) {\r\n    lambda *= radians, phi *= radians;\r\n    var sinPhi = sin$1(phi),\r\n        cosPhi = cos$1(phi),\r\n        delta = abs(lambda - lambda0$2),\r\n        cosDelta = cos$1(delta),\r\n        sinDelta = sin$1(delta),\r\n        x = cosPhi * sinDelta,\r\n        y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,\r\n        z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;\r\n    lengthSum.add(atan2(sqrt(x * x + y * y), z));\r\n    lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;\r\n  }\r\n  \r\n  function length$1(object) {\r\n    lengthSum.reset();\r\n    geoStream(object, lengthStream);\r\n    return +lengthSum;\r\n  }\r\n  \r\n  var coordinates = [null, null],\r\n      object$1 = {type: \"LineString\", coordinates: coordinates};\r\n  \r\n  function distance(a, b) {\r\n    coordinates[0] = a;\r\n    coordinates[1] = b;\r\n    return length$1(object$1);\r\n  }\r\n  \r\n  var containsObjectType = {\r\n    Feature: function(object, point) {\r\n      return containsGeometry(object.geometry, point);\r\n    },\r\n    FeatureCollection: function(object, point) {\r\n      var features = object.features, i = -1, n = features.length;\r\n      while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  var containsGeometryType = {\r\n    Sphere: function() {\r\n      return true;\r\n    },\r\n    Point: function(object, point) {\r\n      return containsPoint(object.coordinates, point);\r\n    },\r\n    MultiPoint: function(object, point) {\r\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\r\n      while (++i < n) if (containsPoint(coordinates[i], point)) return true;\r\n      return false;\r\n    },\r\n    LineString: function(object, point) {\r\n      return containsLine(object.coordinates, point);\r\n    },\r\n    MultiLineString: function(object, point) {\r\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\r\n      while (++i < n) if (containsLine(coordinates[i], point)) return true;\r\n      return false;\r\n    },\r\n    Polygon: function(object, point) {\r\n      return containsPolygon(object.coordinates, point);\r\n    },\r\n    MultiPolygon: function(object, point) {\r\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\r\n      while (++i < n) if (containsPolygon(coordinates[i], point)) return true;\r\n      return false;\r\n    },\r\n    GeometryCollection: function(object, point) {\r\n      var geometries = object.geometries, i = -1, n = geometries.length;\r\n      while (++i < n) if (containsGeometry(geometries[i], point)) return true;\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  function containsGeometry(geometry, point) {\r\n    return geometry && containsGeometryType.hasOwnProperty(geometry.type)\r\n        ? containsGeometryType[geometry.type](geometry, point)\r\n        : false;\r\n  }\r\n  \r\n  function containsPoint(coordinates, point) {\r\n    return distance(coordinates, point) === 0;\r\n  }\r\n  \r\n  function containsLine(coordinates, point) {\r\n    var ao, bo, ab;\r\n    for (var i = 0, n = coordinates.length; i < n; i++) {\r\n      bo = distance(coordinates[i], point);\r\n      if (bo === 0) return true;\r\n      if (i > 0) {\r\n        ab = distance(coordinates[i], coordinates[i - 1]);\r\n        if (\r\n          ab > 0 &&\r\n          ao <= ab &&\r\n          bo <= ab &&\r\n          (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < epsilon2$1 * ab\r\n        )\r\n          return true;\r\n      }\r\n      ao = bo;\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  function containsPolygon(coordinates, point) {\r\n    return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));\r\n  }\r\n  \r\n  function ringRadians(ring) {\r\n    return ring = ring.map(pointRadians), ring.pop(), ring;\r\n  }\r\n  \r\n  function pointRadians(point) {\r\n    return [point[0] * radians, point[1] * radians];\r\n  }\r\n  \r\n  function contains$1(object, point) {\r\n    return (object && containsObjectType.hasOwnProperty(object.type)\r\n        ? containsObjectType[object.type]\r\n        : containsGeometry)(object, point);\r\n  }\r\n  \r\n  function graticuleX(y0, y1, dy) {\r\n    var y = sequence(y0, y1 - epsilon$2, dy).concat(y1);\r\n    return function(x) { return y.map(function(y) { return [x, y]; }); };\r\n  }\r\n  \r\n  function graticuleY(x0, x1, dx) {\r\n    var x = sequence(x0, x1 - epsilon$2, dx).concat(x1);\r\n    return function(y) { return x.map(function(x) { return [x, y]; }); };\r\n  }\r\n  \r\n  function graticule() {\r\n    var x1, x0, X1, X0,\r\n        y1, y0, Y1, Y0,\r\n        dx = 10, dy = dx, DX = 90, DY = 360,\r\n        x, y, X, Y,\r\n        precision = 2.5;\r\n  \r\n    function graticule() {\r\n      return {type: \"MultiLineString\", coordinates: lines()};\r\n    }\r\n  \r\n    function lines() {\r\n      return sequence(ceil(X0 / DX) * DX, X1, DX).map(X)\r\n          .concat(sequence(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\r\n          .concat(sequence(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon$2; }).map(x))\r\n          .concat(sequence(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon$2; }).map(y));\r\n    }\r\n  \r\n    graticule.lines = function() {\r\n      return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\r\n    };\r\n  \r\n    graticule.outline = function() {\r\n      return {\r\n        type: \"Polygon\",\r\n        coordinates: [\r\n          X(X0).concat(\r\n          Y(Y1).slice(1),\r\n          X(X1).reverse().slice(1),\r\n          Y(Y0).reverse().slice(1))\r\n        ]\r\n      };\r\n    };\r\n  \r\n    graticule.extent = function(_) {\r\n      if (!arguments.length) return graticule.extentMinor();\r\n      return graticule.extentMajor(_).extentMinor(_);\r\n    };\r\n  \r\n    graticule.extentMajor = function(_) {\r\n      if (!arguments.length) return [[X0, Y0], [X1, Y1]];\r\n      X0 = +_[0][0], X1 = +_[1][0];\r\n      Y0 = +_[0][1], Y1 = +_[1][1];\r\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\r\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\r\n      return graticule.precision(precision);\r\n    };\r\n  \r\n    graticule.extentMinor = function(_) {\r\n      if (!arguments.length) return [[x0, y0], [x1, y1]];\r\n      x0 = +_[0][0], x1 = +_[1][0];\r\n      y0 = +_[0][1], y1 = +_[1][1];\r\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\r\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\r\n      return graticule.precision(precision);\r\n    };\r\n  \r\n    graticule.step = function(_) {\r\n      if (!arguments.length) return graticule.stepMinor();\r\n      return graticule.stepMajor(_).stepMinor(_);\r\n    };\r\n  \r\n    graticule.stepMajor = function(_) {\r\n      if (!arguments.length) return [DX, DY];\r\n      DX = +_[0], DY = +_[1];\r\n      return graticule;\r\n    };\r\n  \r\n    graticule.stepMinor = function(_) {\r\n      if (!arguments.length) return [dx, dy];\r\n      dx = +_[0], dy = +_[1];\r\n      return graticule;\r\n    };\r\n  \r\n    graticule.precision = function(_) {\r\n      if (!arguments.length) return precision;\r\n      precision = +_;\r\n      x = graticuleX(y0, y1, 90);\r\n      y = graticuleY(x0, x1, precision);\r\n      X = graticuleX(Y0, Y1, 90);\r\n      Y = graticuleY(X0, X1, precision);\r\n      return graticule;\r\n    };\r\n  \r\n    return graticule\r\n        .extentMajor([[-180, -90 + epsilon$2], [180, 90 - epsilon$2]])\r\n        .extentMinor([[-180, -80 - epsilon$2], [180, 80 + epsilon$2]]);\r\n  }\r\n  \r\n  function graticule10() {\r\n    return graticule()();\r\n  }\r\n  \r\n  function interpolate$1(a, b) {\r\n    var x0 = a[0] * radians,\r\n        y0 = a[1] * radians,\r\n        x1 = b[0] * radians,\r\n        y1 = b[1] * radians,\r\n        cy0 = cos$1(y0),\r\n        sy0 = sin$1(y0),\r\n        cy1 = cos$1(y1),\r\n        sy1 = sin$1(y1),\r\n        kx0 = cy0 * cos$1(x0),\r\n        ky0 = cy0 * sin$1(x0),\r\n        kx1 = cy1 * cos$1(x1),\r\n        ky1 = cy1 * sin$1(x1),\r\n        d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\r\n        k = sin$1(d);\r\n  \r\n    var interpolate = d ? function(t) {\r\n      var B = sin$1(t *= d) / k,\r\n          A = sin$1(d - t) / k,\r\n          x = A * kx0 + B * kx1,\r\n          y = A * ky0 + B * ky1,\r\n          z = A * sy0 + B * sy1;\r\n      return [\r\n        atan2(y, x) * degrees$1,\r\n        atan2(z, sqrt(x * x + y * y)) * degrees$1\r\n      ];\r\n    } : function() {\r\n      return [x0 * degrees$1, y0 * degrees$1];\r\n    };\r\n  \r\n    interpolate.distance = d;\r\n  \r\n    return interpolate;\r\n  }\r\n  \r\n  function identity$4(x) {\r\n    return x;\r\n  }\r\n  \r\n  var areaSum$1 = adder(),\r\n      areaRingSum$1 = adder(),\r\n      x00,\r\n      y00,\r\n      x0$1,\r\n      y0$1;\r\n  \r\n  var areaStream$1 = {\r\n    point: noop$2,\r\n    lineStart: noop$2,\r\n    lineEnd: noop$2,\r\n    polygonStart: function() {\r\n      areaStream$1.lineStart = areaRingStart$1;\r\n      areaStream$1.lineEnd = areaRingEnd$1;\r\n    },\r\n    polygonEnd: function() {\r\n      areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop$2;\r\n      areaSum$1.add(abs(areaRingSum$1));\r\n      areaRingSum$1.reset();\r\n    },\r\n    result: function() {\r\n      var area = areaSum$1 / 2;\r\n      areaSum$1.reset();\r\n      return area;\r\n    }\r\n  };\r\n  \r\n  function areaRingStart$1() {\r\n    areaStream$1.point = areaPointFirst$1;\r\n  }\r\n  \r\n  function areaPointFirst$1(x, y) {\r\n    areaStream$1.point = areaPoint$1;\r\n    x00 = x0$1 = x, y00 = y0$1 = y;\r\n  }\r\n  \r\n  function areaPoint$1(x, y) {\r\n    areaRingSum$1.add(y0$1 * x - x0$1 * y);\r\n    x0$1 = x, y0$1 = y;\r\n  }\r\n  \r\n  function areaRingEnd$1() {\r\n    areaPoint$1(x00, y00);\r\n  }\r\n  \r\n  var x0$2 = Infinity,\r\n      y0$2 = x0$2,\r\n      x1 = -x0$2,\r\n      y1 = x1;\r\n  \r\n  var boundsStream$1 = {\r\n    point: boundsPoint$1,\r\n    lineStart: noop$2,\r\n    lineEnd: noop$2,\r\n    polygonStart: noop$2,\r\n    polygonEnd: noop$2,\r\n    result: function() {\r\n      var bounds = [[x0$2, y0$2], [x1, y1]];\r\n      x1 = y1 = -(y0$2 = x0$2 = Infinity);\r\n      return bounds;\r\n    }\r\n  };\r\n  \r\n  function boundsPoint$1(x, y) {\r\n    if (x < x0$2) x0$2 = x;\r\n    if (x > x1) x1 = x;\r\n    if (y < y0$2) y0$2 = y;\r\n    if (y > y1) y1 = y;\r\n  }\r\n  \r\n  // TODO Enforce positive area for exterior, negative area for interior?\r\n  \r\n  var X0$1 = 0,\r\n      Y0$1 = 0,\r\n      Z0$1 = 0,\r\n      X1$1 = 0,\r\n      Y1$1 = 0,\r\n      Z1$1 = 0,\r\n      X2$1 = 0,\r\n      Y2$1 = 0,\r\n      Z2$1 = 0,\r\n      x00$1,\r\n      y00$1,\r\n      x0$3,\r\n      y0$3;\r\n  \r\n  var centroidStream$1 = {\r\n    point: centroidPoint$1,\r\n    lineStart: centroidLineStart$1,\r\n    lineEnd: centroidLineEnd$1,\r\n    polygonStart: function() {\r\n      centroidStream$1.lineStart = centroidRingStart$1;\r\n      centroidStream$1.lineEnd = centroidRingEnd$1;\r\n    },\r\n    polygonEnd: function() {\r\n      centroidStream$1.point = centroidPoint$1;\r\n      centroidStream$1.lineStart = centroidLineStart$1;\r\n      centroidStream$1.lineEnd = centroidLineEnd$1;\r\n    },\r\n    result: function() {\r\n      var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]\r\n          : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]\r\n          : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]\r\n          : [NaN, NaN];\r\n      X0$1 = Y0$1 = Z0$1 =\r\n      X1$1 = Y1$1 = Z1$1 =\r\n      X2$1 = Y2$1 = Z2$1 = 0;\r\n      return centroid;\r\n    }\r\n  };\r\n  \r\n  function centroidPoint$1(x, y) {\r\n    X0$1 += x;\r\n    Y0$1 += y;\r\n    ++Z0$1;\r\n  }\r\n  \r\n  function centroidLineStart$1() {\r\n    centroidStream$1.point = centroidPointFirstLine;\r\n  }\r\n  \r\n  function centroidPointFirstLine(x, y) {\r\n    centroidStream$1.point = centroidPointLine;\r\n    centroidPoint$1(x0$3 = x, y0$3 = y);\r\n  }\r\n  \r\n  function centroidPointLine(x, y) {\r\n    var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);\r\n    X1$1 += z * (x0$3 + x) / 2;\r\n    Y1$1 += z * (y0$3 + y) / 2;\r\n    Z1$1 += z;\r\n    centroidPoint$1(x0$3 = x, y0$3 = y);\r\n  }\r\n  \r\n  function centroidLineEnd$1() {\r\n    centroidStream$1.point = centroidPoint$1;\r\n  }\r\n  \r\n  function centroidRingStart$1() {\r\n    centroidStream$1.point = centroidPointFirstRing;\r\n  }\r\n  \r\n  function centroidRingEnd$1() {\r\n    centroidPointRing(x00$1, y00$1);\r\n  }\r\n  \r\n  function centroidPointFirstRing(x, y) {\r\n    centroidStream$1.point = centroidPointRing;\r\n    centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);\r\n  }\r\n  \r\n  function centroidPointRing(x, y) {\r\n    var dx = x - x0$3,\r\n        dy = y - y0$3,\r\n        z = sqrt(dx * dx + dy * dy);\r\n  \r\n    X1$1 += z * (x0$3 + x) / 2;\r\n    Y1$1 += z * (y0$3 + y) / 2;\r\n    Z1$1 += z;\r\n  \r\n    z = y0$3 * x - x0$3 * y;\r\n    X2$1 += z * (x0$3 + x);\r\n    Y2$1 += z * (y0$3 + y);\r\n    Z2$1 += z * 3;\r\n    centroidPoint$1(x0$3 = x, y0$3 = y);\r\n  }\r\n  \r\n  function PathContext(context) {\r\n    this._context = context;\r\n  }\r\n  \r\n  PathContext.prototype = {\r\n    _radius: 4.5,\r\n    pointRadius: function(_) {\r\n      return this._radius = _, this;\r\n    },\r\n    polygonStart: function() {\r\n      this._line = 0;\r\n    },\r\n    polygonEnd: function() {\r\n      this._line = NaN;\r\n    },\r\n    lineStart: function() {\r\n      this._point = 0;\r\n    },\r\n    lineEnd: function() {\r\n      if (this._line === 0) this._context.closePath();\r\n      this._point = NaN;\r\n    },\r\n    point: function(x, y) {\r\n      switch (this._point) {\r\n        case 0: {\r\n          this._context.moveTo(x, y);\r\n          this._point = 1;\r\n          break;\r\n        }\r\n        case 1: {\r\n          this._context.lineTo(x, y);\r\n          break;\r\n        }\r\n        default: {\r\n          this._context.moveTo(x + this._radius, y);\r\n          this._context.arc(x, y, this._radius, 0, tau$3);\r\n          break;\r\n        }\r\n      }\r\n    },\r\n    result: noop$2\r\n  };\r\n  \r\n  var lengthSum$1 = adder(),\r\n      lengthRing,\r\n      x00$2,\r\n      y00$2,\r\n      x0$4,\r\n      y0$4;\r\n  \r\n  var lengthStream$1 = {\r\n    point: noop$2,\r\n    lineStart: function() {\r\n      lengthStream$1.point = lengthPointFirst$1;\r\n    },\r\n    lineEnd: function() {\r\n      if (lengthRing) lengthPoint$1(x00$2, y00$2);\r\n      lengthStream$1.point = noop$2;\r\n    },\r\n    polygonStart: function() {\r\n      lengthRing = true;\r\n    },\r\n    polygonEnd: function() {\r\n      lengthRing = null;\r\n    },\r\n    result: function() {\r\n      var length = +lengthSum$1;\r\n      lengthSum$1.reset();\r\n      return length;\r\n    }\r\n  };\r\n  \r\n  function lengthPointFirst$1(x, y) {\r\n    lengthStream$1.point = lengthPoint$1;\r\n    x00$2 = x0$4 = x, y00$2 = y0$4 = y;\r\n  }\r\n  \r\n  function lengthPoint$1(x, y) {\r\n    x0$4 -= x, y0$4 -= y;\r\n    lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4));\r\n    x0$4 = x, y0$4 = y;\r\n  }\r\n  \r\n  function PathString() {\r\n    this._string = [];\r\n  }\r\n  \r\n  PathString.prototype = {\r\n    _radius: 4.5,\r\n    _circle: circle$1(4.5),\r\n    pointRadius: function(_) {\r\n      if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\r\n      return this;\r\n    },\r\n    polygonStart: function() {\r\n      this._line = 0;\r\n    },\r\n    polygonEnd: function() {\r\n      this._line = NaN;\r\n    },\r\n    lineStart: function() {\r\n      this._point = 0;\r\n    },\r\n    lineEnd: function() {\r\n      if (this._line === 0) this._string.push(\"Z\");\r\n      this._point = NaN;\r\n    },\r\n    point: function(x, y) {\r\n      switch (this._point) {\r\n        case 0: {\r\n          this._string.push(\"M\", x, \",\", y);\r\n          this._point = 1;\r\n          break;\r\n        }\r\n        case 1: {\r\n          this._string.push(\"L\", x, \",\", y);\r\n          break;\r\n        }\r\n        default: {\r\n          if (this._circle == null) this._circle = circle$1(this._radius);\r\n          this._string.push(\"M\", x, \",\", y, this._circle);\r\n          break;\r\n        }\r\n      }\r\n    },\r\n    result: function() {\r\n      if (this._string.length) {\r\n        var result = this._string.join(\"\");\r\n        this._string = [];\r\n        return result;\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  };\r\n  \r\n  function circle$1(radius) {\r\n    return \"m0,\" + radius\r\n        + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\r\n        + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\r\n        + \"z\";\r\n  }\r\n  \r\n  function index$1(projection, context) {\r\n    var pointRadius = 4.5,\r\n        projectionStream,\r\n        contextStream;\r\n  \r\n    function path(object) {\r\n      if (object) {\r\n        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\r\n        geoStream(object, projectionStream(contextStream));\r\n      }\r\n      return contextStream.result();\r\n    }\r\n  \r\n    path.area = function(object) {\r\n      geoStream(object, projectionStream(areaStream$1));\r\n      return areaStream$1.result();\r\n    };\r\n  \r\n    path.measure = function(object) {\r\n      geoStream(object, projectionStream(lengthStream$1));\r\n      return lengthStream$1.result();\r\n    };\r\n  \r\n    path.bounds = function(object) {\r\n      geoStream(object, projectionStream(boundsStream$1));\r\n      return boundsStream$1.result();\r\n    };\r\n  \r\n    path.centroid = function(object) {\r\n      geoStream(object, projectionStream(centroidStream$1));\r\n      return centroidStream$1.result();\r\n    };\r\n  \r\n    path.projection = function(_) {\r\n      return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$4) : (projection = _).stream, path) : projection;\r\n    };\r\n  \r\n    path.context = function(_) {\r\n      if (!arguments.length) return context;\r\n      contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);\r\n      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\r\n      return path;\r\n    };\r\n  \r\n    path.pointRadius = function(_) {\r\n      if (!arguments.length) return pointRadius;\r\n      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\r\n      return path;\r\n    };\r\n  \r\n    return path.projection(projection).context(context);\r\n  }\r\n  \r\n  function transform(methods) {\r\n    return {\r\n      stream: transformer(methods)\r\n    };\r\n  }\r\n  \r\n  function transformer(methods) {\r\n    return function(stream) {\r\n      var s = new TransformStream;\r\n      for (var key in methods) s[key] = methods[key];\r\n      s.stream = stream;\r\n      return s;\r\n    };\r\n  }\r\n  \r\n  function TransformStream() {}\r\n  \r\n  TransformStream.prototype = {\r\n    constructor: TransformStream,\r\n    point: function(x, y) { this.stream.point(x, y); },\r\n    sphere: function() { this.stream.sphere(); },\r\n    lineStart: function() { this.stream.lineStart(); },\r\n    lineEnd: function() { this.stream.lineEnd(); },\r\n    polygonStart: function() { this.stream.polygonStart(); },\r\n    polygonEnd: function() { this.stream.polygonEnd(); }\r\n  };\r\n  \r\n  function fit(projection, fitBounds, object) {\r\n    var clip = projection.clipExtent && projection.clipExtent();\r\n    projection.scale(150).translate([0, 0]);\r\n    if (clip != null) projection.clipExtent(null);\r\n    geoStream(object, projection.stream(boundsStream$1));\r\n    fitBounds(boundsStream$1.result());\r\n    if (clip != null) projection.clipExtent(clip);\r\n    return projection;\r\n  }\r\n  \r\n  function fitExtent(projection, extent, object) {\r\n    return fit(projection, function(b) {\r\n      var w = extent[1][0] - extent[0][0],\r\n          h = extent[1][1] - extent[0][1],\r\n          k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\r\n          x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\r\n          y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\r\n      projection.scale(150 * k).translate([x, y]);\r\n    }, object);\r\n  }\r\n  \r\n  function fitSize(projection, size, object) {\r\n    return fitExtent(projection, [[0, 0], size], object);\r\n  }\r\n  \r\n  function fitWidth(projection, width, object) {\r\n    return fit(projection, function(b) {\r\n      var w = +width,\r\n          k = w / (b[1][0] - b[0][0]),\r\n          x = (w - k * (b[1][0] + b[0][0])) / 2,\r\n          y = -k * b[0][1];\r\n      projection.scale(150 * k).translate([x, y]);\r\n    }, object);\r\n  }\r\n  \r\n  function fitHeight(projection, height, object) {\r\n    return fit(projection, function(b) {\r\n      var h = +height,\r\n          k = h / (b[1][1] - b[0][1]),\r\n          x = -k * b[0][0],\r\n          y = (h - k * (b[1][1] + b[0][1])) / 2;\r\n      projection.scale(150 * k).translate([x, y]);\r\n    }, object);\r\n  }\r\n  \r\n  var maxDepth = 16, // maximum depth of subdivision\r\n      cosMinDistance = cos$1(30 * radians); // cos(minimum angular distance)\r\n  \r\n  function resample(project, delta2) {\r\n    return +delta2 ? resample$1(project, delta2) : resampleNone(project);\r\n  }\r\n  \r\n  function resampleNone(project) {\r\n    return transformer({\r\n      point: function(x, y) {\r\n        x = project(x, y);\r\n        this.stream.point(x[0], x[1]);\r\n      }\r\n    });\r\n  }\r\n  \r\n  function resample$1(project, delta2) {\r\n  \r\n    function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\r\n      var dx = x1 - x0,\r\n          dy = y1 - y0,\r\n          d2 = dx * dx + dy * dy;\r\n      if (d2 > 4 * delta2 && depth--) {\r\n        var a = a0 + a1,\r\n            b = b0 + b1,\r\n            c = c0 + c1,\r\n            m = sqrt(a * a + b * b + c * c),\r\n            phi2 = asin(c /= m),\r\n            lambda2 = abs(abs(c) - 1) < epsilon$2 || abs(lambda0 - lambda1) < epsilon$2 ? (lambda0 + lambda1) / 2 : atan2(b, a),\r\n            p = project(lambda2, phi2),\r\n            x2 = p[0],\r\n            y2 = p[1],\r\n            dx2 = x2 - x0,\r\n            dy2 = y2 - y0,\r\n            dz = dy * dx2 - dx * dy2;\r\n        if (dz * dz / d2 > delta2 // perpendicular projected distance\r\n            || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\r\n            || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\r\n          resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\r\n          stream.point(x2, y2);\r\n          resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\r\n        }\r\n      }\r\n    }\r\n    return function(stream) {\r\n      var lambda00, x00, y00, a00, b00, c00, // first point\r\n          lambda0, x0, y0, a0, b0, c0; // previous point\r\n  \r\n      var resampleStream = {\r\n        point: point,\r\n        lineStart: lineStart,\r\n        lineEnd: lineEnd,\r\n        polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\r\n        polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\r\n      };\r\n  \r\n      function point(x, y) {\r\n        x = project(x, y);\r\n        stream.point(x[0], x[1]);\r\n      }\r\n  \r\n      function lineStart() {\r\n        x0 = NaN;\r\n        resampleStream.point = linePoint;\r\n        stream.lineStart();\r\n      }\r\n  \r\n      function linePoint(lambda, phi) {\r\n        var c = cartesian([lambda, phi]), p = project(lambda, phi);\r\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\r\n        stream.point(x0, y0);\r\n      }\r\n  \r\n      function lineEnd() {\r\n        resampleStream.point = point;\r\n        stream.lineEnd();\r\n      }\r\n  \r\n      function ringStart() {\r\n        lineStart();\r\n        resampleStream.point = ringPoint;\r\n        resampleStream.lineEnd = ringEnd;\r\n      }\r\n  \r\n      function ringPoint(lambda, phi) {\r\n        linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\r\n        resampleStream.point = linePoint;\r\n      }\r\n  \r\n      function ringEnd() {\r\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\r\n        resampleStream.lineEnd = lineEnd;\r\n        lineEnd();\r\n      }\r\n  \r\n      return resampleStream;\r\n    };\r\n  }\r\n  \r\n  var transformRadians = transformer({\r\n    point: function(x, y) {\r\n      this.stream.point(x * radians, y * radians);\r\n    }\r\n  });\r\n  \r\n  function transformRotate(rotate) {\r\n    return transformer({\r\n      point: function(x, y) {\r\n        var r = rotate(x, y);\r\n        return this.stream.point(r[0], r[1]);\r\n      }\r\n    });\r\n  }\r\n  \r\n  function scaleTranslate(k, dx, dy, sx, sy) {\r\n    function transform(x, y) {\r\n      x *= sx; y *= sy;\r\n      return [dx + k * x, dy - k * y];\r\n    }\r\n    transform.invert = function(x, y) {\r\n      return [(x - dx) / k * sx, (dy - y) / k * sy];\r\n    };\r\n    return transform;\r\n  }\r\n  \r\n  function scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {\r\n    var cosAlpha = cos$1(alpha),\r\n        sinAlpha = sin$1(alpha),\r\n        a = cosAlpha * k,\r\n        b = sinAlpha * k,\r\n        ai = cosAlpha / k,\r\n        bi = sinAlpha / k,\r\n        ci = (sinAlpha * dy - cosAlpha * dx) / k,\r\n        fi = (sinAlpha * dx + cosAlpha * dy) / k;\r\n    function transform(x, y) {\r\n      x *= sx; y *= sy;\r\n      return [a * x - b * y + dx, dy - b * x - a * y];\r\n    }\r\n    transform.invert = function(x, y) {\r\n      return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];\r\n    };\r\n    return transform;\r\n  }\r\n  \r\n  function projection(project) {\r\n    return projectionMutator(function() { return project; })();\r\n  }\r\n  \r\n  function projectionMutator(projectAt) {\r\n    var project,\r\n        k = 150, // scale\r\n        x = 480, y = 250, // translate\r\n        lambda = 0, phi = 0, // center\r\n        deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate\r\n        alpha = 0, // post-rotate angle\r\n        sx = 1, // reflectX\r\n        sy = 1, // reflectX\r\n        theta = null, preclip = clipAntimeridian, // pre-clip angle\r\n        x0 = null, y0, x1, y1, postclip = identity$4, // post-clip extent\r\n        delta2 = 0.5, // precision\r\n        projectResample,\r\n        projectTransform,\r\n        projectRotateTransform,\r\n        cache,\r\n        cacheStream;\r\n  \r\n    function projection(point) {\r\n      return projectRotateTransform(point[0] * radians, point[1] * radians);\r\n    }\r\n  \r\n    function invert(point) {\r\n      point = projectRotateTransform.invert(point[0], point[1]);\r\n      return point && [point[0] * degrees$1, point[1] * degrees$1];\r\n    }\r\n  \r\n    projection.stream = function(stream) {\r\n      return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\r\n    };\r\n  \r\n    projection.preclip = function(_) {\r\n      return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\r\n    };\r\n  \r\n    projection.postclip = function(_) {\r\n      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\r\n    };\r\n  \r\n    projection.clipAngle = function(_) {\r\n      return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;\r\n    };\r\n  \r\n    projection.clipExtent = function(_) {\r\n      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$4) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\r\n    };\r\n  \r\n    projection.scale = function(_) {\r\n      return arguments.length ? (k = +_, recenter()) : k;\r\n    };\r\n  \r\n    projection.translate = function(_) {\r\n      return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\r\n    };\r\n  \r\n    projection.center = function(_) {\r\n      return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees$1, phi * degrees$1];\r\n    };\r\n  \r\n    projection.rotate = function(_) {\r\n      return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees$1, deltaPhi * degrees$1, deltaGamma * degrees$1];\r\n    };\r\n  \r\n    projection.angle = function(_) {\r\n      return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees$1;\r\n    };\r\n  \r\n    projection.reflectX = function(_) {\r\n      return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;\r\n    };\r\n  \r\n    projection.reflectY = function(_) {\r\n      return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;\r\n    };\r\n  \r\n    projection.precision = function(_) {\r\n      return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\r\n    };\r\n  \r\n    projection.fitExtent = function(extent, object) {\r\n      return fitExtent(projection, extent, object);\r\n    };\r\n  \r\n    projection.fitSize = function(size, object) {\r\n      return fitSize(projection, size, object);\r\n    };\r\n  \r\n    projection.fitWidth = function(width, object) {\r\n      return fitWidth(projection, width, object);\r\n    };\r\n  \r\n    projection.fitHeight = function(height, object) {\r\n      return fitHeight(projection, height, object);\r\n    };\r\n  \r\n    function recenter() {\r\n      var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)),\r\n          transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], sx, sy, alpha);\r\n      rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\r\n      projectTransform = compose(project, transform);\r\n      projectRotateTransform = compose(rotate, projectTransform);\r\n      projectResample = resample(projectTransform, delta2);\r\n      return reset();\r\n    }\r\n  \r\n    function reset() {\r\n      cache = cacheStream = null;\r\n      return projection;\r\n    }\r\n  \r\n    return function() {\r\n      project = projectAt.apply(this, arguments);\r\n      projection.invert = project.invert && invert;\r\n      return recenter();\r\n    };\r\n  }\r\n  \r\n  function conicProjection(projectAt) {\r\n    var phi0 = 0,\r\n        phi1 = pi$3 / 3,\r\n        m = projectionMutator(projectAt),\r\n        p = m(phi0, phi1);\r\n  \r\n    p.parallels = function(_) {\r\n      return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees$1, phi1 * degrees$1];\r\n    };\r\n  \r\n    return p;\r\n  }\r\n  \r\n  function cylindricalEqualAreaRaw(phi0) {\r\n    var cosPhi0 = cos$1(phi0);\r\n  \r\n    function forward(lambda, phi) {\r\n      return [lambda * cosPhi0, sin$1(phi) / cosPhi0];\r\n    }\r\n  \r\n    forward.invert = function(x, y) {\r\n      return [x / cosPhi0, asin(y * cosPhi0)];\r\n    };\r\n  \r\n    return forward;\r\n  }\r\n  \r\n  function conicEqualAreaRaw(y0, y1) {\r\n    var sy0 = sin$1(y0), n = (sy0 + sin$1(y1)) / 2;\r\n  \r\n    // Are the parallels symmetrical around the Equator?\r\n    if (abs(n) < epsilon$2) return cylindricalEqualAreaRaw(y0);\r\n  \r\n    var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\r\n  \r\n    function project(x, y) {\r\n      var r = sqrt(c - 2 * n * sin$1(y)) / n;\r\n      return [r * sin$1(x *= n), r0 - r * cos$1(x)];\r\n    }\r\n  \r\n    project.invert = function(x, y) {\r\n      var r0y = r0 - y,\r\n          l = atan2(x, abs(r0y)) * sign(r0y);\r\n      if (r0y * n < 0)\r\n        l -= pi$3 * sign(x) * sign(r0y);\r\n      return [l / n, asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\r\n    };\r\n  \r\n    return project;\r\n  }\r\n  \r\n  function conicEqualArea() {\r\n    return conicProjection(conicEqualAreaRaw)\r\n        .scale(155.424)\r\n        .center([0, 33.6442]);\r\n  }\r\n  \r\n  function albers() {\r\n    return conicEqualArea()\r\n        .parallels([29.5, 45.5])\r\n        .scale(1070)\r\n        .translate([480, 250])\r\n        .rotate([96, 0])\r\n        .center([-0.6, 38.7]);\r\n  }\r\n  \r\n  // The projections must have mutually exclusive clip regions on the sphere,\r\n  // as this will avoid emitting interleaving lines and polygons.\r\n  function multiplex(streams) {\r\n    var n = streams.length;\r\n    return {\r\n      point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\r\n      sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\r\n      lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\r\n      lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\r\n      polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\r\n      polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\r\n    };\r\n  }\r\n  \r\n  // A composite projection for the United States, configured by default for\r\n  // 960×500. The projection also works quite well at 960×600 if you change the\r\n  // scale to 1285 and adjust the translate accordingly. The set of standard\r\n  // parallels for each region comes from USGS, which is published here:\r\n  // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\r\n  function albersUsa() {\r\n    var cache,\r\n        cacheStream,\r\n        lower48 = albers(), lower48Point,\r\n        alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\r\n        hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\r\n        point, pointStream = {point: function(x, y) { point = [x, y]; }};\r\n  \r\n    function albersUsa(coordinates) {\r\n      var x = coordinates[0], y = coordinates[1];\r\n      return point = null,\r\n          (lower48Point.point(x, y), point)\r\n          || (alaskaPoint.point(x, y), point)\r\n          || (hawaiiPoint.point(x, y), point);\r\n    }\r\n  \r\n    albersUsa.invert = function(coordinates) {\r\n      var k = lower48.scale(),\r\n          t = lower48.translate(),\r\n          x = (coordinates[0] - t[0]) / k,\r\n          y = (coordinates[1] - t[1]) / k;\r\n      return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\r\n          : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\r\n          : lower48).invert(coordinates);\r\n    };\r\n  \r\n    albersUsa.stream = function(stream) {\r\n      return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\r\n    };\r\n  \r\n    albersUsa.precision = function(_) {\r\n      if (!arguments.length) return lower48.precision();\r\n      lower48.precision(_), alaska.precision(_), hawaii.precision(_);\r\n      return reset();\r\n    };\r\n  \r\n    albersUsa.scale = function(_) {\r\n      if (!arguments.length) return lower48.scale();\r\n      lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\r\n      return albersUsa.translate(lower48.translate());\r\n    };\r\n  \r\n    albersUsa.translate = function(_) {\r\n      if (!arguments.length) return lower48.translate();\r\n      var k = lower48.scale(), x = +_[0], y = +_[1];\r\n  \r\n      lower48Point = lower48\r\n          .translate(_)\r\n          .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\r\n          .stream(pointStream);\r\n  \r\n      alaskaPoint = alaska\r\n          .translate([x - 0.307 * k, y + 0.201 * k])\r\n          .clipExtent([[x - 0.425 * k + epsilon$2, y + 0.120 * k + epsilon$2], [x - 0.214 * k - epsilon$2, y + 0.234 * k - epsilon$2]])\r\n          .stream(pointStream);\r\n  \r\n      hawaiiPoint = hawaii\r\n          .translate([x - 0.205 * k, y + 0.212 * k])\r\n          .clipExtent([[x - 0.214 * k + epsilon$2, y + 0.166 * k + epsilon$2], [x - 0.115 * k - epsilon$2, y + 0.234 * k - epsilon$2]])\r\n          .stream(pointStream);\r\n  \r\n      return reset();\r\n    };\r\n  \r\n    albersUsa.fitExtent = function(extent, object) {\r\n      return fitExtent(albersUsa, extent, object);\r\n    };\r\n  \r\n    albersUsa.fitSize = function(size, object) {\r\n      return fitSize(albersUsa, size, object);\r\n    };\r\n  \r\n    albersUsa.fitWidth = function(width, object) {\r\n      return fitWidth(albersUsa, width, object);\r\n    };\r\n  \r\n    albersUsa.fitHeight = function(height, object) {\r\n      return fitHeight(albersUsa, height, object);\r\n    };\r\n  \r\n    function reset() {\r\n      cache = cacheStream = null;\r\n      return albersUsa;\r\n    }\r\n  \r\n    return albersUsa.scale(1070);\r\n  }\r\n  \r\n  function azimuthalRaw(scale) {\r\n    return function(x, y) {\r\n      var cx = cos$1(x),\r\n          cy = cos$1(y),\r\n          k = scale(cx * cy);\r\n      return [\r\n        k * cy * sin$1(x),\r\n        k * sin$1(y)\r\n      ];\r\n    }\r\n  }\r\n  \r\n  function azimuthalInvert(angle) {\r\n    return function(x, y) {\r\n      var z = sqrt(x * x + y * y),\r\n          c = angle(z),\r\n          sc = sin$1(c),\r\n          cc = cos$1(c);\r\n      return [\r\n        atan2(x * sc, z * cc),\r\n        asin(z && y * sc / z)\r\n      ];\r\n    }\r\n  }\r\n  \r\n  var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\r\n    return sqrt(2 / (1 + cxcy));\r\n  });\r\n  \r\n  azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\r\n    return 2 * asin(z / 2);\r\n  });\r\n  \r\n  function azimuthalEqualArea() {\r\n    return projection(azimuthalEqualAreaRaw)\r\n        .scale(124.75)\r\n        .clipAngle(180 - 1e-3);\r\n  }\r\n  \r\n  var azimuthalEquidistantRaw = azimuthalRaw(function(c) {\r\n    return (c = acos(c)) && c / sin$1(c);\r\n  });\r\n  \r\n  azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\r\n    return z;\r\n  });\r\n  \r\n  function azimuthalEquidistant() {\r\n    return projection(azimuthalEquidistantRaw)\r\n        .scale(79.4188)\r\n        .clipAngle(180 - 1e-3);\r\n  }\r\n  \r\n  function mercatorRaw(lambda, phi) {\r\n    return [lambda, log(tan((halfPi$2 + phi) / 2))];\r\n  }\r\n  \r\n  mercatorRaw.invert = function(x, y) {\r\n    return [x, 2 * atan(exp(y)) - halfPi$2];\r\n  };\r\n  \r\n  function mercator() {\r\n    return mercatorProjection(mercatorRaw)\r\n        .scale(961 / tau$3);\r\n  }\r\n  \r\n  function mercatorProjection(project) {\r\n    var m = projection(project),\r\n        center = m.center,\r\n        scale = m.scale,\r\n        translate = m.translate,\r\n        clipExtent = m.clipExtent,\r\n        x0 = null, y0, x1, y1; // clip extent\r\n  \r\n    m.scale = function(_) {\r\n      return arguments.length ? (scale(_), reclip()) : scale();\r\n    };\r\n  \r\n    m.translate = function(_) {\r\n      return arguments.length ? (translate(_), reclip()) : translate();\r\n    };\r\n  \r\n    m.center = function(_) {\r\n      return arguments.length ? (center(_), reclip()) : center();\r\n    };\r\n  \r\n    m.clipExtent = function(_) {\r\n      return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\r\n    };\r\n  \r\n    function reclip() {\r\n      var k = pi$3 * scale(),\r\n          t = m(rotation(m.rotate()).invert([0, 0]));\r\n      return clipExtent(x0 == null\r\n          ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\r\n          ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\r\n          : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\r\n    }\r\n  \r\n    return reclip();\r\n  }\r\n  \r\n  function tany(y) {\r\n    return tan((halfPi$2 + y) / 2);\r\n  }\r\n  \r\n  function conicConformalRaw(y0, y1) {\r\n    var cy0 = cos$1(y0),\r\n        n = y0 === y1 ? sin$1(y0) : log(cy0 / cos$1(y1)) / log(tany(y1) / tany(y0)),\r\n        f = cy0 * pow(tany(y0), n) / n;\r\n  \r\n    if (!n) return mercatorRaw;\r\n  \r\n    function project(x, y) {\r\n      if (f > 0) { if (y < -halfPi$2 + epsilon$2) y = -halfPi$2 + epsilon$2; }\r\n      else { if (y > halfPi$2 - epsilon$2) y = halfPi$2 - epsilon$2; }\r\n      var r = f / pow(tany(y), n);\r\n      return [r * sin$1(n * x), f - r * cos$1(n * x)];\r\n    }\r\n  \r\n    project.invert = function(x, y) {\r\n      var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy),\r\n        l = atan2(x, abs(fy)) * sign(fy);\r\n      if (fy * n < 0)\r\n        l -= pi$3 * sign(x) * sign(fy);\r\n      return [l / n, 2 * atan(pow(f / r, 1 / n)) - halfPi$2];\r\n    };\r\n  \r\n    return project;\r\n  }\r\n  \r\n  function conicConformal() {\r\n    return conicProjection(conicConformalRaw)\r\n        .scale(109.5)\r\n        .parallels([30, 30]);\r\n  }\r\n  \r\n  function equirectangularRaw(lambda, phi) {\r\n    return [lambda, phi];\r\n  }\r\n  \r\n  equirectangularRaw.invert = equirectangularRaw;\r\n  \r\n  function equirectangular() {\r\n    return projection(equirectangularRaw)\r\n        .scale(152.63);\r\n  }\r\n  \r\n  function conicEquidistantRaw(y0, y1) {\r\n    var cy0 = cos$1(y0),\r\n        n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0),\r\n        g = cy0 / n + y0;\r\n  \r\n    if (abs(n) < epsilon$2) return equirectangularRaw;\r\n  \r\n    function project(x, y) {\r\n      var gy = g - y, nx = n * x;\r\n      return [gy * sin$1(nx), g - gy * cos$1(nx)];\r\n    }\r\n  \r\n    project.invert = function(x, y) {\r\n      var gy = g - y,\r\n          l = atan2(x, abs(gy)) * sign(gy);\r\n      if (gy * n < 0)\r\n        l -= pi$3 * sign(x) * sign(gy);\r\n      return [l / n, g - sign(n) * sqrt(x * x + gy * gy)];\r\n    };\r\n  \r\n    return project;\r\n  }\r\n  \r\n  function conicEquidistant() {\r\n    return conicProjection(conicEquidistantRaw)\r\n        .scale(131.154)\r\n        .center([0, 13.9389]);\r\n  }\r\n  \r\n  var A1 = 1.340264,\r\n      A2 = -0.081106,\r\n      A3 = 0.000893,\r\n      A4 = 0.003796,\r\n      M = sqrt(3) / 2,\r\n      iterations = 12;\r\n  \r\n  function equalEarthRaw(lambda, phi) {\r\n    var l = asin(M * sin$1(phi)), l2 = l * l, l6 = l2 * l2 * l2;\r\n    return [\r\n      lambda * cos$1(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),\r\n      l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))\r\n    ];\r\n  }\r\n  \r\n  equalEarthRaw.invert = function(x, y) {\r\n    var l = y, l2 = l * l, l6 = l2 * l2 * l2;\r\n    for (var i = 0, delta, fy, fpy; i < iterations; ++i) {\r\n      fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;\r\n      fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);\r\n      l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;\r\n      if (abs(delta) < epsilon2$1) break;\r\n    }\r\n    return [\r\n      M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos$1(l),\r\n      asin(sin$1(l) / M)\r\n    ];\r\n  };\r\n  \r\n  function equalEarth() {\r\n    return projection(equalEarthRaw)\r\n        .scale(177.158);\r\n  }\r\n  \r\n  function gnomonicRaw(x, y) {\r\n    var cy = cos$1(y), k = cos$1(x) * cy;\r\n    return [cy * sin$1(x) / k, sin$1(y) / k];\r\n  }\r\n  \r\n  gnomonicRaw.invert = azimuthalInvert(atan);\r\n  \r\n  function gnomonic() {\r\n    return projection(gnomonicRaw)\r\n        .scale(144.049)\r\n        .clipAngle(60);\r\n  }\r\n  \r\n  function identity$5() {\r\n    var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, // scale, translate and reflect\r\n        alpha = 0, ca, sa, // angle\r\n        x0 = null, y0, x1, y1, // clip extent\r\n        kx = 1, ky = 1,\r\n        transform = transformer({\r\n          point: function(x, y) {\r\n            var p = projection([x, y]);\r\n            this.stream.point(p[0], p[1]);\r\n          }\r\n        }),\r\n        postclip = identity$4,\r\n        cache,\r\n        cacheStream;\r\n  \r\n    function reset() {\r\n      kx = k * sx;\r\n      ky = k * sy;\r\n      cache = cacheStream = null;\r\n      return projection;\r\n    }\r\n  \r\n    function projection (p) {\r\n      var x = p[0] * kx, y = p[1] * ky;\r\n      if (alpha) {\r\n        var t = y * ca - x * sa;\r\n        x = x * ca + y * sa;\r\n        y = t;\r\n      }    \r\n      return [x + tx, y + ty];\r\n    }\r\n    projection.invert = function(p) {\r\n      var x = p[0] - tx, y = p[1] - ty;\r\n      if (alpha) {\r\n        var t = y * ca + x * sa;\r\n        x = x * ca - y * sa;\r\n        y = t;\r\n      }\r\n      return [x / kx, y / ky];\r\n    };\r\n    projection.stream = function(stream) {\r\n      return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));\r\n    };\r\n    projection.postclip = function(_) {\r\n      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\r\n    };\r\n    projection.clipExtent = function(_) {\r\n      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$4) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\r\n    };\r\n    projection.scale = function(_) {\r\n      return arguments.length ? (k = +_, reset()) : k;\r\n    };\r\n    projection.translate = function(_) {\r\n      return arguments.length ? (tx = +_[0], ty = +_[1], reset()) : [tx, ty];\r\n    };\r\n    projection.angle = function(_) {\r\n      return arguments.length ? (alpha = _ % 360 * radians, sa = sin$1(alpha), ca = cos$1(alpha), reset()) : alpha * degrees$1;\r\n    };\r\n    projection.reflectX = function(_) {\r\n      return arguments.length ? (sx = _ ? -1 : 1, reset()) : sx < 0;\r\n    };\r\n    projection.reflectY = function(_) {\r\n      return arguments.length ? (sy = _ ? -1 : 1, reset()) : sy < 0;\r\n    };\r\n    projection.fitExtent = function(extent, object) {\r\n      return fitExtent(projection, extent, object);\r\n    };\r\n    projection.fitSize = function(size, object) {\r\n      return fitSize(projection, size, object);\r\n    };\r\n    projection.fitWidth = function(width, object) {\r\n      return fitWidth(projection, width, object);\r\n    };\r\n    projection.fitHeight = function(height, object) {\r\n      return fitHeight(projection, height, object);\r\n    };\r\n  \r\n    return projection;\r\n  }\r\n  \r\n  function naturalEarth1Raw(lambda, phi) {\r\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\r\n    return [\r\n      lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\r\n      phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\r\n    ];\r\n  }\r\n  \r\n  naturalEarth1Raw.invert = function(x, y) {\r\n    var phi = y, i = 25, delta;\r\n    do {\r\n      var phi2 = phi * phi, phi4 = phi2 * phi2;\r\n      phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\r\n          (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\r\n    } while (abs(delta) > epsilon$2 && --i > 0);\r\n    return [\r\n      x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\r\n      phi\r\n    ];\r\n  };\r\n  \r\n  function naturalEarth1() {\r\n    return projection(naturalEarth1Raw)\r\n        .scale(175.295);\r\n  }\r\n  \r\n  function orthographicRaw(x, y) {\r\n    return [cos$1(y) * sin$1(x), sin$1(y)];\r\n  }\r\n  \r\n  orthographicRaw.invert = azimuthalInvert(asin);\r\n  \r\n  function orthographic() {\r\n    return projection(orthographicRaw)\r\n        .scale(249.5)\r\n        .clipAngle(90 + epsilon$2);\r\n  }\r\n  \r\n  function stereographicRaw(x, y) {\r\n    var cy = cos$1(y), k = 1 + cos$1(x) * cy;\r\n    return [cy * sin$1(x) / k, sin$1(y) / k];\r\n  }\r\n  \r\n  stereographicRaw.invert = azimuthalInvert(function(z) {\r\n    return 2 * atan(z);\r\n  });\r\n  \r\n  function stereographic() {\r\n    return projection(stereographicRaw)\r\n        .scale(250)\r\n        .clipAngle(142);\r\n  }\r\n  \r\n  function transverseMercatorRaw(lambda, phi) {\r\n    return [log(tan((halfPi$2 + phi) / 2)), -lambda];\r\n  }\r\n  \r\n  transverseMercatorRaw.invert = function(x, y) {\r\n    return [-y, 2 * atan(exp(x)) - halfPi$2];\r\n  };\r\n  \r\n  function transverseMercator() {\r\n    var m = mercatorProjection(transverseMercatorRaw),\r\n        center = m.center,\r\n        rotate = m.rotate;\r\n  \r\n    m.center = function(_) {\r\n      return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\r\n    };\r\n  \r\n    m.rotate = function(_) {\r\n      return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\r\n    };\r\n  \r\n    return rotate([0, 0, 90])\r\n        .scale(159.155);\r\n  }\r\n  \r\n  function defaultSeparation(a, b) {\r\n    return a.parent === b.parent ? 1 : 2;\r\n  }\r\n  \r\n  function meanX(children) {\r\n    return children.reduce(meanXReduce, 0) / children.length;\r\n  }\r\n  \r\n  function meanXReduce(x, c) {\r\n    return x + c.x;\r\n  }\r\n  \r\n  function maxY(children) {\r\n    return 1 + children.reduce(maxYReduce, 0);\r\n  }\r\n  \r\n  function maxYReduce(y, c) {\r\n    return Math.max(y, c.y);\r\n  }\r\n  \r\n  function leafLeft(node) {\r\n    var children;\r\n    while (children = node.children) node = children[0];\r\n    return node;\r\n  }\r\n  \r\n  function leafRight(node) {\r\n    var children;\r\n    while (children = node.children) node = children[children.length - 1];\r\n    return node;\r\n  }\r\n  \r\n  function cluster() {\r\n    var separation = defaultSeparation,\r\n        dx = 1,\r\n        dy = 1,\r\n        nodeSize = false;\r\n  \r\n    function cluster(root) {\r\n      var previousNode,\r\n          x = 0;\r\n  \r\n      // First walk, computing the initial x & y values.\r\n      root.eachAfter(function(node) {\r\n        var children = node.children;\r\n        if (children) {\r\n          node.x = meanX(children);\r\n          node.y = maxY(children);\r\n        } else {\r\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\r\n          node.y = 0;\r\n          previousNode = node;\r\n        }\r\n      });\r\n  \r\n      var left = leafLeft(root),\r\n          right = leafRight(root),\r\n          x0 = left.x - separation(left, right) / 2,\r\n          x1 = right.x + separation(right, left) / 2;\r\n  \r\n      // Second walk, normalizing x & y to the desired size.\r\n      return root.eachAfter(nodeSize ? function(node) {\r\n        node.x = (node.x - root.x) * dx;\r\n        node.y = (root.y - node.y) * dy;\r\n      } : function(node) {\r\n        node.x = (node.x - x0) / (x1 - x0) * dx;\r\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\r\n      });\r\n    }\r\n  \r\n    cluster.separation = function(x) {\r\n      return arguments.length ? (separation = x, cluster) : separation;\r\n    };\r\n  \r\n    cluster.size = function(x) {\r\n      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);\r\n    };\r\n  \r\n    cluster.nodeSize = function(x) {\r\n      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);\r\n    };\r\n  \r\n    return cluster;\r\n  }\r\n  \r\n  function count(node) {\r\n    var sum = 0,\r\n        children = node.children,\r\n        i = children && children.length;\r\n    if (!i) sum = 1;\r\n    else while (--i >= 0) sum += children[i].value;\r\n    node.value = sum;\r\n  }\r\n  \r\n  function node_count() {\r\n    return this.eachAfter(count);\r\n  }\r\n  \r\n  function node_each(callback) {\r\n    var node = this, current, next = [node], children, i, n;\r\n    do {\r\n      current = next.reverse(), next = [];\r\n      while (node = current.pop()) {\r\n        callback(node), children = node.children;\r\n        if (children) for (i = 0, n = children.length; i < n; ++i) {\r\n          next.push(children[i]);\r\n        }\r\n      }\r\n    } while (next.length);\r\n    return this;\r\n  }\r\n  \r\n  function node_eachBefore(callback) {\r\n    var node = this, nodes = [node], children, i;\r\n    while (node = nodes.pop()) {\r\n      callback(node), children = node.children;\r\n      if (children) for (i = children.length - 1; i >= 0; --i) {\r\n        nodes.push(children[i]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n  \r\n  function node_eachAfter(callback) {\r\n    var node = this, nodes = [node], next = [], children, i, n;\r\n    while (node = nodes.pop()) {\r\n      next.push(node), children = node.children;\r\n      if (children) for (i = 0, n = children.length; i < n; ++i) {\r\n        nodes.push(children[i]);\r\n      }\r\n    }\r\n    while (node = next.pop()) {\r\n      callback(node);\r\n    }\r\n    return this;\r\n  }\r\n  \r\n  function node_sum(value) {\r\n    return this.eachAfter(function(node) {\r\n      var sum = +value(node.data) || 0,\r\n          children = node.children,\r\n          i = children && children.length;\r\n      while (--i >= 0) sum += children[i].value;\r\n      node.value = sum;\r\n    });\r\n  }\r\n  \r\n  function node_sort(compare) {\r\n    return this.eachBefore(function(node) {\r\n      if (node.children) {\r\n        node.children.sort(compare);\r\n      }\r\n    });\r\n  }\r\n  \r\n  function node_path(end) {\r\n    var start = this,\r\n        ancestor = leastCommonAncestor(start, end),\r\n        nodes = [start];\r\n    while (start !== ancestor) {\r\n      start = start.parent;\r\n      nodes.push(start);\r\n    }\r\n    var k = nodes.length;\r\n    while (end !== ancestor) {\r\n      nodes.splice(k, 0, end);\r\n      end = end.parent;\r\n    }\r\n    return nodes;\r\n  }\r\n  \r\n  function leastCommonAncestor(a, b) {\r\n    if (a === b) return a;\r\n    var aNodes = a.ancestors(),\r\n        bNodes = b.ancestors(),\r\n        c = null;\r\n    a = aNodes.pop();\r\n    b = bNodes.pop();\r\n    while (a === b) {\r\n      c = a;\r\n      a = aNodes.pop();\r\n      b = bNodes.pop();\r\n    }\r\n    return c;\r\n  }\r\n  \r\n  function node_ancestors() {\r\n    var node = this, nodes = [node];\r\n    while (node = node.parent) {\r\n      nodes.push(node);\r\n    }\r\n    return nodes;\r\n  }\r\n  \r\n  function node_descendants() {\r\n    var nodes = [];\r\n    this.each(function(node) {\r\n      nodes.push(node);\r\n    });\r\n    return nodes;\r\n  }\r\n  \r\n  function node_leaves() {\r\n    var leaves = [];\r\n    this.eachBefore(function(node) {\r\n      if (!node.children) {\r\n        leaves.push(node);\r\n      }\r\n    });\r\n    return leaves;\r\n  }\r\n  \r\n  function node_links() {\r\n    var root = this, links = [];\r\n    root.each(function(node) {\r\n      if (node !== root) { // Don’t include the root’s parent, if any.\r\n        links.push({source: node.parent, target: node});\r\n      }\r\n    });\r\n    return links;\r\n  }\r\n  \r\n  function hierarchy(data, children) {\r\n    var root = new Node(data),\r\n        valued = +data.value && (root.value = data.value),\r\n        node,\r\n        nodes = [root],\r\n        child,\r\n        childs,\r\n        i,\r\n        n;\r\n  \r\n    if (children == null) children = defaultChildren;\r\n  \r\n    while (node = nodes.pop()) {\r\n      if (valued) node.value = +node.data.value;\r\n      if ((childs = children(node.data)) && (n = childs.length)) {\r\n        node.children = new Array(n);\r\n        for (i = n - 1; i >= 0; --i) {\r\n          nodes.push(child = node.children[i] = new Node(childs[i]));\r\n          child.parent = node;\r\n          child.depth = node.depth + 1;\r\n        }\r\n      }\r\n    }\r\n  \r\n    return root.eachBefore(computeHeight);\r\n  }\r\n  \r\n  function node_copy() {\r\n    return hierarchy(this).eachBefore(copyData);\r\n  }\r\n  \r\n  function defaultChildren(d) {\r\n    return d.children;\r\n  }\r\n  \r\n  function copyData(node) {\r\n    node.data = node.data.data;\r\n  }\r\n  \r\n  function computeHeight(node) {\r\n    var height = 0;\r\n    do node.height = height;\r\n    while ((node = node.parent) && (node.height < ++height));\r\n  }\r\n  \r\n  function Node(data) {\r\n    this.data = data;\r\n    this.depth =\r\n    this.height = 0;\r\n    this.parent = null;\r\n  }\r\n  \r\n  Node.prototype = hierarchy.prototype = {\r\n    constructor: Node,\r\n    count: node_count,\r\n    each: node_each,\r\n    eachAfter: node_eachAfter,\r\n    eachBefore: node_eachBefore,\r\n    sum: node_sum,\r\n    sort: node_sort,\r\n    path: node_path,\r\n    ancestors: node_ancestors,\r\n    descendants: node_descendants,\r\n    leaves: node_leaves,\r\n    links: node_links,\r\n    copy: node_copy\r\n  };\r\n  \r\n  var slice$4 = Array.prototype.slice;\r\n  \r\n  function shuffle$1(array) {\r\n    var m = array.length,\r\n        t,\r\n        i;\r\n  \r\n    while (m) {\r\n      i = Math.random() * m-- | 0;\r\n      t = array[m];\r\n      array[m] = array[i];\r\n      array[i] = t;\r\n    }\r\n  \r\n    return array;\r\n  }\r\n  \r\n  function enclose(circles) {\r\n    var i = 0, n = (circles = shuffle$1(slice$4.call(circles))).length, B = [], p, e;\r\n  \r\n    while (i < n) {\r\n      p = circles[i];\r\n      if (e && enclosesWeak(e, p)) ++i;\r\n      else e = encloseBasis(B = extendBasis(B, p)), i = 0;\r\n    }\r\n  \r\n    return e;\r\n  }\r\n  \r\n  function extendBasis(B, p) {\r\n    var i, j;\r\n  \r\n    if (enclosesWeakAll(p, B)) return [p];\r\n  \r\n    // If we get here then B must have at least one element.\r\n    for (i = 0; i < B.length; ++i) {\r\n      if (enclosesNot(p, B[i])\r\n          && enclosesWeakAll(encloseBasis2(B[i], p), B)) {\r\n        return [B[i], p];\r\n      }\r\n    }\r\n  \r\n    // If we get here then B must have at least two elements.\r\n    for (i = 0; i < B.length - 1; ++i) {\r\n      for (j = i + 1; j < B.length; ++j) {\r\n        if (enclosesNot(encloseBasis2(B[i], B[j]), p)\r\n            && enclosesNot(encloseBasis2(B[i], p), B[j])\r\n            && enclosesNot(encloseBasis2(B[j], p), B[i])\r\n            && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {\r\n          return [B[i], B[j], p];\r\n        }\r\n      }\r\n    }\r\n  \r\n    // If we get here then something is very wrong.\r\n    throw new Error;\r\n  }\r\n  \r\n  function enclosesNot(a, b) {\r\n    var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;\r\n    return dr < 0 || dr * dr < dx * dx + dy * dy;\r\n  }\r\n  \r\n  function enclosesWeak(a, b) {\r\n    var dr = a.r - b.r + 1e-6, dx = b.x - a.x, dy = b.y - a.y;\r\n    return dr > 0 && dr * dr > dx * dx + dy * dy;\r\n  }\r\n  \r\n  function enclosesWeakAll(a, B) {\r\n    for (var i = 0; i < B.length; ++i) {\r\n      if (!enclosesWeak(a, B[i])) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  function encloseBasis(B) {\r\n    switch (B.length) {\r\n      case 1: return encloseBasis1(B[0]);\r\n      case 2: return encloseBasis2(B[0], B[1]);\r\n      case 3: return encloseBasis3(B[0], B[1], B[2]);\r\n    }\r\n  }\r\n  \r\n  function encloseBasis1(a) {\r\n    return {\r\n      x: a.x,\r\n      y: a.y,\r\n      r: a.r\r\n    };\r\n  }\r\n  \r\n  function encloseBasis2(a, b) {\r\n    var x1 = a.x, y1 = a.y, r1 = a.r,\r\n        x2 = b.x, y2 = b.y, r2 = b.r,\r\n        x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,\r\n        l = Math.sqrt(x21 * x21 + y21 * y21);\r\n    return {\r\n      x: (x1 + x2 + x21 / l * r21) / 2,\r\n      y: (y1 + y2 + y21 / l * r21) / 2,\r\n      r: (l + r1 + r2) / 2\r\n    };\r\n  }\r\n  \r\n  function encloseBasis3(a, b, c) {\r\n    var x1 = a.x, y1 = a.y, r1 = a.r,\r\n        x2 = b.x, y2 = b.y, r2 = b.r,\r\n        x3 = c.x, y3 = c.y, r3 = c.r,\r\n        a2 = x1 - x2,\r\n        a3 = x1 - x3,\r\n        b2 = y1 - y2,\r\n        b3 = y1 - y3,\r\n        c2 = r2 - r1,\r\n        c3 = r3 - r1,\r\n        d1 = x1 * x1 + y1 * y1 - r1 * r1,\r\n        d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,\r\n        d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,\r\n        ab = a3 * b2 - a2 * b3,\r\n        xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,\r\n        xb = (b3 * c2 - b2 * c3) / ab,\r\n        ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,\r\n        yb = (a2 * c3 - a3 * c2) / ab,\r\n        A = xb * xb + yb * yb - 1,\r\n        B = 2 * (r1 + xa * xb + ya * yb),\r\n        C = xa * xa + ya * ya - r1 * r1,\r\n        r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);\r\n    return {\r\n      x: x1 + xa + xb * r,\r\n      y: y1 + ya + yb * r,\r\n      r: r\r\n    };\r\n  }\r\n  \r\n  function place(b, a, c) {\r\n    var dx = b.x - a.x, x, a2,\r\n        dy = b.y - a.y, y, b2,\r\n        d2 = dx * dx + dy * dy;\r\n    if (d2) {\r\n      a2 = a.r + c.r, a2 *= a2;\r\n      b2 = b.r + c.r, b2 *= b2;\r\n      if (a2 > b2) {\r\n        x = (d2 + b2 - a2) / (2 * d2);\r\n        y = Math.sqrt(Math.max(0, b2 / d2 - x * x));\r\n        c.x = b.x - x * dx - y * dy;\r\n        c.y = b.y - x * dy + y * dx;\r\n      } else {\r\n        x = (d2 + a2 - b2) / (2 * d2);\r\n        y = Math.sqrt(Math.max(0, a2 / d2 - x * x));\r\n        c.x = a.x + x * dx - y * dy;\r\n        c.y = a.y + x * dy + y * dx;\r\n      }\r\n    } else {\r\n      c.x = a.x + c.r;\r\n      c.y = a.y;\r\n    }\r\n  }\r\n  \r\n  function intersects(a, b) {\r\n    var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;\r\n    return dr > 0 && dr * dr > dx * dx + dy * dy;\r\n  }\r\n  \r\n  function score(node) {\r\n    var a = node._,\r\n        b = node.next._,\r\n        ab = a.r + b.r,\r\n        dx = (a.x * b.r + b.x * a.r) / ab,\r\n        dy = (a.y * b.r + b.y * a.r) / ab;\r\n    return dx * dx + dy * dy;\r\n  }\r\n  \r\n  function Node$1(circle) {\r\n    this._ = circle;\r\n    this.next = null;\r\n    this.previous = null;\r\n  }\r\n  \r\n  function packEnclose(circles) {\r\n    if (!(n = circles.length)) return 0;\r\n  \r\n    var a, b, c, n, aa, ca, i, j, k, sj, sk;\r\n  \r\n    // Place the first circle.\r\n    a = circles[0], a.x = 0, a.y = 0;\r\n    if (!(n > 1)) return a.r;\r\n  \r\n    // Place the second circle.\r\n    b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\r\n    if (!(n > 2)) return a.r + b.r;\r\n  \r\n    // Place the third circle.\r\n    place(b, a, c = circles[2]);\r\n  \r\n    // Initialize the front-chain using the first three circles a, b and c.\r\n    a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);\r\n    a.next = c.previous = b;\r\n    b.next = a.previous = c;\r\n    c.next = b.previous = a;\r\n  \r\n    // Attempt to place each remaining circle…\r\n    pack: for (i = 3; i < n; ++i) {\r\n      place(a._, b._, c = circles[i]), c = new Node$1(c);\r\n  \r\n      // Find the closest intersecting circle on the front-chain, if any.\r\n      // “Closeness” is determined by linear distance along the front-chain.\r\n      // “Ahead” or “behind” is likewise determined by linear distance.\r\n      j = b.next, k = a.previous, sj = b._.r, sk = a._.r;\r\n      do {\r\n        if (sj <= sk) {\r\n          if (intersects(j._, c._)) {\r\n            b = j, a.next = b, b.previous = a, --i;\r\n            continue pack;\r\n          }\r\n          sj += j._.r, j = j.next;\r\n        } else {\r\n          if (intersects(k._, c._)) {\r\n            a = k, a.next = b, b.previous = a, --i;\r\n            continue pack;\r\n          }\r\n          sk += k._.r, k = k.previous;\r\n        }\r\n      } while (j !== k.next);\r\n  \r\n      // Success! Insert the new circle c between a and b.\r\n      c.previous = a, c.next = b, a.next = b.previous = b = c;\r\n  \r\n      // Compute the new closest circle pair to the centroid.\r\n      aa = score(a);\r\n      while ((c = c.next) !== b) {\r\n        if ((ca = score(c)) < aa) {\r\n          a = c, aa = ca;\r\n        }\r\n      }\r\n      b = a.next;\r\n    }\r\n  \r\n    // Compute the enclosing circle of the front chain.\r\n    a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);\r\n  \r\n    // Translate the circles to put the enclosing circle around the origin.\r\n    for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\r\n  \r\n    return c.r;\r\n  }\r\n  \r\n  function siblings(circles) {\r\n    packEnclose(circles);\r\n    return circles;\r\n  }\r\n  \r\n  function optional(f) {\r\n    return f == null ? null : required(f);\r\n  }\r\n  \r\n  function required(f) {\r\n    if (typeof f !== \"function\") throw new Error;\r\n    return f;\r\n  }\r\n  \r\n  function constantZero() {\r\n    return 0;\r\n  }\r\n  \r\n  function constant$9(x) {\r\n    return function() {\r\n      return x;\r\n    };\r\n  }\r\n  \r\n  function defaultRadius$1(d) {\r\n    return Math.sqrt(d.value);\r\n  }\r\n  \r\n  function index$2() {\r\n    var radius = null,\r\n        dx = 1,\r\n        dy = 1,\r\n        padding = constantZero;\r\n  \r\n    function pack(root) {\r\n      root.x = dx / 2, root.y = dy / 2;\r\n      if (radius) {\r\n        root.eachBefore(radiusLeaf(radius))\r\n            .eachAfter(packChildren(padding, 0.5))\r\n            .eachBefore(translateChild(1));\r\n      } else {\r\n        root.eachBefore(radiusLeaf(defaultRadius$1))\r\n            .eachAfter(packChildren(constantZero, 1))\r\n            .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))\r\n            .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));\r\n      }\r\n      return root;\r\n    }\r\n  \r\n    pack.radius = function(x) {\r\n      return arguments.length ? (radius = optional(x), pack) : radius;\r\n    };\r\n  \r\n    pack.size = function(x) {\r\n      return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];\r\n    };\r\n  \r\n    pack.padding = function(x) {\r\n      return arguments.length ? (padding = typeof x === \"function\" ? x : constant$9(+x), pack) : padding;\r\n    };\r\n  \r\n    return pack;\r\n  }\r\n  \r\n  function radiusLeaf(radius) {\r\n    return function(node) {\r\n      if (!node.children) {\r\n        node.r = Math.max(0, +radius(node) || 0);\r\n      }\r\n    };\r\n  }\r\n  \r\n  function packChildren(padding, k) {\r\n    return function(node) {\r\n      if (children = node.children) {\r\n        var children,\r\n            i,\r\n            n = children.length,\r\n            r = padding(node) * k || 0,\r\n            e;\r\n  \r\n        if (r) for (i = 0; i < n; ++i) children[i].r += r;\r\n        e = packEnclose(children);\r\n        if (r) for (i = 0; i < n; ++i) children[i].r -= r;\r\n        node.r = e + r;\r\n      }\r\n    };\r\n  }\r\n  \r\n  function translateChild(k) {\r\n    return function(node) {\r\n      var parent = node.parent;\r\n      node.r *= k;\r\n      if (parent) {\r\n        node.x = parent.x + k * node.x;\r\n        node.y = parent.y + k * node.y;\r\n      }\r\n    };\r\n  }\r\n  \r\n  function roundNode(node) {\r\n    node.x0 = Math.round(node.x0);\r\n    node.y0 = Math.round(node.y0);\r\n    node.x1 = Math.round(node.x1);\r\n    node.y1 = Math.round(node.y1);\r\n  }\r\n  \r\n  function treemapDice(parent, x0, y0, x1, y1) {\r\n    var nodes = parent.children,\r\n        node,\r\n        i = -1,\r\n        n = nodes.length,\r\n        k = parent.value && (x1 - x0) / parent.value;\r\n  \r\n    while (++i < n) {\r\n      node = nodes[i], node.y0 = y0, node.y1 = y1;\r\n      node.x0 = x0, node.x1 = x0 += node.value * k;\r\n    }\r\n  }\r\n  \r\n  function partition() {\r\n    var dx = 1,\r\n        dy = 1,\r\n        padding = 0,\r\n        round = false;\r\n  \r\n    function partition(root) {\r\n      var n = root.height + 1;\r\n      root.x0 =\r\n      root.y0 = padding;\r\n      root.x1 = dx;\r\n      root.y1 = dy / n;\r\n      root.eachBefore(positionNode(dy, n));\r\n      if (round) root.eachBefore(roundNode);\r\n      return root;\r\n    }\r\n  \r\n    function positionNode(dy, n) {\r\n      return function(node) {\r\n        if (node.children) {\r\n          treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\r\n        }\r\n        var x0 = node.x0,\r\n            y0 = node.y0,\r\n            x1 = node.x1 - padding,\r\n            y1 = node.y1 - padding;\r\n        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\r\n        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\r\n        node.x0 = x0;\r\n        node.y0 = y0;\r\n        node.x1 = x1;\r\n        node.y1 = y1;\r\n      };\r\n    }\r\n  \r\n    partition.round = function(x) {\r\n      return arguments.length ? (round = !!x, partition) : round;\r\n    };\r\n  \r\n    partition.size = function(x) {\r\n      return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\r\n    };\r\n  \r\n    partition.padding = function(x) {\r\n      return arguments.length ? (padding = +x, partition) : padding;\r\n    };\r\n  \r\n    return partition;\r\n  }\r\n  \r\n  var keyPrefix$1 = \"$\", // Protect against keys like “__proto__”.\r\n      preroot = {depth: -1},\r\n      ambiguous = {};\r\n  \r\n  function defaultId(d) {\r\n    return d.id;\r\n  }\r\n  \r\n  function defaultParentId(d) {\r\n    return d.parentId;\r\n  }\r\n  \r\n  function stratify() {\r\n    var id = defaultId,\r\n        parentId = defaultParentId;\r\n  \r\n    function stratify(data) {\r\n      var d,\r\n          i,\r\n          n = data.length,\r\n          root,\r\n          parent,\r\n          node,\r\n          nodes = new Array(n),\r\n          nodeId,\r\n          nodeKey,\r\n          nodeByKey = {};\r\n  \r\n      for (i = 0; i < n; ++i) {\r\n        d = data[i], node = nodes[i] = new Node(d);\r\n        if ((nodeId = id(d, i, data)) != null && (nodeId += \"\")) {\r\n          nodeKey = keyPrefix$1 + (node.id = nodeId);\r\n          nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;\r\n        }\r\n      }\r\n  \r\n      for (i = 0; i < n; ++i) {\r\n        node = nodes[i], nodeId = parentId(data[i], i, data);\r\n        if (nodeId == null || !(nodeId += \"\")) {\r\n          if (root) throw new Error(\"multiple roots\");\r\n          root = node;\r\n        } else {\r\n          parent = nodeByKey[keyPrefix$1 + nodeId];\r\n          if (!parent) throw new Error(\"missing: \" + nodeId);\r\n          if (parent === ambiguous) throw new Error(\"ambiguous: \" + nodeId);\r\n          if (parent.children) parent.children.push(node);\r\n          else parent.children = [node];\r\n          node.parent = parent;\r\n        }\r\n      }\r\n  \r\n      if (!root) throw new Error(\"no root\");\r\n      root.parent = preroot;\r\n      root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);\r\n      root.parent = null;\r\n      if (n > 0) throw new Error(\"cycle\");\r\n  \r\n      return root;\r\n    }\r\n  \r\n    stratify.id = function(x) {\r\n      return arguments.length ? (id = required(x), stratify) : id;\r\n    };\r\n  \r\n    stratify.parentId = function(x) {\r\n      return arguments.length ? (parentId = required(x), stratify) : parentId;\r\n    };\r\n  \r\n    return stratify;\r\n  }\r\n  \r\n  function defaultSeparation$1(a, b) {\r\n    return a.parent === b.parent ? 1 : 2;\r\n  }\r\n  \r\n  // function radialSeparation(a, b) {\r\n  //   return (a.parent === b.parent ? 1 : 2) / a.depth;\r\n  // }\r\n  \r\n  // This function is used to traverse the left contour of a subtree (or\r\n  // subforest). It returns the successor of v on this contour. This successor is\r\n  // either given by the leftmost child of v or by the thread of v. The function\r\n  // returns null if and only if v is on the highest level of its subtree.\r\n  function nextLeft(v) {\r\n    var children = v.children;\r\n    return children ? children[0] : v.t;\r\n  }\r\n  \r\n  // This function works analogously to nextLeft.\r\n  function nextRight(v) {\r\n    var children = v.children;\r\n    return children ? children[children.length - 1] : v.t;\r\n  }\r\n  \r\n  // Shifts the current subtree rooted at w+. This is done by increasing\r\n  // prelim(w+) and mod(w+) by shift.\r\n  function moveSubtree(wm, wp, shift) {\r\n    var change = shift / (wp.i - wm.i);\r\n    wp.c -= change;\r\n    wp.s += shift;\r\n    wm.c += change;\r\n    wp.z += shift;\r\n    wp.m += shift;\r\n  }\r\n  \r\n  // All other shifts, applied to the smaller subtrees between w- and w+, are\r\n  // performed by this function. To prepare the shifts, we have to adjust\r\n  // change(w+), shift(w+), and change(w-).\r\n  function executeShifts(v) {\r\n    var shift = 0,\r\n        change = 0,\r\n        children = v.children,\r\n        i = children.length,\r\n        w;\r\n    while (--i >= 0) {\r\n      w = children[i];\r\n      w.z += shift;\r\n      w.m += shift;\r\n      shift += w.s + (change += w.c);\r\n    }\r\n  }\r\n  \r\n  // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,\r\n  // returns the specified (default) ancestor.\r\n  function nextAncestor(vim, v, ancestor) {\r\n    return vim.a.parent === v.parent ? vim.a : ancestor;\r\n  }\r\n  \r\n  function TreeNode(node, i) {\r\n    this._ = node;\r\n    this.parent = null;\r\n    this.children = null;\r\n    this.A = null; // default ancestor\r\n    this.a = this; // ancestor\r\n    this.z = 0; // prelim\r\n    this.m = 0; // mod\r\n    this.c = 0; // change\r\n    this.s = 0; // shift\r\n    this.t = null; // thread\r\n    this.i = i; // number\r\n  }\r\n  \r\n  TreeNode.prototype = Object.create(Node.prototype);\r\n  \r\n  function treeRoot(root) {\r\n    var tree = new TreeNode(root, 0),\r\n        node,\r\n        nodes = [tree],\r\n        child,\r\n        children,\r\n        i,\r\n        n;\r\n  \r\n    while (node = nodes.pop()) {\r\n      if (children = node._.children) {\r\n        node.children = new Array(n = children.length);\r\n        for (i = n - 1; i >= 0; --i) {\r\n          nodes.push(child = node.children[i] = new TreeNode(children[i], i));\r\n          child.parent = node;\r\n        }\r\n      }\r\n    }\r\n  \r\n    (tree.parent = new TreeNode(null, 0)).children = [tree];\r\n    return tree;\r\n  }\r\n  \r\n  // Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\r\n  function tree() {\r\n    var separation = defaultSeparation$1,\r\n        dx = 1,\r\n        dy = 1,\r\n        nodeSize = null;\r\n  \r\n    function tree(root) {\r\n      var t = treeRoot(root);\r\n  \r\n      // Compute the layout using Buchheim et al.’s algorithm.\r\n      t.eachAfter(firstWalk), t.parent.m = -t.z;\r\n      t.eachBefore(secondWalk);\r\n  \r\n      // If a fixed node size is specified, scale x and y.\r\n      if (nodeSize) root.eachBefore(sizeNode);\r\n  \r\n      // If a fixed tree size is specified, scale x and y based on the extent.\r\n      // Compute the left-most, right-most, and depth-most nodes for extents.\r\n      else {\r\n        var left = root,\r\n            right = root,\r\n            bottom = root;\r\n        root.eachBefore(function(node) {\r\n          if (node.x < left.x) left = node;\r\n          if (node.x > right.x) right = node;\r\n          if (node.depth > bottom.depth) bottom = node;\r\n        });\r\n        var s = left === right ? 1 : separation(left, right) / 2,\r\n            tx = s - left.x,\r\n            kx = dx / (right.x + s + tx),\r\n            ky = dy / (bottom.depth || 1);\r\n        root.eachBefore(function(node) {\r\n          node.x = (node.x + tx) * kx;\r\n          node.y = node.depth * ky;\r\n        });\r\n      }\r\n  \r\n      return root;\r\n    }\r\n  \r\n    // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\r\n    // applied recursively to the children of v, as well as the function\r\n    // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\r\n    // node v is placed to the midpoint of its outermost children.\r\n    function firstWalk(v) {\r\n      var children = v.children,\r\n          siblings = v.parent.children,\r\n          w = v.i ? siblings[v.i - 1] : null;\r\n      if (children) {\r\n        executeShifts(v);\r\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\r\n        if (w) {\r\n          v.z = w.z + separation(v._, w._);\r\n          v.m = v.z - midpoint;\r\n        } else {\r\n          v.z = midpoint;\r\n        }\r\n      } else if (w) {\r\n        v.z = w.z + separation(v._, w._);\r\n      }\r\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\r\n    }\r\n  \r\n    // Computes all real x-coordinates by summing up the modifiers recursively.\r\n    function secondWalk(v) {\r\n      v._.x = v.z + v.parent.m;\r\n      v.m += v.parent.m;\r\n    }\r\n  \r\n    // The core of the algorithm. Here, a new subtree is combined with the\r\n    // previous subtrees. Threads are used to traverse the inside and outside\r\n    // contours of the left and right subtree up to the highest common level. The\r\n    // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\r\n    // superscript o means outside and i means inside, the subscript - means left\r\n    // subtree and + means right subtree. For summing up the modifiers along the\r\n    // contour, we use respective variables si+, si-, so-, and so+. Whenever two\r\n    // nodes of the inside contours conflict, we compute the left one of the\r\n    // greatest uncommon ancestors using the function ANCESTOR and call MOVE\r\n    // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\r\n    // Finally, we add a new thread (if necessary).\r\n    function apportion(v, w, ancestor) {\r\n      if (w) {\r\n        var vip = v,\r\n            vop = v,\r\n            vim = w,\r\n            vom = vip.parent.children[0],\r\n            sip = vip.m,\r\n            sop = vop.m,\r\n            sim = vim.m,\r\n            som = vom.m,\r\n            shift;\r\n        while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\r\n          vom = nextLeft(vom);\r\n          vop = nextRight(vop);\r\n          vop.a = v;\r\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\r\n          if (shift > 0) {\r\n            moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\r\n            sip += shift;\r\n            sop += shift;\r\n          }\r\n          sim += vim.m;\r\n          sip += vip.m;\r\n          som += vom.m;\r\n          sop += vop.m;\r\n        }\r\n        if (vim && !nextRight(vop)) {\r\n          vop.t = vim;\r\n          vop.m += sim - sop;\r\n        }\r\n        if (vip && !nextLeft(vom)) {\r\n          vom.t = vip;\r\n          vom.m += sip - som;\r\n          ancestor = v;\r\n        }\r\n      }\r\n      return ancestor;\r\n    }\r\n  \r\n    function sizeNode(node) {\r\n      node.x *= dx;\r\n      node.y = node.depth * dy;\r\n    }\r\n  \r\n    tree.separation = function(x) {\r\n      return arguments.length ? (separation = x, tree) : separation;\r\n    };\r\n  \r\n    tree.size = function(x) {\r\n      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);\r\n    };\r\n  \r\n    tree.nodeSize = function(x) {\r\n      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);\r\n    };\r\n  \r\n    return tree;\r\n  }\r\n  \r\n  function treemapSlice(parent, x0, y0, x1, y1) {\r\n    var nodes = parent.children,\r\n        node,\r\n        i = -1,\r\n        n = nodes.length,\r\n        k = parent.value && (y1 - y0) / parent.value;\r\n  \r\n    while (++i < n) {\r\n      node = nodes[i], node.x0 = x0, node.x1 = x1;\r\n      node.y0 = y0, node.y1 = y0 += node.value * k;\r\n    }\r\n  }\r\n  \r\n  var phi = (1 + Math.sqrt(5)) / 2;\r\n  \r\n  function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\r\n    var rows = [],\r\n        nodes = parent.children,\r\n        row,\r\n        nodeValue,\r\n        i0 = 0,\r\n        i1 = 0,\r\n        n = nodes.length,\r\n        dx, dy,\r\n        value = parent.value,\r\n        sumValue,\r\n        minValue,\r\n        maxValue,\r\n        newRatio,\r\n        minRatio,\r\n        alpha,\r\n        beta;\r\n  \r\n    while (i0 < n) {\r\n      dx = x1 - x0, dy = y1 - y0;\r\n  \r\n      // Find the next non-empty node.\r\n      do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);\r\n      minValue = maxValue = sumValue;\r\n      alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n      beta = sumValue * sumValue * alpha;\r\n      minRatio = Math.max(maxValue / beta, beta / minValue);\r\n  \r\n      // Keep adding nodes while the aspect ratio maintains or improves.\r\n      for (; i1 < n; ++i1) {\r\n        sumValue += nodeValue = nodes[i1].value;\r\n        if (nodeValue < minValue) minValue = nodeValue;\r\n        if (nodeValue > maxValue) maxValue = nodeValue;\r\n        beta = sumValue * sumValue * alpha;\r\n        newRatio = Math.max(maxValue / beta, beta / minValue);\r\n        if (newRatio > minRatio) { sumValue -= nodeValue; break; }\r\n        minRatio = newRatio;\r\n      }\r\n  \r\n      // Position and record the row orientation.\r\n      rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});\r\n      if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\r\n      else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\r\n      value -= sumValue, i0 = i1;\r\n    }\r\n  \r\n    return rows;\r\n  }\r\n  \r\n  var squarify = (function custom(ratio) {\r\n  \r\n    function squarify(parent, x0, y0, x1, y1) {\r\n      squarifyRatio(ratio, parent, x0, y0, x1, y1);\r\n    }\r\n  \r\n    squarify.ratio = function(x) {\r\n      return custom((x = +x) > 1 ? x : 1);\r\n    };\r\n  \r\n    return squarify;\r\n  })(phi);\r\n  \r\n  function index$3() {\r\n    var tile = squarify,\r\n        round = false,\r\n        dx = 1,\r\n        dy = 1,\r\n        paddingStack = [0],\r\n        paddingInner = constantZero,\r\n        paddingTop = constantZero,\r\n        paddingRight = constantZero,\r\n        paddingBottom = constantZero,\r\n        paddingLeft = constantZero;\r\n  \r\n    function treemap(root) {\r\n      root.x0 =\r\n      root.y0 = 0;\r\n      root.x1 = dx;\r\n      root.y1 = dy;\r\n      root.eachBefore(positionNode);\r\n      paddingStack = [0];\r\n      if (round) root.eachBefore(roundNode);\r\n      return root;\r\n    }\r\n  \r\n    function positionNode(node) {\r\n      var p = paddingStack[node.depth],\r\n          x0 = node.x0 + p,\r\n          y0 = node.y0 + p,\r\n          x1 = node.x1 - p,\r\n          y1 = node.y1 - p;\r\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\r\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\r\n      node.x0 = x0;\r\n      node.y0 = y0;\r\n      node.x1 = x1;\r\n      node.y1 = y1;\r\n      if (node.children) {\r\n        p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\r\n        x0 += paddingLeft(node) - p;\r\n        y0 += paddingTop(node) - p;\r\n        x1 -= paddingRight(node) - p;\r\n        y1 -= paddingBottom(node) - p;\r\n        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\r\n        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\r\n        tile(node, x0, y0, x1, y1);\r\n      }\r\n    }\r\n  \r\n    treemap.round = function(x) {\r\n      return arguments.length ? (round = !!x, treemap) : round;\r\n    };\r\n  \r\n    treemap.size = function(x) {\r\n      return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\r\n    };\r\n  \r\n    treemap.tile = function(x) {\r\n      return arguments.length ? (tile = required(x), treemap) : tile;\r\n    };\r\n  \r\n    treemap.padding = function(x) {\r\n      return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\r\n    };\r\n  \r\n    treemap.paddingInner = function(x) {\r\n      return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant$9(+x), treemap) : paddingInner;\r\n    };\r\n  \r\n    treemap.paddingOuter = function(x) {\r\n      return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\r\n    };\r\n  \r\n    treemap.paddingTop = function(x) {\r\n      return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant$9(+x), treemap) : paddingTop;\r\n    };\r\n  \r\n    treemap.paddingRight = function(x) {\r\n      return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant$9(+x), treemap) : paddingRight;\r\n    };\r\n  \r\n    treemap.paddingBottom = function(x) {\r\n      return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant$9(+x), treemap) : paddingBottom;\r\n    };\r\n  \r\n    treemap.paddingLeft = function(x) {\r\n      return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant$9(+x), treemap) : paddingLeft;\r\n    };\r\n  \r\n    return treemap;\r\n  }\r\n  \r\n  function binary(parent, x0, y0, x1, y1) {\r\n    var nodes = parent.children,\r\n        i, n = nodes.length,\r\n        sum, sums = new Array(n + 1);\r\n  \r\n    for (sums[0] = sum = i = 0; i < n; ++i) {\r\n      sums[i + 1] = sum += nodes[i].value;\r\n    }\r\n  \r\n    partition(0, n, parent.value, x0, y0, x1, y1);\r\n  \r\n    function partition(i, j, value, x0, y0, x1, y1) {\r\n      if (i >= j - 1) {\r\n        var node = nodes[i];\r\n        node.x0 = x0, node.y0 = y0;\r\n        node.x1 = x1, node.y1 = y1;\r\n        return;\r\n      }\r\n  \r\n      var valueOffset = sums[i],\r\n          valueTarget = (value / 2) + valueOffset,\r\n          k = i + 1,\r\n          hi = j - 1;\r\n  \r\n      while (k < hi) {\r\n        var mid = k + hi >>> 1;\r\n        if (sums[mid] < valueTarget) k = mid + 1;\r\n        else hi = mid;\r\n      }\r\n  \r\n      if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;\r\n  \r\n      var valueLeft = sums[k] - valueOffset,\r\n          valueRight = value - valueLeft;\r\n  \r\n      if ((x1 - x0) > (y1 - y0)) {\r\n        var xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n        partition(i, k, valueLeft, x0, y0, xk, y1);\r\n        partition(k, j, valueRight, xk, y0, x1, y1);\r\n      } else {\r\n        var yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n        partition(i, k, valueLeft, x0, y0, x1, yk);\r\n        partition(k, j, valueRight, x0, yk, x1, y1);\r\n      }\r\n    }\r\n  }\r\n  \r\n  function sliceDice(parent, x0, y0, x1, y1) {\r\n    (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);\r\n  }\r\n  \r\n  var resquarify = (function custom(ratio) {\r\n  \r\n    function resquarify(parent, x0, y0, x1, y1) {\r\n      if ((rows = parent._squarify) && (rows.ratio === ratio)) {\r\n        var rows,\r\n            row,\r\n            nodes,\r\n            i,\r\n            j = -1,\r\n            n,\r\n            m = rows.length,\r\n            value = parent.value;\r\n  \r\n        while (++j < m) {\r\n          row = rows[j], nodes = row.children;\r\n          for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\r\n          if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);\r\n          else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);\r\n          value -= row.value;\r\n        }\r\n      } else {\r\n        parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\r\n        rows.ratio = ratio;\r\n      }\r\n    }\r\n  \r\n    resquarify.ratio = function(x) {\r\n      return custom((x = +x) > 1 ? x : 1);\r\n    };\r\n  \r\n    return resquarify;\r\n  })(phi);\r\n  \r\n  function area$2(polygon) {\r\n    var i = -1,\r\n        n = polygon.length,\r\n        a,\r\n        b = polygon[n - 1],\r\n        area = 0;\r\n  \r\n    while (++i < n) {\r\n      a = b;\r\n      b = polygon[i];\r\n      area += a[1] * b[0] - a[0] * b[1];\r\n    }\r\n  \r\n    return area / 2;\r\n  }\r\n  \r\n  function centroid$1(polygon) {\r\n    var i = -1,\r\n        n = polygon.length,\r\n        x = 0,\r\n        y = 0,\r\n        a,\r\n        b = polygon[n - 1],\r\n        c,\r\n        k = 0;\r\n  \r\n    while (++i < n) {\r\n      a = b;\r\n      b = polygon[i];\r\n      k += c = a[0] * b[1] - b[0] * a[1];\r\n      x += (a[0] + b[0]) * c;\r\n      y += (a[1] + b[1]) * c;\r\n    }\r\n  \r\n    return k *= 3, [x / k, y / k];\r\n  }\r\n  \r\n  // Returns the 2D cross product of AB and AC vectors, i.e., the z-component of\r\n  // the 3D cross product in a quadrant I Cartesian coordinate system (+x is\r\n  // right, +y is up). Returns a positive value if ABC is counter-clockwise,\r\n  // negative if clockwise, and zero if the points are collinear.\r\n  function cross$1(a, b, c) {\r\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\r\n  }\r\n  \r\n  function lexicographicOrder(a, b) {\r\n    return a[0] - b[0] || a[1] - b[1];\r\n  }\r\n  \r\n  // Computes the upper convex hull per the monotone chain algorithm.\r\n  // Assumes points.length >= 3, is sorted by x, unique in y.\r\n  // Returns an array of indices into points in left-to-right order.\r\n  function computeUpperHullIndexes(points) {\r\n    var n = points.length,\r\n        indexes = [0, 1],\r\n        size = 2;\r\n  \r\n    for (var i = 2; i < n; ++i) {\r\n      while (size > 1 && cross$1(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;\r\n      indexes[size++] = i;\r\n    }\r\n  \r\n    return indexes.slice(0, size); // remove popped points\r\n  }\r\n  \r\n  function hull(points) {\r\n    if ((n = points.length) < 3) return null;\r\n  \r\n    var i,\r\n        n,\r\n        sortedPoints = new Array(n),\r\n        flippedPoints = new Array(n);\r\n  \r\n    for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];\r\n    sortedPoints.sort(lexicographicOrder);\r\n    for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];\r\n  \r\n    var upperIndexes = computeUpperHullIndexes(sortedPoints),\r\n        lowerIndexes = computeUpperHullIndexes(flippedPoints);\r\n  \r\n    // Construct the hull polygon, removing possible duplicate endpoints.\r\n    var skipLeft = lowerIndexes[0] === upperIndexes[0],\r\n        skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],\r\n        hull = [];\r\n  \r\n    // Add upper hull in right-to-l order.\r\n    // Then add lower hull in left-to-right order.\r\n    for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);\r\n    for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);\r\n  \r\n    return hull;\r\n  }\r\n  \r\n  function contains$2(polygon, point) {\r\n    var n = polygon.length,\r\n        p = polygon[n - 1],\r\n        x = point[0], y = point[1],\r\n        x0 = p[0], y0 = p[1],\r\n        x1, y1,\r\n        inside = false;\r\n  \r\n    for (var i = 0; i < n; ++i) {\r\n      p = polygon[i], x1 = p[0], y1 = p[1];\r\n      if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;\r\n      x0 = x1, y0 = y1;\r\n    }\r\n  \r\n    return inside;\r\n  }\r\n  \r\n  function length$2(polygon) {\r\n    var i = -1,\r\n        n = polygon.length,\r\n        b = polygon[n - 1],\r\n        xa,\r\n        ya,\r\n        xb = b[0],\r\n        yb = b[1],\r\n        perimeter = 0;\r\n  \r\n    while (++i < n) {\r\n      xa = xb;\r\n      ya = yb;\r\n      b = polygon[i];\r\n      xb = b[0];\r\n      yb = b[1];\r\n      xa -= xb;\r\n      ya -= yb;\r\n      perimeter += Math.sqrt(xa * xa + ya * ya);\r\n    }\r\n  \r\n    return perimeter;\r\n  }\r\n  \r\n  function defaultSource$1() {\r\n    return Math.random();\r\n  }\r\n  \r\n  var uniform = (function sourceRandomUniform(source) {\r\n    function randomUniform(min, max) {\r\n      min = min == null ? 0 : +min;\r\n      max = max == null ? 1 : +max;\r\n      if (arguments.length === 1) max = min, min = 0;\r\n      else max -= min;\r\n      return function() {\r\n        return source() * max + min;\r\n      };\r\n    }\r\n  \r\n    randomUniform.source = sourceRandomUniform;\r\n  \r\n    return randomUniform;\r\n  })(defaultSource$1);\r\n  \r\n  var normal = (function sourceRandomNormal(source) {\r\n    function randomNormal(mu, sigma) {\r\n      var x, r;\r\n      mu = mu == null ? 0 : +mu;\r\n      sigma = sigma == null ? 1 : +sigma;\r\n      return function() {\r\n        var y;\r\n  \r\n        // If available, use the second previously-generated uniform random.\r\n        if (x != null) y = x, x = null;\r\n  \r\n        // Otherwise, generate a new x and y.\r\n        else do {\r\n          x = source() * 2 - 1;\r\n          y = source() * 2 - 1;\r\n          r = x * x + y * y;\r\n        } while (!r || r > 1);\r\n  \r\n        return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);\r\n      };\r\n    }\r\n  \r\n    randomNormal.source = sourceRandomNormal;\r\n  \r\n    return randomNormal;\r\n  })(defaultSource$1);\r\n  \r\n  var logNormal = (function sourceRandomLogNormal(source) {\r\n    function randomLogNormal() {\r\n      var randomNormal = normal.source(source).apply(this, arguments);\r\n      return function() {\r\n        return Math.exp(randomNormal());\r\n      };\r\n    }\r\n  \r\n    randomLogNormal.source = sourceRandomLogNormal;\r\n  \r\n    return randomLogNormal;\r\n  })(defaultSource$1);\r\n  \r\n  var irwinHall = (function sourceRandomIrwinHall(source) {\r\n    function randomIrwinHall(n) {\r\n      return function() {\r\n        for (var sum = 0, i = 0; i < n; ++i) sum += source();\r\n        return sum;\r\n      };\r\n    }\r\n  \r\n    randomIrwinHall.source = sourceRandomIrwinHall;\r\n  \r\n    return randomIrwinHall;\r\n  })(defaultSource$1);\r\n  \r\n  var bates = (function sourceRandomBates(source) {\r\n    function randomBates(n) {\r\n      var randomIrwinHall = irwinHall.source(source)(n);\r\n      return function() {\r\n        return randomIrwinHall() / n;\r\n      };\r\n    }\r\n  \r\n    randomBates.source = sourceRandomBates;\r\n  \r\n    return randomBates;\r\n  })(defaultSource$1);\r\n  \r\n  var exponential$1 = (function sourceRandomExponential(source) {\r\n    function randomExponential(lambda) {\r\n      return function() {\r\n        return -Math.log(1 - source()) / lambda;\r\n      };\r\n    }\r\n  \r\n    randomExponential.source = sourceRandomExponential;\r\n  \r\n    return randomExponential;\r\n  })(defaultSource$1);\r\n  \r\n  function initRange(domain, range) {\r\n    switch (arguments.length) {\r\n      case 0: break;\r\n      case 1: this.range(domain); break;\r\n      default: this.range(range).domain(domain); break;\r\n    }\r\n    return this;\r\n  }\r\n  \r\n  function initInterpolator(domain, interpolator) {\r\n    switch (arguments.length) {\r\n      case 0: break;\r\n      case 1: this.interpolator(domain); break;\r\n      default: this.interpolator(interpolator).domain(domain); break;\r\n    }\r\n    return this;\r\n  }\r\n  \r\n  var array$3 = Array.prototype;\r\n  \r\n  var map$3 = array$3.map;\r\n  var slice$5 = array$3.slice;\r\n  \r\n  var implicit = {name: \"implicit\"};\r\n  \r\n  function ordinal() {\r\n    var index = map$1(),\r\n        domain = [],\r\n        range = [],\r\n        unknown = implicit;\r\n  \r\n    function scale(d) {\r\n      var key = d + \"\", i = index.get(key);\r\n      if (!i) {\r\n        if (unknown !== implicit) return unknown;\r\n        index.set(key, i = domain.push(d));\r\n      }\r\n      return range[(i - 1) % range.length];\r\n    }\r\n  \r\n    scale.domain = function(_) {\r\n      if (!arguments.length) return domain.slice();\r\n      domain = [], index = map$1();\r\n      var i = -1, n = _.length, d, key;\r\n      while (++i < n) if (!index.has(key = (d = _[i]) + \"\")) index.set(key, domain.push(d));\r\n      return scale;\r\n    };\r\n  \r\n    scale.range = function(_) {\r\n      return arguments.length ? (range = slice$5.call(_), scale) : range.slice();\r\n    };\r\n  \r\n    scale.unknown = function(_) {\r\n      return arguments.length ? (unknown = _, scale) : unknown;\r\n    };\r\n  \r\n    scale.copy = function() {\r\n      return ordinal(domain, range).unknown(unknown);\r\n    };\r\n  \r\n    initRange.apply(scale, arguments);\r\n  \r\n    return scale;\r\n  }\r\n  \r\n  function band() {\r\n    var scale = ordinal().unknown(undefined),\r\n        domain = scale.domain,\r\n        ordinalRange = scale.range,\r\n        range = [0, 1],\r\n        step,\r\n        bandwidth,\r\n        round = false,\r\n        paddingInner = 0,\r\n        paddingOuter = 0,\r\n        align = 0.5;\r\n  \r\n    delete scale.unknown;\r\n  \r\n    function rescale() {\r\n      var n = domain().length,\r\n          reverse = range[1] < range[0],\r\n          start = range[reverse - 0],\r\n          stop = range[1 - reverse];\r\n      step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\r\n      if (round) step = Math.floor(step);\r\n      start += (stop - start - step * (n - paddingInner)) * align;\r\n      bandwidth = step * (1 - paddingInner);\r\n      if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\r\n      var values = sequence(n).map(function(i) { return start + step * i; });\r\n      return ordinalRange(reverse ? values.reverse() : values);\r\n    }\r\n  \r\n    scale.domain = function(_) {\r\n      return arguments.length ? (domain(_), rescale()) : domain();\r\n    };\r\n  \r\n    scale.range = function(_) {\r\n      return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();\r\n    };\r\n  \r\n    scale.rangeRound = function(_) {\r\n      return range = [+_[0], +_[1]], round = true, rescale();\r\n    };\r\n  \r\n    scale.bandwidth = function() {\r\n      return bandwidth;\r\n    };\r\n  \r\n    scale.step = function() {\r\n      return step;\r\n    };\r\n  \r\n    scale.round = function(_) {\r\n      return arguments.length ? (round = !!_, rescale()) : round;\r\n    };\r\n  \r\n    scale.padding = function(_) {\r\n      return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;\r\n    };\r\n  \r\n    scale.paddingInner = function(_) {\r\n      return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;\r\n    };\r\n  \r\n    scale.paddingOuter = function(_) {\r\n      return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;\r\n    };\r\n  \r\n    scale.align = function(_) {\r\n      return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\r\n    };\r\n  \r\n    scale.copy = function() {\r\n      return band(domain(), range)\r\n          .round(round)\r\n          .paddingInner(paddingInner)\r\n          .paddingOuter(paddingOuter)\r\n          .align(align);\r\n    };\r\n  \r\n    return initRange.apply(rescale(), arguments);\r\n  }\r\n  \r\n  function pointish(scale) {\r\n    var copy = scale.copy;\r\n  \r\n    scale.padding = scale.paddingOuter;\r\n    delete scale.paddingInner;\r\n    delete scale.paddingOuter;\r\n  \r\n    scale.copy = function() {\r\n      return pointish(copy());\r\n    };\r\n  \r\n    return scale;\r\n  }\r\n  \r\n  function point$1() {\r\n    return pointish(band.apply(null, arguments).paddingInner(1));\r\n  }\r\n  \r\n  function constant$a(x) {\r\n    return function() {\r\n      return x;\r\n    };\r\n  }\r\n  \r\n  function number$2(x) {\r\n    return +x;\r\n  }\r\n  \r\n  var unit = [0, 1];\r\n  \r\n  function identity$6(x) {\r\n    return x;\r\n  }\r\n  \r\n  function normalize(a, b) {\r\n    return (b -= (a = +a))\r\n        ? function(x) { return (x - a) / b; }\r\n        : constant$a(isNaN(b) ? NaN : 0.5);\r\n  }\r\n  \r\n  function clamper(domain) {\r\n    var a = domain[0], b = domain[domain.length - 1], t;\r\n    if (a > b) t = a, a = b, b = t;\r\n    return function(x) { return Math.max(a, Math.min(b, x)); };\r\n  }\r\n  \r\n  // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\r\n  // interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\r\n  function bimap(domain, range, interpolate) {\r\n    var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\r\n    if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\r\n    else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\r\n    return function(x) { return r0(d0(x)); };\r\n  }\r\n  \r\n  function polymap(domain, range, interpolate) {\r\n    var j = Math.min(domain.length, range.length) - 1,\r\n        d = new Array(j),\r\n        r = new Array(j),\r\n        i = -1;\r\n  \r\n    // Reverse descending domains.\r\n    if (domain[j] < domain[0]) {\r\n      domain = domain.slice().reverse();\r\n      range = range.slice().reverse();\r\n    }\r\n  \r\n    while (++i < j) {\r\n      d[i] = normalize(domain[i], domain[i + 1]);\r\n      r[i] = interpolate(range[i], range[i + 1]);\r\n    }\r\n  \r\n    return function(x) {\r\n      var i = bisectRight(domain, x, 1, j) - 1;\r\n      return r[i](d[i](x));\r\n    };\r\n  }\r\n  \r\n  function copy(source, target) {\r\n    return target\r\n        .domain(source.domain())\r\n        .range(source.range())\r\n        .interpolate(source.interpolate())\r\n        .clamp(source.clamp())\r\n        .unknown(source.unknown());\r\n  }\r\n  \r\n  function transformer$1() {\r\n    var domain = unit,\r\n        range = unit,\r\n        interpolate = interpolateValue,\r\n        transform,\r\n        untransform,\r\n        unknown,\r\n        clamp = identity$6,\r\n        piecewise,\r\n        output,\r\n        input;\r\n  \r\n    function rescale() {\r\n      piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;\r\n      output = input = null;\r\n      return scale;\r\n    }\r\n  \r\n    function scale(x) {\r\n      return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\r\n    }\r\n  \r\n    scale.invert = function(y) {\r\n      return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\r\n    };\r\n  \r\n    scale.domain = function(_) {\r\n      return arguments.length ? (domain = map$3.call(_, number$2), clamp === identity$6 || (clamp = clamper(domain)), rescale()) : domain.slice();\r\n    };\r\n  \r\n    scale.range = function(_) {\r\n      return arguments.length ? (range = slice$5.call(_), rescale()) : range.slice();\r\n    };\r\n  \r\n    scale.rangeRound = function(_) {\r\n      return range = slice$5.call(_), interpolate = interpolateRound, rescale();\r\n    };\r\n  \r\n    scale.clamp = function(_) {\r\n      return arguments.length ? (clamp = _ ? clamper(domain) : identity$6, scale) : clamp !== identity$6;\r\n    };\r\n  \r\n    scale.interpolate = function(_) {\r\n      return arguments.length ? (interpolate = _, rescale()) : interpolate;\r\n    };\r\n  \r\n    scale.unknown = function(_) {\r\n      return arguments.length ? (unknown = _, scale) : unknown;\r\n    };\r\n  \r\n    return function(t, u) {\r\n      transform = t, untransform = u;\r\n      return rescale();\r\n    };\r\n  }\r\n  \r\n  function continuous(transform, untransform) {\r\n    return transformer$1()(transform, untransform);\r\n  }\r\n  \r\n  function tickFormat(start, stop, count, specifier) {\r\n    var step = tickStep(start, stop, count),\r\n        precision;\r\n    specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\r\n    switch (specifier.type) {\r\n      case \"s\": {\r\n        var value = Math.max(Math.abs(start), Math.abs(stop));\r\n        if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\r\n        return exports.formatPrefix(specifier, value);\r\n      }\r\n      case \"\":\r\n      case \"e\":\r\n      case \"g\":\r\n      case \"p\":\r\n      case \"r\": {\r\n        if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\r\n        break;\r\n      }\r\n      case \"f\":\r\n      case \"%\": {\r\n        if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\r\n        break;\r\n      }\r\n    }\r\n    return exports.format(specifier);\r\n  }\r\n  \r\n  function linearish(scale) {\r\n    var domain = scale.domain;\r\n  \r\n    scale.ticks = function(count) {\r\n      var d = domain();\r\n      return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\r\n    };\r\n  \r\n    scale.tickFormat = function(count, specifier) {\r\n      var d = domain();\r\n      return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\r\n    };\r\n  \r\n    scale.nice = function(count) {\r\n      if (count == null) count = 10;\r\n  \r\n      var d = domain(),\r\n          i0 = 0,\r\n          i1 = d.length - 1,\r\n          start = d[i0],\r\n          stop = d[i1],\r\n          step;\r\n  \r\n      if (stop < start) {\r\n        step = start, start = stop, stop = step;\r\n        step = i0, i0 = i1, i1 = step;\r\n      }\r\n  \r\n      step = tickIncrement(start, stop, count);\r\n  \r\n      if (step > 0) {\r\n        start = Math.floor(start / step) * step;\r\n        stop = Math.ceil(stop / step) * step;\r\n        step = tickIncrement(start, stop, count);\r\n      } else if (step < 0) {\r\n        start = Math.ceil(start * step) / step;\r\n        stop = Math.floor(stop * step) / step;\r\n        step = tickIncrement(start, stop, count);\r\n      }\r\n  \r\n      if (step > 0) {\r\n        d[i0] = Math.floor(start / step) * step;\r\n        d[i1] = Math.ceil(stop / step) * step;\r\n        domain(d);\r\n      } else if (step < 0) {\r\n        d[i0] = Math.ceil(start * step) / step;\r\n        d[i1] = Math.floor(stop * step) / step;\r\n        domain(d);\r\n      }\r\n  \r\n      return scale;\r\n    };\r\n  \r\n    return scale;\r\n  }\r\n  \r\n  function linear$2() {\r\n    var scale = continuous(identity$6, identity$6);\r\n  \r\n    scale.copy = function() {\r\n      return copy(scale, linear$2());\r\n    };\r\n  \r\n    initRange.apply(scale, arguments);\r\n  \r\n    return linearish(scale);\r\n  }\r\n  \r\n  function identity$7(domain) {\r\n    var unknown;\r\n  \r\n    function scale(x) {\r\n      return isNaN(x = +x) ? unknown : x;\r\n    }\r\n  \r\n    scale.invert = scale;\r\n  \r\n    scale.domain = scale.range = function(_) {\r\n      return arguments.length ? (domain = map$3.call(_, number$2), scale) : domain.slice();\r\n    };\r\n  \r\n    scale.unknown = function(_) {\r\n      return arguments.length ? (unknown = _, scale) : unknown;\r\n    };\r\n  \r\n    scale.copy = function() {\r\n      return identity$7(domain).unknown(unknown);\r\n    };\r\n  \r\n    domain = arguments.length ? map$3.call(domain, number$2) : [0, 1];\r\n  \r\n    return linearish(scale);\r\n  }\r\n  \r\n  function nice(domain, interval) {\r\n    domain = domain.slice();\r\n  \r\n    var i0 = 0,\r\n        i1 = domain.length - 1,\r\n        x0 = domain[i0],\r\n        x1 = domain[i1],\r\n        t;\r\n  \r\n    if (x1 < x0) {\r\n      t = i0, i0 = i1, i1 = t;\r\n      t = x0, x0 = x1, x1 = t;\r\n    }\r\n  \r\n    domain[i0] = interval.floor(x0);\r\n    domain[i1] = interval.ceil(x1);\r\n    return domain;\r\n  }\r\n  \r\n  function transformLog(x) {\r\n    return Math.log(x);\r\n  }\r\n  \r\n  function transformExp(x) {\r\n    return Math.exp(x);\r\n  }\r\n  \r\n  function transformLogn(x) {\r\n    return -Math.log(-x);\r\n  }\r\n  \r\n  function transformExpn(x) {\r\n    return -Math.exp(-x);\r\n  }\r\n  \r\n  function pow10(x) {\r\n    return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\r\n  }\r\n  \r\n  function powp(base) {\r\n    return base === 10 ? pow10\r\n        : base === Math.E ? Math.exp\r\n        : function(x) { return Math.pow(base, x); };\r\n  }\r\n  \r\n  function logp(base) {\r\n    return base === Math.E ? Math.log\r\n        : base === 10 && Math.log10\r\n        || base === 2 && Math.log2\r\n        || (base = Math.log(base), function(x) { return Math.log(x) / base; });\r\n  }\r\n  \r\n  function reflect(f) {\r\n    return function(x) {\r\n      return -f(-x);\r\n    };\r\n  }\r\n  \r\n  function loggish(transform) {\r\n    var scale = transform(transformLog, transformExp),\r\n        domain = scale.domain,\r\n        base = 10,\r\n        logs,\r\n        pows;\r\n  \r\n    function rescale() {\r\n      logs = logp(base), pows = powp(base);\r\n      if (domain()[0] < 0) {\r\n        logs = reflect(logs), pows = reflect(pows);\r\n        transform(transformLogn, transformExpn);\r\n      } else {\r\n        transform(transformLog, transformExp);\r\n      }\r\n      return scale;\r\n    }\r\n  \r\n    scale.base = function(_) {\r\n      return arguments.length ? (base = +_, rescale()) : base;\r\n    };\r\n  \r\n    scale.domain = function(_) {\r\n      return arguments.length ? (domain(_), rescale()) : domain();\r\n    };\r\n  \r\n    scale.ticks = function(count) {\r\n      var d = domain(),\r\n          u = d[0],\r\n          v = d[d.length - 1],\r\n          r;\r\n  \r\n      if (r = v < u) i = u, u = v, v = i;\r\n  \r\n      var i = logs(u),\r\n          j = logs(v),\r\n          p,\r\n          k,\r\n          t,\r\n          n = count == null ? 10 : +count,\r\n          z = [];\r\n  \r\n      if (!(base % 1) && j - i < n) {\r\n        i = Math.round(i) - 1, j = Math.round(j) + 1;\r\n        if (u > 0) for (; i < j; ++i) {\r\n          for (k = 1, p = pows(i); k < base; ++k) {\r\n            t = p * k;\r\n            if (t < u) continue;\r\n            if (t > v) break;\r\n            z.push(t);\r\n          }\r\n        } else for (; i < j; ++i) {\r\n          for (k = base - 1, p = pows(i); k >= 1; --k) {\r\n            t = p * k;\r\n            if (t < u) continue;\r\n            if (t > v) break;\r\n            z.push(t);\r\n          }\r\n        }\r\n      } else {\r\n        z = ticks(i, j, Math.min(j - i, n)).map(pows);\r\n      }\r\n  \r\n      return r ? z.reverse() : z;\r\n    };\r\n  \r\n    scale.tickFormat = function(count, specifier) {\r\n      if (specifier == null) specifier = base === 10 ? \".0e\" : \",\";\r\n      if (typeof specifier !== \"function\") specifier = exports.format(specifier);\r\n      if (count === Infinity) return specifier;\r\n      if (count == null) count = 10;\r\n      var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\r\n      return function(d) {\r\n        var i = d / pows(Math.round(logs(d)));\r\n        if (i * base < base - 0.5) i *= base;\r\n        return i <= k ? specifier(d) : \"\";\r\n      };\r\n    };\r\n  \r\n    scale.nice = function() {\r\n      return domain(nice(domain(), {\r\n        floor: function(x) { return pows(Math.floor(logs(x))); },\r\n        ceil: function(x) { return pows(Math.ceil(logs(x))); }\r\n      }));\r\n    };\r\n  \r\n    return scale;\r\n  }\r\n  \r\n  function log$1() {\r\n    var scale = loggish(transformer$1()).domain([1, 10]);\r\n  \r\n    scale.copy = function() {\r\n      return copy(scale, log$1()).base(scale.base());\r\n    };\r\n  \r\n    initRange.apply(scale, arguments);\r\n  \r\n    return scale;\r\n  }\r\n  \r\n  function transformSymlog(c) {\r\n    return function(x) {\r\n      return Math.sign(x) * Math.log1p(Math.abs(x / c));\r\n    };\r\n  }\r\n  \r\n  function transformSymexp(c) {\r\n    return function(x) {\r\n      return Math.sign(x) * Math.expm1(Math.abs(x)) * c;\r\n    };\r\n  }\r\n  \r\n  function symlogish(transform) {\r\n    var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));\r\n  \r\n    scale.constant = function(_) {\r\n      return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;\r\n    };\r\n  \r\n    return linearish(scale);\r\n  }\r\n  \r\n  function symlog() {\r\n    var scale = symlogish(transformer$1());\r\n  \r\n    scale.copy = function() {\r\n      return copy(scale, symlog()).constant(scale.constant());\r\n    };\r\n  \r\n    return initRange.apply(scale, arguments);\r\n  }\r\n  \r\n  function transformPow(exponent) {\r\n    return function(x) {\r\n      return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\r\n    };\r\n  }\r\n  \r\n  function transformSqrt(x) {\r\n    return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);\r\n  }\r\n  \r\n  function transformSquare(x) {\r\n    return x < 0 ? -x * x : x * x;\r\n  }\r\n  \r\n  function powish(transform) {\r\n    var scale = transform(identity$6, identity$6),\r\n        exponent = 1;\r\n  \r\n    function rescale() {\r\n      return exponent === 1 ? transform(identity$6, identity$6)\r\n          : exponent === 0.5 ? transform(transformSqrt, transformSquare)\r\n          : transform(transformPow(exponent), transformPow(1 / exponent));\r\n    }\r\n  \r\n    scale.exponent = function(_) {\r\n      return arguments.length ? (exponent = +_, rescale()) : exponent;\r\n    };\r\n  \r\n    return linearish(scale);\r\n  }\r\n  \r\n  function pow$1() {\r\n    var scale = powish(transformer$1());\r\n  \r\n    scale.copy = function() {\r\n      return copy(scale, pow$1()).exponent(scale.exponent());\r\n    };\r\n  \r\n    initRange.apply(scale, arguments);\r\n  \r\n    return scale;\r\n  }\r\n  \r\n  function sqrt$1() {\r\n    return pow$1.apply(null, arguments).exponent(0.5);\r\n  }\r\n  \r\n  function quantile() {\r\n    var domain = [],\r\n        range = [],\r\n        thresholds = [],\r\n        unknown;\r\n  \r\n    function rescale() {\r\n      var i = 0, n = Math.max(1, range.length);\r\n      thresholds = new Array(n - 1);\r\n      while (++i < n) thresholds[i - 1] = threshold(domain, i / n);\r\n      return scale;\r\n    }\r\n  \r\n    function scale(x) {\r\n      return isNaN(x = +x) ? unknown : range[bisectRight(thresholds, x)];\r\n    }\r\n  \r\n    scale.invertExtent = function(y) {\r\n      var i = range.indexOf(y);\r\n      return i < 0 ? [NaN, NaN] : [\r\n        i > 0 ? thresholds[i - 1] : domain[0],\r\n        i < thresholds.length ? thresholds[i] : domain[domain.length - 1]\r\n      ];\r\n    };\r\n  \r\n    scale.domain = function(_) {\r\n      if (!arguments.length) return domain.slice();\r\n      domain = [];\r\n      for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\r\n      domain.sort(ascending);\r\n      return rescale();\r\n    };\r\n  \r\n    scale.range = function(_) {\r\n      return arguments.length ? (range = slice$5.call(_), rescale()) : range.slice();\r\n    };\r\n  \r\n    scale.unknown = function(_) {\r\n      return arguments.length ? (unknown = _, scale) : unknown;\r\n    };\r\n  \r\n    scale.quantiles = function() {\r\n      return thresholds.slice();\r\n    };\r\n  \r\n    scale.copy = function() {\r\n      return quantile()\r\n          .domain(domain)\r\n          .range(range)\r\n          .unknown(unknown);\r\n    };\r\n  \r\n    return initRange.apply(scale, arguments);\r\n  }\r\n  \r\n  function quantize$1() {\r\n    var x0 = 0,\r\n        x1 = 1,\r\n        n = 1,\r\n        domain = [0.5],\r\n        range = [0, 1],\r\n        unknown;\r\n  \r\n    function scale(x) {\r\n      return x <= x ? range[bisectRight(domain, x, 0, n)] : unknown;\r\n    }\r\n  \r\n    function rescale() {\r\n      var i = -1;\r\n      domain = new Array(n);\r\n      while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\r\n      return scale;\r\n    }\r\n  \r\n    scale.domain = function(_) {\r\n      return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];\r\n    };\r\n  \r\n    scale.range = function(_) {\r\n      return arguments.length ? (n = (range = slice$5.call(_)).length - 1, rescale()) : range.slice();\r\n    };\r\n  \r\n    scale.invertExtent = function(y) {\r\n      var i = range.indexOf(y);\r\n      return i < 0 ? [NaN, NaN]\r\n          : i < 1 ? [x0, domain[0]]\r\n          : i >= n ? [domain[n - 1], x1]\r\n          : [domain[i - 1], domain[i]];\r\n    };\r\n  \r\n    scale.unknown = function(_) {\r\n      return arguments.length ? (unknown = _, scale) : scale;\r\n    };\r\n  \r\n    scale.thresholds = function() {\r\n      return domain.slice();\r\n    };\r\n  \r\n    scale.copy = function() {\r\n      return quantize$1()\r\n          .domain([x0, x1])\r\n          .range(range)\r\n          .unknown(unknown);\r\n    };\r\n  \r\n    return initRange.apply(linearish(scale), arguments);\r\n  }\r\n  \r\n  function threshold$1() {\r\n    var domain = [0.5],\r\n        range = [0, 1],\r\n        unknown,\r\n        n = 1;\r\n  \r\n    function scale(x) {\r\n      return x <= x ? range[bisectRight(domain, x, 0, n)] : unknown;\r\n    }\r\n  \r\n    scale.domain = function(_) {\r\n      return arguments.length ? (domain = slice$5.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\r\n    };\r\n  \r\n    scale.range = function(_) {\r\n      return arguments.length ? (range = slice$5.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\r\n    };\r\n  \r\n    scale.invertExtent = function(y) {\r\n      var i = range.indexOf(y);\r\n      return [domain[i - 1], domain[i]];\r\n    };\r\n  \r\n    scale.unknown = function(_) {\r\n      return arguments.length ? (unknown = _, scale) : unknown;\r\n    };\r\n  \r\n    scale.copy = function() {\r\n      return threshold$1()\r\n          .domain(domain)\r\n          .range(range)\r\n          .unknown(unknown);\r\n    };\r\n  \r\n    return initRange.apply(scale, arguments);\r\n  }\r\n  \r\n  var t0$1 = new Date,\r\n      t1$1 = new Date;\r\n  \r\n  function newInterval(floori, offseti, count, field) {\r\n  \r\n    function interval(date) {\r\n      return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;\r\n    }\r\n  \r\n    interval.floor = function(date) {\r\n      return floori(date = new Date(+date)), date;\r\n    };\r\n  \r\n    interval.ceil = function(date) {\r\n      return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\r\n    };\r\n  \r\n    interval.round = function(date) {\r\n      var d0 = interval(date),\r\n          d1 = interval.ceil(date);\r\n      return date - d0 < d1 - date ? d0 : d1;\r\n    };\r\n  \r\n    interval.offset = function(date, step) {\r\n      return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\r\n    };\r\n  \r\n    interval.range = function(start, stop, step) {\r\n      var range = [], previous;\r\n      start = interval.ceil(start);\r\n      step = step == null ? 1 : Math.floor(step);\r\n      if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\r\n      do range.push(previous = new Date(+start)), offseti(start, step), floori(start);\r\n      while (previous < start && start < stop);\r\n      return range;\r\n    };\r\n  \r\n    interval.filter = function(test) {\r\n      return newInterval(function(date) {\r\n        if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);\r\n      }, function(date, step) {\r\n        if (date >= date) {\r\n          if (step < 0) while (++step <= 0) {\r\n            while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\r\n          } else while (--step >= 0) {\r\n            while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\r\n          }\r\n        }\r\n      });\r\n    };\r\n  \r\n    if (count) {\r\n      interval.count = function(start, end) {\r\n        t0$1.setTime(+start), t1$1.setTime(+end);\r\n        floori(t0$1), floori(t1$1);\r\n        return Math.floor(count(t0$1, t1$1));\r\n      };\r\n  \r\n      interval.every = function(step) {\r\n        step = Math.floor(step);\r\n        return !isFinite(step) || !(step > 0) ? null\r\n            : !(step > 1) ? interval\r\n            : interval.filter(field\r\n                ? function(d) { return field(d) % step === 0; }\r\n                : function(d) { return interval.count(0, d) % step === 0; });\r\n      };\r\n    }\r\n  \r\n    return interval;\r\n  }\r\n  \r\n  var millisecond = newInterval(function() {\r\n    // noop\r\n  }, function(date, step) {\r\n    date.setTime(+date + step);\r\n  }, function(start, end) {\r\n    return end - start;\r\n  });\r\n  \r\n  // An optimized implementation for this simple case.\r\n  millisecond.every = function(k) {\r\n    k = Math.floor(k);\r\n    if (!isFinite(k) || !(k > 0)) return null;\r\n    if (!(k > 1)) return millisecond;\r\n    return newInterval(function(date) {\r\n      date.setTime(Math.floor(date / k) * k);\r\n    }, function(date, step) {\r\n      date.setTime(+date + step * k);\r\n    }, function(start, end) {\r\n      return (end - start) / k;\r\n    });\r\n  };\r\n  var milliseconds = millisecond.range;\r\n  \r\n  var durationSecond = 1e3;\r\n  var durationMinute = 6e4;\r\n  var durationHour = 36e5;\r\n  var durationDay = 864e5;\r\n  var durationWeek = 6048e5;\r\n  \r\n  var second = newInterval(function(date) {\r\n    date.setTime(date - date.getMilliseconds());\r\n  }, function(date, step) {\r\n    date.setTime(+date + step * durationSecond);\r\n  }, function(start, end) {\r\n    return (end - start) / durationSecond;\r\n  }, function(date) {\r\n    return date.getUTCSeconds();\r\n  });\r\n  var seconds = second.range;\r\n  \r\n  var minute = newInterval(function(date) {\r\n    date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);\r\n  }, function(date, step) {\r\n    date.setTime(+date + step * durationMinute);\r\n  }, function(start, end) {\r\n    return (end - start) / durationMinute;\r\n  }, function(date) {\r\n    return date.getMinutes();\r\n  });\r\n  var minutes = minute.range;\r\n  \r\n  var hour = newInterval(function(date) {\r\n    date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);\r\n  }, function(date, step) {\r\n    date.setTime(+date + step * durationHour);\r\n  }, function(start, end) {\r\n    return (end - start) / durationHour;\r\n  }, function(date) {\r\n    return date.getHours();\r\n  });\r\n  var hours = hour.range;\r\n  \r\n  var day = newInterval(function(date) {\r\n    date.setHours(0, 0, 0, 0);\r\n  }, function(date, step) {\r\n    date.setDate(date.getDate() + step);\r\n  }, function(start, end) {\r\n    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;\r\n  }, function(date) {\r\n    return date.getDate() - 1;\r\n  });\r\n  var days = day.range;\r\n  \r\n  function weekday(i) {\r\n    return newInterval(function(date) {\r\n      date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\r\n      date.setHours(0, 0, 0, 0);\r\n    }, function(date, step) {\r\n      date.setDate(date.getDate() + step * 7);\r\n    }, function(start, end) {\r\n      return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;\r\n    });\r\n  }\r\n  \r\n  var sunday = weekday(0);\r\n  var monday = weekday(1);\r\n  var tuesday = weekday(2);\r\n  var wednesday = weekday(3);\r\n  var thursday = weekday(4);\r\n  var friday = weekday(5);\r\n  var saturday = weekday(6);\r\n  \r\n  var sundays = sunday.range;\r\n  var mondays = monday.range;\r\n  var tuesdays = tuesday.range;\r\n  var wednesdays = wednesday.range;\r\n  var thursdays = thursday.range;\r\n  var fridays = friday.range;\r\n  var saturdays = saturday.range;\r\n  \r\n  var month = newInterval(function(date) {\r\n    date.setDate(1);\r\n    date.setHours(0, 0, 0, 0);\r\n  }, function(date, step) {\r\n    date.setMonth(date.getMonth() + step);\r\n  }, function(start, end) {\r\n    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;\r\n  }, function(date) {\r\n    return date.getMonth();\r\n  });\r\n  var months = month.range;\r\n  \r\n  var year = newInterval(function(date) {\r\n    date.setMonth(0, 1);\r\n    date.setHours(0, 0, 0, 0);\r\n  }, function(date, step) {\r\n    date.setFullYear(date.getFullYear() + step);\r\n  }, function(start, end) {\r\n    return end.getFullYear() - start.getFullYear();\r\n  }, function(date) {\r\n    return date.getFullYear();\r\n  });\r\n  \r\n  // An optimized implementation for this simple case.\r\n  year.every = function(k) {\r\n    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {\r\n      date.setFullYear(Math.floor(date.getFullYear() / k) * k);\r\n      date.setMonth(0, 1);\r\n      date.setHours(0, 0, 0, 0);\r\n    }, function(date, step) {\r\n      date.setFullYear(date.getFullYear() + step * k);\r\n    });\r\n  };\r\n  var years = year.range;\r\n  \r\n  var utcMinute = newInterval(function(date) {\r\n    date.setUTCSeconds(0, 0);\r\n  }, function(date, step) {\r\n    date.setTime(+date + step * durationMinute);\r\n  }, function(start, end) {\r\n    return (end - start) / durationMinute;\r\n  }, function(date) {\r\n    return date.getUTCMinutes();\r\n  });\r\n  var utcMinutes = utcMinute.range;\r\n  \r\n  var utcHour = newInterval(function(date) {\r\n    date.setUTCMinutes(0, 0, 0);\r\n  }, function(date, step) {\r\n    date.setTime(+date + step * durationHour);\r\n  }, function(start, end) {\r\n    return (end - start) / durationHour;\r\n  }, function(date) {\r\n    return date.getUTCHours();\r\n  });\r\n  var utcHours = utcHour.range;\r\n  \r\n  var utcDay = newInterval(function(date) {\r\n    date.setUTCHours(0, 0, 0, 0);\r\n  }, function(date, step) {\r\n    date.setUTCDate(date.getUTCDate() + step);\r\n  }, function(start, end) {\r\n    return (end - start) / durationDay;\r\n  }, function(date) {\r\n    return date.getUTCDate() - 1;\r\n  });\r\n  var utcDays = utcDay.range;\r\n  \r\n  function utcWeekday(i) {\r\n    return newInterval(function(date) {\r\n      date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);\r\n      date.setUTCHours(0, 0, 0, 0);\r\n    }, function(date, step) {\r\n      date.setUTCDate(date.getUTCDate() + step * 7);\r\n    }, function(start, end) {\r\n      return (end - start) / durationWeek;\r\n    });\r\n  }\r\n  \r\n  var utcSunday = utcWeekday(0);\r\n  var utcMonday = utcWeekday(1);\r\n  var utcTuesday = utcWeekday(2);\r\n  var utcWednesday = utcWeekday(3);\r\n  var utcThursday = utcWeekday(4);\r\n  var utcFriday = utcWeekday(5);\r\n  var utcSaturday = utcWeekday(6);\r\n  \r\n  var utcSundays = utcSunday.range;\r\n  var utcMondays = utcMonday.range;\r\n  var utcTuesdays = utcTuesday.range;\r\n  var utcWednesdays = utcWednesday.range;\r\n  var utcThursdays = utcThursday.range;\r\n  var utcFridays = utcFriday.range;\r\n  var utcSaturdays = utcSaturday.range;\r\n  \r\n  var utcMonth = newInterval(function(date) {\r\n    date.setUTCDate(1);\r\n    date.setUTCHours(0, 0, 0, 0);\r\n  }, function(date, step) {\r\n    date.setUTCMonth(date.getUTCMonth() + step);\r\n  }, function(start, end) {\r\n    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;\r\n  }, function(date) {\r\n    return date.getUTCMonth();\r\n  });\r\n  var utcMonths = utcMonth.range;\r\n  \r\n  var utcYear = newInterval(function(date) {\r\n    date.setUTCMonth(0, 1);\r\n    date.setUTCHours(0, 0, 0, 0);\r\n  }, function(date, step) {\r\n    date.setUTCFullYear(date.getUTCFullYear() + step);\r\n  }, function(start, end) {\r\n    return end.getUTCFullYear() - start.getUTCFullYear();\r\n  }, function(date) {\r\n    return date.getUTCFullYear();\r\n  });\r\n  \r\n  // An optimized implementation for this simple case.\r\n  utcYear.every = function(k) {\r\n    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {\r\n      date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);\r\n      date.setUTCMonth(0, 1);\r\n      date.setUTCHours(0, 0, 0, 0);\r\n    }, function(date, step) {\r\n      date.setUTCFullYear(date.getUTCFullYear() + step * k);\r\n    });\r\n  };\r\n  var utcYears = utcYear.range;\r\n  \r\n  function localDate(d) {\r\n    if (0 <= d.y && d.y < 100) {\r\n      var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);\r\n      date.setFullYear(d.y);\r\n      return date;\r\n    }\r\n    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);\r\n  }\r\n  \r\n  function utcDate(d) {\r\n    if (0 <= d.y && d.y < 100) {\r\n      var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));\r\n      date.setUTCFullYear(d.y);\r\n      return date;\r\n    }\r\n    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));\r\n  }\r\n  \r\n  function newDate(y, m, d) {\r\n    return {y: y, m: m, d: d, H: 0, M: 0, S: 0, L: 0};\r\n  }\r\n  \r\n  function formatLocale$1(locale) {\r\n    var locale_dateTime = locale.dateTime,\r\n        locale_date = locale.date,\r\n        locale_time = locale.time,\r\n        locale_periods = locale.periods,\r\n        locale_weekdays = locale.days,\r\n        locale_shortWeekdays = locale.shortDays,\r\n        locale_months = locale.months,\r\n        locale_shortMonths = locale.shortMonths;\r\n  \r\n    var periodRe = formatRe(locale_periods),\r\n        periodLookup = formatLookup(locale_periods),\r\n        weekdayRe = formatRe(locale_weekdays),\r\n        weekdayLookup = formatLookup(locale_weekdays),\r\n        shortWeekdayRe = formatRe(locale_shortWeekdays),\r\n        shortWeekdayLookup = formatLookup(locale_shortWeekdays),\r\n        monthRe = formatRe(locale_months),\r\n        monthLookup = formatLookup(locale_months),\r\n        shortMonthRe = formatRe(locale_shortMonths),\r\n        shortMonthLookup = formatLookup(locale_shortMonths);\r\n  \r\n    var formats = {\r\n      \"a\": formatShortWeekday,\r\n      \"A\": formatWeekday,\r\n      \"b\": formatShortMonth,\r\n      \"B\": formatMonth,\r\n      \"c\": null,\r\n      \"d\": formatDayOfMonth,\r\n      \"e\": formatDayOfMonth,\r\n      \"f\": formatMicroseconds,\r\n      \"H\": formatHour24,\r\n      \"I\": formatHour12,\r\n      \"j\": formatDayOfYear,\r\n      \"L\": formatMilliseconds,\r\n      \"m\": formatMonthNumber,\r\n      \"M\": formatMinutes,\r\n      \"p\": formatPeriod,\r\n      \"q\": formatQuarter,\r\n      \"Q\": formatUnixTimestamp,\r\n      \"s\": formatUnixTimestampSeconds,\r\n      \"S\": formatSeconds,\r\n      \"u\": formatWeekdayNumberMonday,\r\n      \"U\": formatWeekNumberSunday,\r\n      \"V\": formatWeekNumberISO,\r\n      \"w\": formatWeekdayNumberSunday,\r\n      \"W\": formatWeekNumberMonday,\r\n      \"x\": null,\r\n      \"X\": null,\r\n      \"y\": formatYear$1,\r\n      \"Y\": formatFullYear,\r\n      \"Z\": formatZone,\r\n      \"%\": formatLiteralPercent\r\n    };\r\n  \r\n    var utcFormats = {\r\n      \"a\": formatUTCShortWeekday,\r\n      \"A\": formatUTCWeekday,\r\n      \"b\": formatUTCShortMonth,\r\n      \"B\": formatUTCMonth,\r\n      \"c\": null,\r\n      \"d\": formatUTCDayOfMonth,\r\n      \"e\": formatUTCDayOfMonth,\r\n      \"f\": formatUTCMicroseconds,\r\n      \"H\": formatUTCHour24,\r\n      \"I\": formatUTCHour12,\r\n      \"j\": formatUTCDayOfYear,\r\n      \"L\": formatUTCMilliseconds,\r\n      \"m\": formatUTCMonthNumber,\r\n      \"M\": formatUTCMinutes,\r\n      \"p\": formatUTCPeriod,\r\n      \"q\": formatUTCQuarter,\r\n      \"Q\": formatUnixTimestamp,\r\n      \"s\": formatUnixTimestampSeconds,\r\n      \"S\": formatUTCSeconds,\r\n      \"u\": formatUTCWeekdayNumberMonday,\r\n      \"U\": formatUTCWeekNumberSunday,\r\n      \"V\": formatUTCWeekNumberISO,\r\n      \"w\": formatUTCWeekdayNumberSunday,\r\n      \"W\": formatUTCWeekNumberMonday,\r\n      \"x\": null,\r\n      \"X\": null,\r\n      \"y\": formatUTCYear,\r\n      \"Y\": formatUTCFullYear,\r\n      \"Z\": formatUTCZone,\r\n      \"%\": formatLiteralPercent\r\n    };\r\n  \r\n    var parses = {\r\n      \"a\": parseShortWeekday,\r\n      \"A\": parseWeekday,\r\n      \"b\": parseShortMonth,\r\n      \"B\": parseMonth,\r\n      \"c\": parseLocaleDateTime,\r\n      \"d\": parseDayOfMonth,\r\n      \"e\": parseDayOfMonth,\r\n      \"f\": parseMicroseconds,\r\n      \"H\": parseHour24,\r\n      \"I\": parseHour24,\r\n      \"j\": parseDayOfYear,\r\n      \"L\": parseMilliseconds,\r\n      \"m\": parseMonthNumber,\r\n      \"M\": parseMinutes,\r\n      \"p\": parsePeriod,\r\n      \"q\": parseQuarter,\r\n      \"Q\": parseUnixTimestamp,\r\n      \"s\": parseUnixTimestampSeconds,\r\n      \"S\": parseSeconds,\r\n      \"u\": parseWeekdayNumberMonday,\r\n      \"U\": parseWeekNumberSunday,\r\n      \"V\": parseWeekNumberISO,\r\n      \"w\": parseWeekdayNumberSunday,\r\n      \"W\": parseWeekNumberMonday,\r\n      \"x\": parseLocaleDate,\r\n      \"X\": parseLocaleTime,\r\n      \"y\": parseYear,\r\n      \"Y\": parseFullYear,\r\n      \"Z\": parseZone,\r\n      \"%\": parseLiteralPercent\r\n    };\r\n  \r\n    // These recursive directive definitions must be deferred.\r\n    formats.x = newFormat(locale_date, formats);\r\n    formats.X = newFormat(locale_time, formats);\r\n    formats.c = newFormat(locale_dateTime, formats);\r\n    utcFormats.x = newFormat(locale_date, utcFormats);\r\n    utcFormats.X = newFormat(locale_time, utcFormats);\r\n    utcFormats.c = newFormat(locale_dateTime, utcFormats);\r\n  \r\n    function newFormat(specifier, formats) {\r\n      return function(date) {\r\n        var string = [],\r\n            i = -1,\r\n            j = 0,\r\n            n = specifier.length,\r\n            c,\r\n            pad,\r\n            format;\r\n  \r\n        if (!(date instanceof Date)) date = new Date(+date);\r\n  \r\n        while (++i < n) {\r\n          if (specifier.charCodeAt(i) === 37) {\r\n            string.push(specifier.slice(j, i));\r\n            if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);\r\n            else pad = c === \"e\" ? \" \" : \"0\";\r\n            if (format = formats[c]) c = format(date, pad);\r\n            string.push(c);\r\n            j = i + 1;\r\n          }\r\n        }\r\n  \r\n        string.push(specifier.slice(j, i));\r\n        return string.join(\"\");\r\n      };\r\n    }\r\n  \r\n    function newParse(specifier, Z) {\r\n      return function(string) {\r\n        var d = newDate(1900, undefined, 1),\r\n            i = parseSpecifier(d, specifier, string += \"\", 0),\r\n            week, day$1;\r\n        if (i != string.length) return null;\r\n  \r\n        // If a UNIX timestamp is specified, return it.\r\n        if (\"Q\" in d) return new Date(d.Q);\r\n        if (\"s\" in d) return new Date(d.s * 1000 + (\"L\" in d ? d.L : 0));\r\n  \r\n        // If this is utcParse, never use the local timezone.\r\n        if (Z && !(\"Z\" in d)) d.Z = 0;\r\n  \r\n        // The am-pm flag is 0 for AM, and 1 for PM.\r\n        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\r\n  \r\n        // If the month was not specified, inherit from the quarter.\r\n        if (d.m === undefined) d.m = \"q\" in d ? d.q : 0;\r\n  \r\n        // Convert day-of-week and week-of-year to day-of-year.\r\n        if (\"V\" in d) {\r\n          if (d.V < 1 || d.V > 53) return null;\r\n          if (!(\"w\" in d)) d.w = 1;\r\n          if (\"Z\" in d) {\r\n            week = utcDate(newDate(d.y, 0, 1)), day$1 = week.getUTCDay();\r\n            week = day$1 > 4 || day$1 === 0 ? utcMonday.ceil(week) : utcMonday(week);\r\n            week = utcDay.offset(week, (d.V - 1) * 7);\r\n            d.y = week.getUTCFullYear();\r\n            d.m = week.getUTCMonth();\r\n            d.d = week.getUTCDate() + (d.w + 6) % 7;\r\n          } else {\r\n            week = localDate(newDate(d.y, 0, 1)), day$1 = week.getDay();\r\n            week = day$1 > 4 || day$1 === 0 ? monday.ceil(week) : monday(week);\r\n            week = day.offset(week, (d.V - 1) * 7);\r\n            d.y = week.getFullYear();\r\n            d.m = week.getMonth();\r\n            d.d = week.getDate() + (d.w + 6) % 7;\r\n          }\r\n        } else if (\"W\" in d || \"U\" in d) {\r\n          if (!(\"w\" in d)) d.w = \"u\" in d ? d.u % 7 : \"W\" in d ? 1 : 0;\r\n          day$1 = \"Z\" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();\r\n          d.m = 0;\r\n          d.d = \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (day$1 + 5) % 7 : d.w + d.U * 7 - (day$1 + 6) % 7;\r\n        }\r\n  \r\n        // If a time zone is specified, all fields are interpreted as UTC and then\r\n        // offset according to the specified time zone.\r\n        if (\"Z\" in d) {\r\n          d.H += d.Z / 100 | 0;\r\n          d.M += d.Z % 100;\r\n          return utcDate(d);\r\n        }\r\n  \r\n        // Otherwise, all fields are in local time.\r\n        return localDate(d);\r\n      };\r\n    }\r\n  \r\n    function parseSpecifier(d, specifier, string, j) {\r\n      var i = 0,\r\n          n = specifier.length,\r\n          m = string.length,\r\n          c,\r\n          parse;\r\n  \r\n      while (i < n) {\r\n        if (j >= m) return -1;\r\n        c = specifier.charCodeAt(i++);\r\n        if (c === 37) {\r\n          c = specifier.charAt(i++);\r\n          parse = parses[c in pads ? specifier.charAt(i++) : c];\r\n          if (!parse || ((j = parse(d, string, j)) < 0)) return -1;\r\n        } else if (c != string.charCodeAt(j++)) {\r\n          return -1;\r\n        }\r\n      }\r\n  \r\n      return j;\r\n    }\r\n  \r\n    function parsePeriod(d, string, i) {\r\n      var n = periodRe.exec(string.slice(i));\r\n      return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;\r\n    }\r\n  \r\n    function parseShortWeekday(d, string, i) {\r\n      var n = shortWeekdayRe.exec(string.slice(i));\r\n      return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\r\n    }\r\n  \r\n    function parseWeekday(d, string, i) {\r\n      var n = weekdayRe.exec(string.slice(i));\r\n      return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\r\n    }\r\n  \r\n    function parseShortMonth(d, string, i) {\r\n      var n = shortMonthRe.exec(string.slice(i));\r\n      return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\r\n    }\r\n  \r\n    function parseMonth(d, string, i) {\r\n      var n = monthRe.exec(string.slice(i));\r\n      return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\r\n    }\r\n  \r\n    function parseLocaleDateTime(d, string, i) {\r\n      return parseSpecifier(d, locale_dateTime, string, i);\r\n    }\r\n  \r\n    function parseLocaleDate(d, string, i) {\r\n      return parseSpecifier(d, locale_date, string, i);\r\n    }\r\n  \r\n    function parseLocaleTime(d, string, i) {\r\n      return parseSpecifier(d, locale_time, string, i);\r\n    }\r\n  \r\n    function formatShortWeekday(d) {\r\n      return locale_shortWeekdays[d.getDay()];\r\n    }\r\n  \r\n    function formatWeekday(d) {\r\n      return locale_weekdays[d.getDay()];\r\n    }\r\n  \r\n    function formatShortMonth(d) {\r\n      return locale_shortMonths[d.getMonth()];\r\n    }\r\n  \r\n    function formatMonth(d) {\r\n      return locale_months[d.getMonth()];\r\n    }\r\n  \r\n    function formatPeriod(d) {\r\n      return locale_periods[+(d.getHours() >= 12)];\r\n    }\r\n  \r\n    function formatQuarter(d) {\r\n      return 1 + ~~(d.getMonth() / 3);\r\n    }\r\n  \r\n    function formatUTCShortWeekday(d) {\r\n      return locale_shortWeekdays[d.getUTCDay()];\r\n    }\r\n  \r\n    function formatUTCWeekday(d) {\r\n      return locale_weekdays[d.getUTCDay()];\r\n    }\r\n  \r\n    function formatUTCShortMonth(d) {\r\n      return locale_shortMonths[d.getUTCMonth()];\r\n    }\r\n  \r\n    function formatUTCMonth(d) {\r\n      return locale_months[d.getUTCMonth()];\r\n    }\r\n  \r\n    function formatUTCPeriod(d) {\r\n      return locale_periods[+(d.getUTCHours() >= 12)];\r\n    }\r\n  \r\n    function formatUTCQuarter(d) {\r\n      return 1 + ~~(d.getUTCMonth() / 3);\r\n    }\r\n  \r\n    return {\r\n      format: function(specifier) {\r\n        var f = newFormat(specifier += \"\", formats);\r\n        f.toString = function() { return specifier; };\r\n        return f;\r\n      },\r\n      parse: function(specifier) {\r\n        var p = newParse(specifier += \"\", false);\r\n        p.toString = function() { return specifier; };\r\n        return p;\r\n      },\r\n      utcFormat: function(specifier) {\r\n        var f = newFormat(specifier += \"\", utcFormats);\r\n        f.toString = function() { return specifier; };\r\n        return f;\r\n      },\r\n      utcParse: function(specifier) {\r\n        var p = newParse(specifier += \"\", true);\r\n        p.toString = function() { return specifier; };\r\n        return p;\r\n      }\r\n    };\r\n  }\r\n  \r\n  var pads = {\"-\": \"\", \"_\": \" \", \"0\": \"0\"},\r\n      numberRe = /^\\s*\\d+/, // note: ignores next directive\r\n      percentRe = /^%/,\r\n      requoteRe = /[\\\\^$*+?|[\\]().{}]/g;\r\n  \r\n  function pad$1(value, fill, width) {\r\n    var sign = value < 0 ? \"-\" : \"\",\r\n        string = (sign ? -value : value) + \"\",\r\n        length = string.length;\r\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\r\n  }\r\n  \r\n  function requote(s) {\r\n    return s.replace(requoteRe, \"\\\\$&\");\r\n  }\r\n  \r\n  function formatRe(names) {\r\n    return new RegExp(\"^(?:\" + names.map(requote).join(\"|\") + \")\", \"i\");\r\n  }\r\n  \r\n  function formatLookup(names) {\r\n    var map = {}, i = -1, n = names.length;\r\n    while (++i < n) map[names[i].toLowerCase()] = i;\r\n    return map;\r\n  }\r\n  \r\n  function parseWeekdayNumberSunday(d, string, i) {\r\n    var n = numberRe.exec(string.slice(i, i + 1));\r\n    return n ? (d.w = +n[0], i + n[0].length) : -1;\r\n  }\r\n  \r\n  function parseWeekdayNumberMonday(d, string, i) {\r\n    var n = numberRe.exec(string.slice(i, i + 1));\r\n    return n ? (d.u = +n[0], i + n[0].length) : -1;\r\n  }\r\n  \r\n  function parseWeekNumberSunday(d, string, i) {\r\n    var n = numberRe.exec(string.slice(i, i + 2));\r\n    return n ? (d.U = +n[0], i + n[0].length) : -1;\r\n  }\r\n  \r\n  function parseWeekNumberISO(d, string, i) {\r\n    var n = numberRe.exec(string.slice(i, i + 2));\r\n    return n ? (d.V = +n[0], i + n[0].length) : -1;\r\n  }\r\n  \r\n  function parseWeekNumberMonday(d, string, i) {\r\n    var n = numberRe.exec(string.slice(i, i + 2));\r\n    return n ? (d.W = +n[0], i + n[0].length) : -1;\r\n  }\r\n  \r\n  function parseFullYear(d, string, i) {\r\n    var n = numberRe.exec(string.slice(i, i + 4));\r\n    return n ? (d.y = +n[0], i + n[0].length) : -1;\r\n  }\r\n  \r\n  function parseYear(d, string, i) {\r\n    var n = numberRe.exec(string.slice(i, i + 2));\r\n    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;\r\n  }\r\n  \r\n  function parseZone(d, string, i) {\r\n    var n = /^(Z)|([+-]\\d\\d)(?::?(\\d\\d))?/.exec(string.slice(i, i + 6));\r\n    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || \"00\")), i + n[0].length) : -1;\r\n  }\r\n  \r\n  function parseQuarter(d, string, i) {\r\n    var n = numberRe.exec(string.slice(i, i + 1));\r\n    return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;\r\n  }\r\n  \r\n  function parseMonthNumber(d, string, i) {\r\n    var n = numberRe.exec(string.slice(i, i + 2));\r\n    return n ? (d.m = n[0] - 1, i + n[0].length) : -1;\r\n  }\r\n  \r\n  function parseDayOfMonth(d, string, i) {\r\n    var n = numberRe.exec(string.slice(i, i + 2));\r\n    return n ? (d.d = +n[0], i + n[0].length) : -1;\r\n  }\r\n  \r\n  function parseDayOfYear(d, string, i) {\r\n    var n = numberRe.exec(string.slice(i, i + 3));\r\n    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;\r\n  }\r\n  \r\n  function parseHour24(d, string, i) {\r\n    var n = numberRe.exec(string.slice(i, i + 2));\r\n    return n ? (d.H = +n[0], i + n[0].length) : -1;\r\n  }\r\n  \r\n  function parseMinutes(d, string, i) {\r\n    var n = numberRe.exec(string.slice(i, i + 2));\r\n    return n ? (d.M = +n[0], i + n[0].length) : -1;\r\n  }\r\n  \r\n  function parseSeconds(d, string, i) {\r\n    var n = numberRe.exec(string.slice(i, i + 2));\r\n    return n ? (d.S = +n[0], i + n[0].length) : -1;\r\n  }\r\n  \r\n  function parseMilliseconds(d, string, i) {\r\n    var n = numberRe.exec(string.slice(i, i + 3));\r\n    return n ? (d.L = +n[0], i + n[0].length) : -1;\r\n  }\r\n  \r\n  function parseMicroseconds(d, string, i) {\r\n    var n = numberRe.exec(string.slice(i, i + 6));\r\n    return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;\r\n  }\r\n  \r\n  function parseLiteralPercent(d, string, i) {\r\n    var n = percentRe.exec(string.slice(i, i + 1));\r\n    return n ? i + n[0].length : -1;\r\n  }\r\n  \r\n  function parseUnixTimestamp(d, string, i) {\r\n    var n = numberRe.exec(string.slice(i));\r\n    return n ? (d.Q = +n[0], i + n[0].length) : -1;\r\n  }\r\n  \r\n  function parseUnixTimestampSeconds(d, string, i) {\r\n    var n = numberRe.exec(string.slice(i));\r\n    return n ? (d.s = +n[0], i + n[0].length) : -1;\r\n  }\r\n  \r\n  function formatDayOfMonth(d, p) {\r\n    return pad$1(d.getDate(), p, 2);\r\n  }\r\n  \r\n  function formatHour24(d, p) {\r\n    return pad$1(d.getHours(), p, 2);\r\n  }\r\n  \r\n  function formatHour12(d, p) {\r\n    return pad$1(d.getHours() % 12 || 12, p, 2);\r\n  }\r\n  \r\n  function formatDayOfYear(d, p) {\r\n    return pad$1(1 + day.count(year(d), d), p, 3);\r\n  }\r\n  \r\n  function formatMilliseconds(d, p) {\r\n    return pad$1(d.getMilliseconds(), p, 3);\r\n  }\r\n  \r\n  function formatMicroseconds(d, p) {\r\n    return formatMilliseconds(d, p) + \"000\";\r\n  }\r\n  \r\n  function formatMonthNumber(d, p) {\r\n    return pad$1(d.getMonth() + 1, p, 2);\r\n  }\r\n  \r\n  function formatMinutes(d, p) {\r\n    return pad$1(d.getMinutes(), p, 2);\r\n  }\r\n  \r\n  function formatSeconds(d, p) {\r\n    return pad$1(d.getSeconds(), p, 2);\r\n  }\r\n  \r\n  function formatWeekdayNumberMonday(d) {\r\n    var day = d.getDay();\r\n    return day === 0 ? 7 : day;\r\n  }\r\n  \r\n  function formatWeekNumberSunday(d, p) {\r\n    return pad$1(sunday.count(year(d) - 1, d), p, 2);\r\n  }\r\n  \r\n  function formatWeekNumberISO(d, p) {\r\n    var day = d.getDay();\r\n    d = (day >= 4 || day === 0) ? thursday(d) : thursday.ceil(d);\r\n    return pad$1(thursday.count(year(d), d) + (year(d).getDay() === 4), p, 2);\r\n  }\r\n  \r\n  function formatWeekdayNumberSunday(d) {\r\n    return d.getDay();\r\n  }\r\n  \r\n  function formatWeekNumberMonday(d, p) {\r\n    return pad$1(monday.count(year(d) - 1, d), p, 2);\r\n  }\r\n  \r\n  function formatYear$1(d, p) {\r\n    return pad$1(d.getFullYear() % 100, p, 2);\r\n  }\r\n  \r\n  function formatFullYear(d, p) {\r\n    return pad$1(d.getFullYear() % 10000, p, 4);\r\n  }\r\n  \r\n  function formatZone(d) {\r\n    var z = d.getTimezoneOffset();\r\n    return (z > 0 ? \"-\" : (z *= -1, \"+\"))\r\n        + pad$1(z / 60 | 0, \"0\", 2)\r\n        + pad$1(z % 60, \"0\", 2);\r\n  }\r\n  \r\n  function formatUTCDayOfMonth(d, p) {\r\n    return pad$1(d.getUTCDate(), p, 2);\r\n  }\r\n  \r\n  function formatUTCHour24(d, p) {\r\n    return pad$1(d.getUTCHours(), p, 2);\r\n  }\r\n  \r\n  function formatUTCHour12(d, p) {\r\n    return pad$1(d.getUTCHours() % 12 || 12, p, 2);\r\n  }\r\n  \r\n  function formatUTCDayOfYear(d, p) {\r\n    return pad$1(1 + utcDay.count(utcYear(d), d), p, 3);\r\n  }\r\n  \r\n  function formatUTCMilliseconds(d, p) {\r\n    return pad$1(d.getUTCMilliseconds(), p, 3);\r\n  }\r\n  \r\n  function formatUTCMicroseconds(d, p) {\r\n    return formatUTCMilliseconds(d, p) + \"000\";\r\n  }\r\n  \r\n  function formatUTCMonthNumber(d, p) {\r\n    return pad$1(d.getUTCMonth() + 1, p, 2);\r\n  }\r\n  \r\n  function formatUTCMinutes(d, p) {\r\n    return pad$1(d.getUTCMinutes(), p, 2);\r\n  }\r\n  \r\n  function formatUTCSeconds(d, p) {\r\n    return pad$1(d.getUTCSeconds(), p, 2);\r\n  }\r\n  \r\n  function formatUTCWeekdayNumberMonday(d) {\r\n    var dow = d.getUTCDay();\r\n    return dow === 0 ? 7 : dow;\r\n  }\r\n  \r\n  function formatUTCWeekNumberSunday(d, p) {\r\n    return pad$1(utcSunday.count(utcYear(d) - 1, d), p, 2);\r\n  }\r\n  \r\n  function formatUTCWeekNumberISO(d, p) {\r\n    var day = d.getUTCDay();\r\n    d = (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);\r\n    return pad$1(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);\r\n  }\r\n  \r\n  function formatUTCWeekdayNumberSunday(d) {\r\n    return d.getUTCDay();\r\n  }\r\n  \r\n  function formatUTCWeekNumberMonday(d, p) {\r\n    return pad$1(utcMonday.count(utcYear(d) - 1, d), p, 2);\r\n  }\r\n  \r\n  function formatUTCYear(d, p) {\r\n    return pad$1(d.getUTCFullYear() % 100, p, 2);\r\n  }\r\n  \r\n  function formatUTCFullYear(d, p) {\r\n    return pad$1(d.getUTCFullYear() % 10000, p, 4);\r\n  }\r\n  \r\n  function formatUTCZone() {\r\n    return \"+0000\";\r\n  }\r\n  \r\n  function formatLiteralPercent() {\r\n    return \"%\";\r\n  }\r\n  \r\n  function formatUnixTimestamp(d) {\r\n    return +d;\r\n  }\r\n  \r\n  function formatUnixTimestampSeconds(d) {\r\n    return Math.floor(+d / 1000);\r\n  }\r\n  \r\n  var locale$1;\r\n  \r\n  defaultLocale$1({\r\n    dateTime: \"%x, %X\",\r\n    date: \"%-m/%-d/%Y\",\r\n    time: \"%-I:%M:%S %p\",\r\n    periods: [\"AM\", \"PM\"],\r\n    days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\r\n    shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\r\n    months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\r\n    shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\r\n  });\r\n  \r\n  function defaultLocale$1(definition) {\r\n    locale$1 = formatLocale$1(definition);\r\n    exports.timeFormat = locale$1.format;\r\n    exports.timeParse = locale$1.parse;\r\n    exports.utcFormat = locale$1.utcFormat;\r\n    exports.utcParse = locale$1.utcParse;\r\n    return locale$1;\r\n  }\r\n  \r\n  var isoSpecifier = \"%Y-%m-%dT%H:%M:%S.%LZ\";\r\n  \r\n  function formatIsoNative(date) {\r\n    return date.toISOString();\r\n  }\r\n  \r\n  var formatIso = Date.prototype.toISOString\r\n      ? formatIsoNative\r\n      : exports.utcFormat(isoSpecifier);\r\n  \r\n  function parseIsoNative(string) {\r\n    var date = new Date(string);\r\n    return isNaN(date) ? null : date;\r\n  }\r\n  \r\n  var parseIso = +new Date(\"2000-01-01T00:00:00.000Z\")\r\n      ? parseIsoNative\r\n      : exports.utcParse(isoSpecifier);\r\n  \r\n  var durationSecond$1 = 1000,\r\n      durationMinute$1 = durationSecond$1 * 60,\r\n      durationHour$1 = durationMinute$1 * 60,\r\n      durationDay$1 = durationHour$1 * 24,\r\n      durationWeek$1 = durationDay$1 * 7,\r\n      durationMonth = durationDay$1 * 30,\r\n      durationYear = durationDay$1 * 365;\r\n  \r\n  function date$1(t) {\r\n    return new Date(t);\r\n  }\r\n  \r\n  function number$3(t) {\r\n    return t instanceof Date ? +t : +new Date(+t);\r\n  }\r\n  \r\n  function calendar(year, month, week, day, hour, minute, second, millisecond, format) {\r\n    var scale = continuous(identity$6, identity$6),\r\n        invert = scale.invert,\r\n        domain = scale.domain;\r\n  \r\n    var formatMillisecond = format(\".%L\"),\r\n        formatSecond = format(\":%S\"),\r\n        formatMinute = format(\"%I:%M\"),\r\n        formatHour = format(\"%I %p\"),\r\n        formatDay = format(\"%a %d\"),\r\n        formatWeek = format(\"%b %d\"),\r\n        formatMonth = format(\"%B\"),\r\n        formatYear = format(\"%Y\");\r\n  \r\n    var tickIntervals = [\r\n      [second,  1,      durationSecond$1],\r\n      [second,  5,  5 * durationSecond$1],\r\n      [second, 15, 15 * durationSecond$1],\r\n      [second, 30, 30 * durationSecond$1],\r\n      [minute,  1,      durationMinute$1],\r\n      [minute,  5,  5 * durationMinute$1],\r\n      [minute, 15, 15 * durationMinute$1],\r\n      [minute, 30, 30 * durationMinute$1],\r\n      [  hour,  1,      durationHour$1  ],\r\n      [  hour,  3,  3 * durationHour$1  ],\r\n      [  hour,  6,  6 * durationHour$1  ],\r\n      [  hour, 12, 12 * durationHour$1  ],\r\n      [   day,  1,      durationDay$1   ],\r\n      [   day,  2,  2 * durationDay$1   ],\r\n      [  week,  1,      durationWeek$1  ],\r\n      [ month,  1,      durationMonth ],\r\n      [ month,  3,  3 * durationMonth ],\r\n      [  year,  1,      durationYear  ]\r\n    ];\r\n  \r\n    function tickFormat(date) {\r\n      return (second(date) < date ? formatMillisecond\r\n          : minute(date) < date ? formatSecond\r\n          : hour(date) < date ? formatMinute\r\n          : day(date) < date ? formatHour\r\n          : month(date) < date ? (week(date) < date ? formatDay : formatWeek)\r\n          : year(date) < date ? formatMonth\r\n          : formatYear)(date);\r\n    }\r\n  \r\n    function tickInterval(interval, start, stop, step) {\r\n      if (interval == null) interval = 10;\r\n  \r\n      // If a desired tick count is specified, pick a reasonable tick interval\r\n      // based on the extent of the domain and a rough estimate of tick size.\r\n      // Otherwise, assume interval is already a time interval and use it.\r\n      if (typeof interval === \"number\") {\r\n        var target = Math.abs(stop - start) / interval,\r\n            i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);\r\n        if (i === tickIntervals.length) {\r\n          step = tickStep(start / durationYear, stop / durationYear, interval);\r\n          interval = year;\r\n        } else if (i) {\r\n          i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\r\n          step = i[1];\r\n          interval = i[0];\r\n        } else {\r\n          step = Math.max(tickStep(start, stop, interval), 1);\r\n          interval = millisecond;\r\n        }\r\n      }\r\n  \r\n      return step == null ? interval : interval.every(step);\r\n    }\r\n  \r\n    scale.invert = function(y) {\r\n      return new Date(invert(y));\r\n    };\r\n  \r\n    scale.domain = function(_) {\r\n      return arguments.length ? domain(map$3.call(_, number$3)) : domain().map(date$1);\r\n    };\r\n  \r\n    scale.ticks = function(interval, step) {\r\n      var d = domain(),\r\n          t0 = d[0],\r\n          t1 = d[d.length - 1],\r\n          r = t1 < t0,\r\n          t;\r\n      if (r) t = t0, t0 = t1, t1 = t;\r\n      t = tickInterval(interval, t0, t1, step);\r\n      t = t ? t.range(t0, t1 + 1) : []; // inclusive stop\r\n      return r ? t.reverse() : t;\r\n    };\r\n  \r\n    scale.tickFormat = function(count, specifier) {\r\n      return specifier == null ? tickFormat : format(specifier);\r\n    };\r\n  \r\n    scale.nice = function(interval, step) {\r\n      var d = domain();\r\n      return (interval = tickInterval(interval, d[0], d[d.length - 1], step))\r\n          ? domain(nice(d, interval))\r\n          : scale;\r\n    };\r\n  \r\n    scale.copy = function() {\r\n      return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));\r\n    };\r\n  \r\n    return scale;\r\n  }\r\n  \r\n  function time() {\r\n    return initRange.apply(calendar(year, month, sunday, day, hour, minute, second, millisecond, exports.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);\r\n  }\r\n  \r\n  function utcTime() {\r\n    return initRange.apply(calendar(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, millisecond, exports.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);\r\n  }\r\n  \r\n  function transformer$2() {\r\n    var x0 = 0,\r\n        x1 = 1,\r\n        t0,\r\n        t1,\r\n        k10,\r\n        transform,\r\n        interpolator = identity$6,\r\n        clamp = false,\r\n        unknown;\r\n  \r\n    function scale(x) {\r\n      return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));\r\n    }\r\n  \r\n    scale.domain = function(_) {\r\n      return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];\r\n    };\r\n  \r\n    scale.clamp = function(_) {\r\n      return arguments.length ? (clamp = !!_, scale) : clamp;\r\n    };\r\n  \r\n    scale.interpolator = function(_) {\r\n      return arguments.length ? (interpolator = _, scale) : interpolator;\r\n    };\r\n  \r\n    scale.unknown = function(_) {\r\n      return arguments.length ? (unknown = _, scale) : unknown;\r\n    };\r\n  \r\n    return function(t) {\r\n      transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);\r\n      return scale;\r\n    };\r\n  }\r\n  \r\n  function copy$1(source, target) {\r\n    return target\r\n        .domain(source.domain())\r\n        .interpolator(source.interpolator())\r\n        .clamp(source.clamp())\r\n        .unknown(source.unknown());\r\n  }\r\n  \r\n  function sequential() {\r\n    var scale = linearish(transformer$2()(identity$6));\r\n  \r\n    scale.copy = function() {\r\n      return copy$1(scale, sequential());\r\n    };\r\n  \r\n    return initInterpolator.apply(scale, arguments);\r\n  }\r\n  \r\n  function sequentialLog() {\r\n    var scale = loggish(transformer$2()).domain([1, 10]);\r\n  \r\n    scale.copy = function() {\r\n      return copy$1(scale, sequentialLog()).base(scale.base());\r\n    };\r\n  \r\n    return initInterpolator.apply(scale, arguments);\r\n  }\r\n  \r\n  function sequentialSymlog() {\r\n    var scale = symlogish(transformer$2());\r\n  \r\n    scale.copy = function() {\r\n      return copy$1(scale, sequentialSymlog()).constant(scale.constant());\r\n    };\r\n  \r\n    return initInterpolator.apply(scale, arguments);\r\n  }\r\n  \r\n  function sequentialPow() {\r\n    var scale = powish(transformer$2());\r\n  \r\n    scale.copy = function() {\r\n      return copy$1(scale, sequentialPow()).exponent(scale.exponent());\r\n    };\r\n  \r\n    return initInterpolator.apply(scale, arguments);\r\n  }\r\n  \r\n  function sequentialSqrt() {\r\n    return sequentialPow.apply(null, arguments).exponent(0.5);\r\n  }\r\n  \r\n  function sequentialQuantile() {\r\n    var domain = [],\r\n        interpolator = identity$6;\r\n  \r\n    function scale(x) {\r\n      if (!isNaN(x = +x)) return interpolator((bisectRight(domain, x) - 1) / (domain.length - 1));\r\n    }\r\n  \r\n    scale.domain = function(_) {\r\n      if (!arguments.length) return domain.slice();\r\n      domain = [];\r\n      for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\r\n      domain.sort(ascending);\r\n      return scale;\r\n    };\r\n  \r\n    scale.interpolator = function(_) {\r\n      return arguments.length ? (interpolator = _, scale) : interpolator;\r\n    };\r\n  \r\n    scale.copy = function() {\r\n      return sequentialQuantile(interpolator).domain(domain);\r\n    };\r\n  \r\n    return initInterpolator.apply(scale, arguments);\r\n  }\r\n  \r\n  function transformer$3() {\r\n    var x0 = 0,\r\n        x1 = 0.5,\r\n        x2 = 1,\r\n        t0,\r\n        t1,\r\n        t2,\r\n        k10,\r\n        k21,\r\n        interpolator = identity$6,\r\n        transform,\r\n        clamp = false,\r\n        unknown;\r\n  \r\n    function scale(x) {\r\n      return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (x < t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));\r\n    }\r\n  \r\n    scale.domain = function(_) {\r\n      return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), t2 = transform(x2 = +_[2]), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), scale) : [x0, x1, x2];\r\n    };\r\n  \r\n    scale.clamp = function(_) {\r\n      return arguments.length ? (clamp = !!_, scale) : clamp;\r\n    };\r\n  \r\n    scale.interpolator = function(_) {\r\n      return arguments.length ? (interpolator = _, scale) : interpolator;\r\n    };\r\n  \r\n    scale.unknown = function(_) {\r\n      return arguments.length ? (unknown = _, scale) : unknown;\r\n    };\r\n  \r\n    return function(t) {\r\n      transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1);\r\n      return scale;\r\n    };\r\n  }\r\n  \r\n  function diverging() {\r\n    var scale = linearish(transformer$3()(identity$6));\r\n  \r\n    scale.copy = function() {\r\n      return copy$1(scale, diverging());\r\n    };\r\n  \r\n    return initInterpolator.apply(scale, arguments);\r\n  }\r\n  \r\n  function divergingLog() {\r\n    var scale = loggish(transformer$3()).domain([0.1, 1, 10]);\r\n  \r\n    scale.copy = function() {\r\n      return copy$1(scale, divergingLog()).base(scale.base());\r\n    };\r\n  \r\n    return initInterpolator.apply(scale, arguments);\r\n  }\r\n  \r\n  function divergingSymlog() {\r\n    var scale = symlogish(transformer$3());\r\n  \r\n    scale.copy = function() {\r\n      return copy$1(scale, divergingSymlog()).constant(scale.constant());\r\n    };\r\n  \r\n    return initInterpolator.apply(scale, arguments);\r\n  }\r\n  \r\n  function divergingPow() {\r\n    var scale = powish(transformer$3());\r\n  \r\n    scale.copy = function() {\r\n      return copy$1(scale, divergingPow()).exponent(scale.exponent());\r\n    };\r\n  \r\n    return initInterpolator.apply(scale, arguments);\r\n  }\r\n  \r\n  function divergingSqrt() {\r\n    return divergingPow.apply(null, arguments).exponent(0.5);\r\n  }\r\n  \r\n  function colors(specifier) {\r\n    var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;\r\n    while (i < n) colors[i] = \"#\" + specifier.slice(i * 6, ++i * 6);\r\n    return colors;\r\n  }\r\n  \r\n  var category10 = colors(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\");\r\n  \r\n  var Accent = colors(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\");\r\n  \r\n  var Dark2 = colors(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\");\r\n  \r\n  var Paired = colors(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\");\r\n  \r\n  var Pastel1 = colors(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\");\r\n  \r\n  var Pastel2 = colors(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\");\r\n  \r\n  var Set1 = colors(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\");\r\n  \r\n  var Set2 = colors(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\");\r\n  \r\n  var Set3 = colors(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\");\r\n  \r\n  var Tableau10 = colors(\"4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab\");\r\n  \r\n  function ramp(scheme) {\r\n    return rgbBasis(scheme[scheme.length - 1]);\r\n  }\r\n  \r\n  var scheme = new Array(3).concat(\r\n    \"d8b365f5f5f55ab4ac\",\r\n    \"a6611adfc27d80cdc1018571\",\r\n    \"a6611adfc27df5f5f580cdc1018571\",\r\n    \"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\r\n    \"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\r\n    \"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\r\n    \"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\r\n    \"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\r\n    \"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\"\r\n  ).map(colors);\r\n  \r\n  var BrBG = ramp(scheme);\r\n  \r\n  var scheme$1 = new Array(3).concat(\r\n    \"af8dc3f7f7f77fbf7b\",\r\n    \"7b3294c2a5cfa6dba0008837\",\r\n    \"7b3294c2a5cff7f7f7a6dba0008837\",\r\n    \"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\r\n    \"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\r\n    \"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\r\n    \"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\r\n    \"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\r\n    \"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\"\r\n  ).map(colors);\r\n  \r\n  var PRGn = ramp(scheme$1);\r\n  \r\n  var scheme$2 = new Array(3).concat(\r\n    \"e9a3c9f7f7f7a1d76a\",\r\n    \"d01c8bf1b6dab8e1864dac26\",\r\n    \"d01c8bf1b6daf7f7f7b8e1864dac26\",\r\n    \"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\r\n    \"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\r\n    \"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\r\n    \"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\r\n    \"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\r\n    \"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\"\r\n  ).map(colors);\r\n  \r\n  var PiYG = ramp(scheme$2);\r\n  \r\n  var scheme$3 = new Array(3).concat(\r\n    \"998ec3f7f7f7f1a340\",\r\n    \"5e3c99b2abd2fdb863e66101\",\r\n    \"5e3c99b2abd2f7f7f7fdb863e66101\",\r\n    \"542788998ec3d8daebfee0b6f1a340b35806\",\r\n    \"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\r\n    \"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\r\n    \"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\r\n    \"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\r\n    \"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\"\r\n  ).map(colors);\r\n  \r\n  var PuOr = ramp(scheme$3);\r\n  \r\n  var scheme$4 = new Array(3).concat(\r\n    \"ef8a62f7f7f767a9cf\",\r\n    \"ca0020f4a58292c5de0571b0\",\r\n    \"ca0020f4a582f7f7f792c5de0571b0\",\r\n    \"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\r\n    \"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\r\n    \"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\r\n    \"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\r\n    \"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\r\n    \"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\"\r\n  ).map(colors);\r\n  \r\n  var RdBu = ramp(scheme$4);\r\n  \r\n  var scheme$5 = new Array(3).concat(\r\n    \"ef8a62ffffff999999\",\r\n    \"ca0020f4a582bababa404040\",\r\n    \"ca0020f4a582ffffffbababa404040\",\r\n    \"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\r\n    \"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\r\n    \"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\r\n    \"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\r\n    \"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\r\n    \"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\"\r\n  ).map(colors);\r\n  \r\n  var RdGy = ramp(scheme$5);\r\n  \r\n  var scheme$6 = new Array(3).concat(\r\n    \"fc8d59ffffbf91bfdb\",\r\n    \"d7191cfdae61abd9e92c7bb6\",\r\n    \"d7191cfdae61ffffbfabd9e92c7bb6\",\r\n    \"d73027fc8d59fee090e0f3f891bfdb4575b4\",\r\n    \"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\r\n    \"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\r\n    \"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\r\n    \"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\r\n    \"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\"\r\n  ).map(colors);\r\n  \r\n  var RdYlBu = ramp(scheme$6);\r\n  \r\n  var scheme$7 = new Array(3).concat(\r\n    \"fc8d59ffffbf91cf60\",\r\n    \"d7191cfdae61a6d96a1a9641\",\r\n    \"d7191cfdae61ffffbfa6d96a1a9641\",\r\n    \"d73027fc8d59fee08bd9ef8b91cf601a9850\",\r\n    \"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\r\n    \"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\r\n    \"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\r\n    \"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\r\n    \"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\"\r\n  ).map(colors);\r\n  \r\n  var RdYlGn = ramp(scheme$7);\r\n  \r\n  var scheme$8 = new Array(3).concat(\r\n    \"fc8d59ffffbf99d594\",\r\n    \"d7191cfdae61abdda42b83ba\",\r\n    \"d7191cfdae61ffffbfabdda42b83ba\",\r\n    \"d53e4ffc8d59fee08be6f59899d5943288bd\",\r\n    \"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\r\n    \"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\r\n    \"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\r\n    \"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\r\n    \"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\"\r\n  ).map(colors);\r\n  \r\n  var Spectral = ramp(scheme$8);\r\n  \r\n  var scheme$9 = new Array(3).concat(\r\n    \"e5f5f999d8c92ca25f\",\r\n    \"edf8fbb2e2e266c2a4238b45\",\r\n    \"edf8fbb2e2e266c2a42ca25f006d2c\",\r\n    \"edf8fbccece699d8c966c2a42ca25f006d2c\",\r\n    \"edf8fbccece699d8c966c2a441ae76238b45005824\",\r\n    \"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\r\n    \"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\"\r\n  ).map(colors);\r\n  \r\n  var BuGn = ramp(scheme$9);\r\n  \r\n  var scheme$a = new Array(3).concat(\r\n    \"e0ecf49ebcda8856a7\",\r\n    \"edf8fbb3cde38c96c688419d\",\r\n    \"edf8fbb3cde38c96c68856a7810f7c\",\r\n    \"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\r\n    \"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\r\n    \"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\r\n    \"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\"\r\n  ).map(colors);\r\n  \r\n  var BuPu = ramp(scheme$a);\r\n  \r\n  var scheme$b = new Array(3).concat(\r\n    \"e0f3dba8ddb543a2ca\",\r\n    \"f0f9e8bae4bc7bccc42b8cbe\",\r\n    \"f0f9e8bae4bc7bccc443a2ca0868ac\",\r\n    \"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\r\n    \"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\r\n    \"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\r\n    \"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\"\r\n  ).map(colors);\r\n  \r\n  var GnBu = ramp(scheme$b);\r\n  \r\n  var scheme$c = new Array(3).concat(\r\n    \"fee8c8fdbb84e34a33\",\r\n    \"fef0d9fdcc8afc8d59d7301f\",\r\n    \"fef0d9fdcc8afc8d59e34a33b30000\",\r\n    \"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\r\n    \"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\r\n    \"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\r\n    \"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\"\r\n  ).map(colors);\r\n  \r\n  var OrRd = ramp(scheme$c);\r\n  \r\n  var scheme$d = new Array(3).concat(\r\n    \"ece2f0a6bddb1c9099\",\r\n    \"f6eff7bdc9e167a9cf02818a\",\r\n    \"f6eff7bdc9e167a9cf1c9099016c59\",\r\n    \"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\r\n    \"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\r\n    \"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\r\n    \"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\"\r\n  ).map(colors);\r\n  \r\n  var PuBuGn = ramp(scheme$d);\r\n  \r\n  var scheme$e = new Array(3).concat(\r\n    \"ece7f2a6bddb2b8cbe\",\r\n    \"f1eef6bdc9e174a9cf0570b0\",\r\n    \"f1eef6bdc9e174a9cf2b8cbe045a8d\",\r\n    \"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\r\n    \"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\r\n    \"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\r\n    \"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\"\r\n  ).map(colors);\r\n  \r\n  var PuBu = ramp(scheme$e);\r\n  \r\n  var scheme$f = new Array(3).concat(\r\n    \"e7e1efc994c7dd1c77\",\r\n    \"f1eef6d7b5d8df65b0ce1256\",\r\n    \"f1eef6d7b5d8df65b0dd1c77980043\",\r\n    \"f1eef6d4b9dac994c7df65b0dd1c77980043\",\r\n    \"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\r\n    \"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\r\n    \"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\"\r\n  ).map(colors);\r\n  \r\n  var PuRd = ramp(scheme$f);\r\n  \r\n  var scheme$g = new Array(3).concat(\r\n    \"fde0ddfa9fb5c51b8a\",\r\n    \"feebe2fbb4b9f768a1ae017e\",\r\n    \"feebe2fbb4b9f768a1c51b8a7a0177\",\r\n    \"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\r\n    \"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\r\n    \"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\r\n    \"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\"\r\n  ).map(colors);\r\n  \r\n  var RdPu = ramp(scheme$g);\r\n  \r\n  var scheme$h = new Array(3).concat(\r\n    \"edf8b17fcdbb2c7fb8\",\r\n    \"ffffcca1dab441b6c4225ea8\",\r\n    \"ffffcca1dab441b6c42c7fb8253494\",\r\n    \"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\r\n    \"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\r\n    \"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\r\n    \"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\"\r\n  ).map(colors);\r\n  \r\n  var YlGnBu = ramp(scheme$h);\r\n  \r\n  var scheme$i = new Array(3).concat(\r\n    \"f7fcb9addd8e31a354\",\r\n    \"ffffccc2e69978c679238443\",\r\n    \"ffffccc2e69978c67931a354006837\",\r\n    \"ffffccd9f0a3addd8e78c67931a354006837\",\r\n    \"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\r\n    \"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\r\n    \"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\"\r\n  ).map(colors);\r\n  \r\n  var YlGn = ramp(scheme$i);\r\n  \r\n  var scheme$j = new Array(3).concat(\r\n    \"fff7bcfec44fd95f0e\",\r\n    \"ffffd4fed98efe9929cc4c02\",\r\n    \"ffffd4fed98efe9929d95f0e993404\",\r\n    \"ffffd4fee391fec44ffe9929d95f0e993404\",\r\n    \"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\r\n    \"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\r\n    \"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\"\r\n  ).map(colors);\r\n  \r\n  var YlOrBr = ramp(scheme$j);\r\n  \r\n  var scheme$k = new Array(3).concat(\r\n    \"ffeda0feb24cf03b20\",\r\n    \"ffffb2fecc5cfd8d3ce31a1c\",\r\n    \"ffffb2fecc5cfd8d3cf03b20bd0026\",\r\n    \"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\r\n    \"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\r\n    \"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\r\n    \"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\"\r\n  ).map(colors);\r\n  \r\n  var YlOrRd = ramp(scheme$k);\r\n  \r\n  var scheme$l = new Array(3).concat(\r\n    \"deebf79ecae13182bd\",\r\n    \"eff3ffbdd7e76baed62171b5\",\r\n    \"eff3ffbdd7e76baed63182bd08519c\",\r\n    \"eff3ffc6dbef9ecae16baed63182bd08519c\",\r\n    \"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\r\n    \"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\r\n    \"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\"\r\n  ).map(colors);\r\n  \r\n  var Blues = ramp(scheme$l);\r\n  \r\n  var scheme$m = new Array(3).concat(\r\n    \"e5f5e0a1d99b31a354\",\r\n    \"edf8e9bae4b374c476238b45\",\r\n    \"edf8e9bae4b374c47631a354006d2c\",\r\n    \"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\r\n    \"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\r\n    \"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\r\n    \"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\"\r\n  ).map(colors);\r\n  \r\n  var Greens = ramp(scheme$m);\r\n  \r\n  var scheme$n = new Array(3).concat(\r\n    \"f0f0f0bdbdbd636363\",\r\n    \"f7f7f7cccccc969696525252\",\r\n    \"f7f7f7cccccc969696636363252525\",\r\n    \"f7f7f7d9d9d9bdbdbd969696636363252525\",\r\n    \"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\r\n    \"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\r\n    \"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\"\r\n  ).map(colors);\r\n  \r\n  var Greys = ramp(scheme$n);\r\n  \r\n  var scheme$o = new Array(3).concat(\r\n    \"efedf5bcbddc756bb1\",\r\n    \"f2f0f7cbc9e29e9ac86a51a3\",\r\n    \"f2f0f7cbc9e29e9ac8756bb154278f\",\r\n    \"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\r\n    \"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\r\n    \"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\r\n    \"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\"\r\n  ).map(colors);\r\n  \r\n  var Purples = ramp(scheme$o);\r\n  \r\n  var scheme$p = new Array(3).concat(\r\n    \"fee0d2fc9272de2d26\",\r\n    \"fee5d9fcae91fb6a4acb181d\",\r\n    \"fee5d9fcae91fb6a4ade2d26a50f15\",\r\n    \"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\r\n    \"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\r\n    \"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\r\n    \"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\"\r\n  ).map(colors);\r\n  \r\n  var Reds = ramp(scheme$p);\r\n  \r\n  var scheme$q = new Array(3).concat(\r\n    \"fee6cefdae6be6550d\",\r\n    \"feeddefdbe85fd8d3cd94701\",\r\n    \"feeddefdbe85fd8d3ce6550da63603\",\r\n    \"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\r\n    \"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\r\n    \"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\r\n    \"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\"\r\n  ).map(colors);\r\n  \r\n  var Oranges = ramp(scheme$q);\r\n  \r\n  function cividis(t) {\r\n    t = Math.max(0, Math.min(1, t));\r\n    return \"rgb(\"\r\n        + Math.max(0, Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - t * 2710.57))))))) + \", \"\r\n        + Math.max(0, Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - t * 67.37))))))) + \", \"\r\n        + Math.max(0, Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - t * 2475.67)))))))\r\n        + \")\";\r\n  }\r\n  \r\n  var cubehelix$3 = cubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));\r\n  \r\n  var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\r\n  \r\n  var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\r\n  \r\n  var c = cubehelix();\r\n  \r\n  function rainbow(t) {\r\n    if (t < 0 || t > 1) t -= Math.floor(t);\r\n    var ts = Math.abs(t - 0.5);\r\n    c.h = 360 * t - 100;\r\n    c.s = 1.5 - 1.5 * ts;\r\n    c.l = 0.8 - 0.9 * ts;\r\n    return c + \"\";\r\n  }\r\n  \r\n  var c$1 = rgb(),\r\n      pi_1_3 = Math.PI / 3,\r\n      pi_2_3 = Math.PI * 2 / 3;\r\n  \r\n  function sinebow(t) {\r\n    var x;\r\n    t = (0.5 - t) * Math.PI;\r\n    c$1.r = 255 * (x = Math.sin(t)) * x;\r\n    c$1.g = 255 * (x = Math.sin(t + pi_1_3)) * x;\r\n    c$1.b = 255 * (x = Math.sin(t + pi_2_3)) * x;\r\n    return c$1 + \"\";\r\n  }\r\n  \r\n  function turbo(t) {\r\n    t = Math.max(0, Math.min(1, t));\r\n    return \"rgb(\"\r\n        + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + \", \"\r\n        + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + \", \"\r\n        + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66)))))))\r\n        + \")\";\r\n  }\r\n  \r\n  function ramp$1(range) {\r\n    var n = range.length;\r\n    return function(t) {\r\n      return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\r\n    };\r\n  }\r\n  \r\n  var viridis = ramp$1(colors(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\"));\r\n  \r\n  var magma = ramp$1(colors(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\"));\r\n  \r\n  var inferno = ramp$1(colors(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\"));\r\n  \r\n  var plasma = ramp$1(colors(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\"));\r\n  \r\n  function constant$b(x) {\r\n    return function constant() {\r\n      return x;\r\n    };\r\n  }\r\n  \r\n  var abs$1 = Math.abs;\r\n  var atan2$1 = Math.atan2;\r\n  var cos$2 = Math.cos;\r\n  var max$2 = Math.max;\r\n  var min$1 = Math.min;\r\n  var sin$2 = Math.sin;\r\n  var sqrt$2 = Math.sqrt;\r\n  \r\n  var epsilon$3 = 1e-12;\r\n  var pi$4 = Math.PI;\r\n  var halfPi$3 = pi$4 / 2;\r\n  var tau$4 = 2 * pi$4;\r\n  \r\n  function acos$1(x) {\r\n    return x > 1 ? 0 : x < -1 ? pi$4 : Math.acos(x);\r\n  }\r\n  \r\n  function asin$1(x) {\r\n    return x >= 1 ? halfPi$3 : x <= -1 ? -halfPi$3 : Math.asin(x);\r\n  }\r\n  \r\n  function arcInnerRadius(d) {\r\n    return d.innerRadius;\r\n  }\r\n  \r\n  function arcOuterRadius(d) {\r\n    return d.outerRadius;\r\n  }\r\n  \r\n  function arcStartAngle(d) {\r\n    return d.startAngle;\r\n  }\r\n  \r\n  function arcEndAngle(d) {\r\n    return d.endAngle;\r\n  }\r\n  \r\n  function arcPadAngle(d) {\r\n    return d && d.padAngle; // Note: optional!\r\n  }\r\n  \r\n  function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\r\n    var x10 = x1 - x0, y10 = y1 - y0,\r\n        x32 = x3 - x2, y32 = y3 - y2,\r\n        t = y32 * x10 - x32 * y10;\r\n    if (t * t < epsilon$3) return;\r\n    t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;\r\n    return [x0 + t * x10, y0 + t * y10];\r\n  }\r\n  \r\n  // Compute perpendicular offset line of length rc.\r\n  // http://mathworld.wolfram.com/Circle-LineIntersection.html\r\n  function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\r\n    var x01 = x0 - x1,\r\n        y01 = y0 - y1,\r\n        lo = (cw ? rc : -rc) / sqrt$2(x01 * x01 + y01 * y01),\r\n        ox = lo * y01,\r\n        oy = -lo * x01,\r\n        x11 = x0 + ox,\r\n        y11 = y0 + oy,\r\n        x10 = x1 + ox,\r\n        y10 = y1 + oy,\r\n        x00 = (x11 + x10) / 2,\r\n        y00 = (y11 + y10) / 2,\r\n        dx = x10 - x11,\r\n        dy = y10 - y11,\r\n        d2 = dx * dx + dy * dy,\r\n        r = r1 - rc,\r\n        D = x11 * y10 - x10 * y11,\r\n        d = (dy < 0 ? -1 : 1) * sqrt$2(max$2(0, r * r * d2 - D * D)),\r\n        cx0 = (D * dy - dx * d) / d2,\r\n        cy0 = (-D * dx - dy * d) / d2,\r\n        cx1 = (D * dy + dx * d) / d2,\r\n        cy1 = (-D * dx + dy * d) / d2,\r\n        dx0 = cx0 - x00,\r\n        dy0 = cy0 - y00,\r\n        dx1 = cx1 - x00,\r\n        dy1 = cy1 - y00;\r\n  \r\n    // Pick the closer of the two intersection points.\r\n    // TODO Is there a faster way to determine which intersection to use?\r\n    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\r\n  \r\n    return {\r\n      cx: cx0,\r\n      cy: cy0,\r\n      x01: -ox,\r\n      y01: -oy,\r\n      x11: cx0 * (r1 / r - 1),\r\n      y11: cy0 * (r1 / r - 1)\r\n    };\r\n  }\r\n  \r\n  function arc() {\r\n    var innerRadius = arcInnerRadius,\r\n        outerRadius = arcOuterRadius,\r\n        cornerRadius = constant$b(0),\r\n        padRadius = null,\r\n        startAngle = arcStartAngle,\r\n        endAngle = arcEndAngle,\r\n        padAngle = arcPadAngle,\r\n        context = null;\r\n  \r\n    function arc() {\r\n      var buffer,\r\n          r,\r\n          r0 = +innerRadius.apply(this, arguments),\r\n          r1 = +outerRadius.apply(this, arguments),\r\n          a0 = startAngle.apply(this, arguments) - halfPi$3,\r\n          a1 = endAngle.apply(this, arguments) - halfPi$3,\r\n          da = abs$1(a1 - a0),\r\n          cw = a1 > a0;\r\n  \r\n      if (!context) context = buffer = path();\r\n  \r\n      // Ensure that the outer radius is always larger than the inner radius.\r\n      if (r1 < r0) r = r1, r1 = r0, r0 = r;\r\n  \r\n      // Is it a point?\r\n      if (!(r1 > epsilon$3)) context.moveTo(0, 0);\r\n  \r\n      // Or is it a circle or annulus?\r\n      else if (da > tau$4 - epsilon$3) {\r\n        context.moveTo(r1 * cos$2(a0), r1 * sin$2(a0));\r\n        context.arc(0, 0, r1, a0, a1, !cw);\r\n        if (r0 > epsilon$3) {\r\n          context.moveTo(r0 * cos$2(a1), r0 * sin$2(a1));\r\n          context.arc(0, 0, r0, a1, a0, cw);\r\n        }\r\n      }\r\n  \r\n      // Or is it a circular or annular sector?\r\n      else {\r\n        var a01 = a0,\r\n            a11 = a1,\r\n            a00 = a0,\r\n            a10 = a1,\r\n            da0 = da,\r\n            da1 = da,\r\n            ap = padAngle.apply(this, arguments) / 2,\r\n            rp = (ap > epsilon$3) && (padRadius ? +padRadius.apply(this, arguments) : sqrt$2(r0 * r0 + r1 * r1)),\r\n            rc = min$1(abs$1(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\r\n            rc0 = rc,\r\n            rc1 = rc,\r\n            t0,\r\n            t1;\r\n  \r\n        // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\r\n        if (rp > epsilon$3) {\r\n          var p0 = asin$1(rp / r0 * sin$2(ap)),\r\n              p1 = asin$1(rp / r1 * sin$2(ap));\r\n          if ((da0 -= p0 * 2) > epsilon$3) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;\r\n          else da0 = 0, a00 = a10 = (a0 + a1) / 2;\r\n          if ((da1 -= p1 * 2) > epsilon$3) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;\r\n          else da1 = 0, a01 = a11 = (a0 + a1) / 2;\r\n        }\r\n  \r\n        var x01 = r1 * cos$2(a01),\r\n            y01 = r1 * sin$2(a01),\r\n            x10 = r0 * cos$2(a10),\r\n            y10 = r0 * sin$2(a10);\r\n  \r\n        // Apply rounded corners?\r\n        if (rc > epsilon$3) {\r\n          var x11 = r1 * cos$2(a11),\r\n              y11 = r1 * sin$2(a11),\r\n              x00 = r0 * cos$2(a00),\r\n              y00 = r0 * sin$2(a00),\r\n              oc;\r\n  \r\n          // Restrict the corner radius according to the sector angle.\r\n          if (da < pi$4 && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {\r\n            var ax = x01 - oc[0],\r\n                ay = y01 - oc[1],\r\n                bx = x11 - oc[0],\r\n                by = y11 - oc[1],\r\n                kc = 1 / sin$2(acos$1((ax * bx + ay * by) / (sqrt$2(ax * ax + ay * ay) * sqrt$2(bx * bx + by * by))) / 2),\r\n                lc = sqrt$2(oc[0] * oc[0] + oc[1] * oc[1]);\r\n            rc0 = min$1(rc, (r0 - lc) / (kc - 1));\r\n            rc1 = min$1(rc, (r1 - lc) / (kc + 1));\r\n          }\r\n        }\r\n  \r\n        // Is the sector collapsed to a line?\r\n        if (!(da1 > epsilon$3)) context.moveTo(x01, y01);\r\n  \r\n        // Does the sector’s outer ring have rounded corners?\r\n        else if (rc1 > epsilon$3) {\r\n          t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\r\n          t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\r\n  \r\n          context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);\r\n  \r\n          // Have the corners merged?\r\n          if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2$1(t0.y01, t0.x01), atan2$1(t1.y01, t1.x01), !cw);\r\n  \r\n          // Otherwise, draw the two corners and the ring.\r\n          else {\r\n            context.arc(t0.cx, t0.cy, rc1, atan2$1(t0.y01, t0.x01), atan2$1(t0.y11, t0.x11), !cw);\r\n            context.arc(0, 0, r1, atan2$1(t0.cy + t0.y11, t0.cx + t0.x11), atan2$1(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\r\n            context.arc(t1.cx, t1.cy, rc1, atan2$1(t1.y11, t1.x11), atan2$1(t1.y01, t1.x01), !cw);\r\n          }\r\n        }\r\n  \r\n        // Or is the outer ring just a circular arc?\r\n        else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);\r\n  \r\n        // Is there no inner ring, and it’s a circular sector?\r\n        // Or perhaps it’s an annular sector collapsed due to padding?\r\n        if (!(r0 > epsilon$3) || !(da0 > epsilon$3)) context.lineTo(x10, y10);\r\n  \r\n        // Does the sector’s inner ring (or point) have rounded corners?\r\n        else if (rc0 > epsilon$3) {\r\n          t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\r\n          t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\r\n  \r\n          context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);\r\n  \r\n          // Have the corners merged?\r\n          if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2$1(t0.y01, t0.x01), atan2$1(t1.y01, t1.x01), !cw);\r\n  \r\n          // Otherwise, draw the two corners and the ring.\r\n          else {\r\n            context.arc(t0.cx, t0.cy, rc0, atan2$1(t0.y01, t0.x01), atan2$1(t0.y11, t0.x11), !cw);\r\n            context.arc(0, 0, r0, atan2$1(t0.cy + t0.y11, t0.cx + t0.x11), atan2$1(t1.cy + t1.y11, t1.cx + t1.x11), cw);\r\n            context.arc(t1.cx, t1.cy, rc0, atan2$1(t1.y11, t1.x11), atan2$1(t1.y01, t1.x01), !cw);\r\n          }\r\n        }\r\n  \r\n        // Or is the inner ring just a circular arc?\r\n        else context.arc(0, 0, r0, a10, a00, cw);\r\n      }\r\n  \r\n      context.closePath();\r\n  \r\n      if (buffer) return context = null, buffer + \"\" || null;\r\n    }\r\n  \r\n    arc.centroid = function() {\r\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\r\n          a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$4 / 2;\r\n      return [cos$2(a) * r, sin$2(a) * r];\r\n    };\r\n  \r\n    arc.innerRadius = function(_) {\r\n      return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant$b(+_), arc) : innerRadius;\r\n    };\r\n  \r\n    arc.outerRadius = function(_) {\r\n      return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant$b(+_), arc) : outerRadius;\r\n    };\r\n  \r\n    arc.cornerRadius = function(_) {\r\n      return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant$b(+_), arc) : cornerRadius;\r\n    };\r\n  \r\n    arc.padRadius = function(_) {\r\n      return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant$b(+_), arc) : padRadius;\r\n    };\r\n  \r\n    arc.startAngle = function(_) {\r\n      return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant$b(+_), arc) : startAngle;\r\n    };\r\n  \r\n    arc.endAngle = function(_) {\r\n      return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant$b(+_), arc) : endAngle;\r\n    };\r\n  \r\n    arc.padAngle = function(_) {\r\n      return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant$b(+_), arc) : padAngle;\r\n    };\r\n  \r\n    arc.context = function(_) {\r\n      return arguments.length ? ((context = _ == null ? null : _), arc) : context;\r\n    };\r\n  \r\n    return arc;\r\n  }\r\n  \r\n  function Linear(context) {\r\n    this._context = context;\r\n  }\r\n  \r\n  Linear.prototype = {\r\n    areaStart: function() {\r\n      this._line = 0;\r\n    },\r\n    areaEnd: function() {\r\n      this._line = NaN;\r\n    },\r\n    lineStart: function() {\r\n      this._point = 0;\r\n    },\r\n    lineEnd: function() {\r\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\r\n      this._line = 1 - this._line;\r\n    },\r\n    point: function(x, y) {\r\n      x = +x, y = +y;\r\n      switch (this._point) {\r\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\r\n        case 1: this._point = 2; // proceed\r\n        default: this._context.lineTo(x, y); break;\r\n      }\r\n    }\r\n  };\r\n  \r\n  function curveLinear(context) {\r\n    return new Linear(context);\r\n  }\r\n  \r\n  function x$3(p) {\r\n    return p[0];\r\n  }\r\n  \r\n  function y$3(p) {\r\n    return p[1];\r\n  }\r\n  \r\n  function line() {\r\n    var x = x$3,\r\n        y = y$3,\r\n        defined = constant$b(true),\r\n        context = null,\r\n        curve = curveLinear,\r\n        output = null;\r\n  \r\n    function line(data) {\r\n      var i,\r\n          n = data.length,\r\n          d,\r\n          defined0 = false,\r\n          buffer;\r\n  \r\n      if (context == null) output = curve(buffer = path());\r\n  \r\n      for (i = 0; i <= n; ++i) {\r\n        if (!(i < n && defined(d = data[i], i, data)) === defined0) {\r\n          if (defined0 = !defined0) output.lineStart();\r\n          else output.lineEnd();\r\n        }\r\n        if (defined0) output.point(+x(d, i, data), +y(d, i, data));\r\n      }\r\n  \r\n      if (buffer) return output = null, buffer + \"\" || null;\r\n    }\r\n  \r\n    line.x = function(_) {\r\n      return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$b(+_), line) : x;\r\n    };\r\n  \r\n    line.y = function(_) {\r\n      return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$b(+_), line) : y;\r\n    };\r\n  \r\n    line.defined = function(_) {\r\n      return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant$b(!!_), line) : defined;\r\n    };\r\n  \r\n    line.curve = function(_) {\r\n      return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\r\n    };\r\n  \r\n    line.context = function(_) {\r\n      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\r\n    };\r\n  \r\n    return line;\r\n  }\r\n  \r\n  function area$3() {\r\n    var x0 = x$3,\r\n        x1 = null,\r\n        y0 = constant$b(0),\r\n        y1 = y$3,\r\n        defined = constant$b(true),\r\n        context = null,\r\n        curve = curveLinear,\r\n        output = null;\r\n  \r\n    function area(data) {\r\n      var i,\r\n          j,\r\n          k,\r\n          n = data.length,\r\n          d,\r\n          defined0 = false,\r\n          buffer,\r\n          x0z = new Array(n),\r\n          y0z = new Array(n);\r\n  \r\n      if (context == null) output = curve(buffer = path());\r\n  \r\n      for (i = 0; i <= n; ++i) {\r\n        if (!(i < n && defined(d = data[i], i, data)) === defined0) {\r\n          if (defined0 = !defined0) {\r\n            j = i;\r\n            output.areaStart();\r\n            output.lineStart();\r\n          } else {\r\n            output.lineEnd();\r\n            output.lineStart();\r\n            for (k = i - 1; k >= j; --k) {\r\n              output.point(x0z[k], y0z[k]);\r\n            }\r\n            output.lineEnd();\r\n            output.areaEnd();\r\n          }\r\n        }\r\n        if (defined0) {\r\n          x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\r\n          output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\r\n        }\r\n      }\r\n  \r\n      if (buffer) return output = null, buffer + \"\" || null;\r\n    }\r\n  \r\n    function arealine() {\r\n      return line().defined(defined).curve(curve).context(context);\r\n    }\r\n  \r\n    area.x = function(_) {\r\n      return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant$b(+_), x1 = null, area) : x0;\r\n    };\r\n  \r\n    area.x0 = function(_) {\r\n      return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant$b(+_), area) : x0;\r\n    };\r\n  \r\n    area.x1 = function(_) {\r\n      return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : constant$b(+_), area) : x1;\r\n    };\r\n  \r\n    area.y = function(_) {\r\n      return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant$b(+_), y1 = null, area) : y0;\r\n    };\r\n  \r\n    area.y0 = function(_) {\r\n      return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant$b(+_), area) : y0;\r\n    };\r\n  \r\n    area.y1 = function(_) {\r\n      return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : constant$b(+_), area) : y1;\r\n    };\r\n  \r\n    area.lineX0 =\r\n    area.lineY0 = function() {\r\n      return arealine().x(x0).y(y0);\r\n    };\r\n  \r\n    area.lineY1 = function() {\r\n      return arealine().x(x0).y(y1);\r\n    };\r\n  \r\n    area.lineX1 = function() {\r\n      return arealine().x(x1).y(y0);\r\n    };\r\n  \r\n    area.defined = function(_) {\r\n      return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant$b(!!_), area) : defined;\r\n    };\r\n  \r\n    area.curve = function(_) {\r\n      return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\r\n    };\r\n  \r\n    area.context = function(_) {\r\n      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\r\n    };\r\n  \r\n    return area;\r\n  }\r\n  \r\n  function descending$1(a, b) {\r\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\r\n  }\r\n  \r\n  function identity$8(d) {\r\n    return d;\r\n  }\r\n  \r\n  function pie() {\r\n    var value = identity$8,\r\n        sortValues = descending$1,\r\n        sort = null,\r\n        startAngle = constant$b(0),\r\n        endAngle = constant$b(tau$4),\r\n        padAngle = constant$b(0);\r\n  \r\n    function pie(data) {\r\n      var i,\r\n          n = data.length,\r\n          j,\r\n          k,\r\n          sum = 0,\r\n          index = new Array(n),\r\n          arcs = new Array(n),\r\n          a0 = +startAngle.apply(this, arguments),\r\n          da = Math.min(tau$4, Math.max(-tau$4, endAngle.apply(this, arguments) - a0)),\r\n          a1,\r\n          p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),\r\n          pa = p * (da < 0 ? -1 : 1),\r\n          v;\r\n  \r\n      for (i = 0; i < n; ++i) {\r\n        if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {\r\n          sum += v;\r\n        }\r\n      }\r\n  \r\n      // Optionally sort the arcs by previously-computed values or by data.\r\n      if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });\r\n      else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });\r\n  \r\n      // Compute the arcs! They are stored in the original data's order.\r\n      for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {\r\n        j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {\r\n          data: data[j],\r\n          index: i,\r\n          value: v,\r\n          startAngle: a0,\r\n          endAngle: a1,\r\n          padAngle: p\r\n        };\r\n      }\r\n  \r\n      return arcs;\r\n    }\r\n  \r\n    pie.value = function(_) {\r\n      return arguments.length ? (value = typeof _ === \"function\" ? _ : constant$b(+_), pie) : value;\r\n    };\r\n  \r\n    pie.sortValues = function(_) {\r\n      return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;\r\n    };\r\n  \r\n    pie.sort = function(_) {\r\n      return arguments.length ? (sort = _, sortValues = null, pie) : sort;\r\n    };\r\n  \r\n    pie.startAngle = function(_) {\r\n      return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant$b(+_), pie) : startAngle;\r\n    };\r\n  \r\n    pie.endAngle = function(_) {\r\n      return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant$b(+_), pie) : endAngle;\r\n    };\r\n  \r\n    pie.padAngle = function(_) {\r\n      return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant$b(+_), pie) : padAngle;\r\n    };\r\n  \r\n    return pie;\r\n  }\r\n  \r\n  var curveRadialLinear = curveRadial(curveLinear);\r\n  \r\n  function Radial(curve) {\r\n    this._curve = curve;\r\n  }\r\n  \r\n  Radial.prototype = {\r\n    areaStart: function() {\r\n      this._curve.areaStart();\r\n    },\r\n    areaEnd: function() {\r\n      this._curve.areaEnd();\r\n    },\r\n    lineStart: function() {\r\n      this._curve.lineStart();\r\n    },\r\n    lineEnd: function() {\r\n      this._curve.lineEnd();\r\n    },\r\n    point: function(a, r) {\r\n      this._curve.point(r * Math.sin(a), r * -Math.cos(a));\r\n    }\r\n  };\r\n  \r\n  function curveRadial(curve) {\r\n  \r\n    function radial(context) {\r\n      return new Radial(curve(context));\r\n    }\r\n  \r\n    radial._curve = curve;\r\n  \r\n    return radial;\r\n  }\r\n  \r\n  function lineRadial(l) {\r\n    var c = l.curve;\r\n  \r\n    l.angle = l.x, delete l.x;\r\n    l.radius = l.y, delete l.y;\r\n  \r\n    l.curve = function(_) {\r\n      return arguments.length ? c(curveRadial(_)) : c()._curve;\r\n    };\r\n  \r\n    return l;\r\n  }\r\n  \r\n  function lineRadial$1() {\r\n    return lineRadial(line().curve(curveRadialLinear));\r\n  }\r\n  \r\n  function areaRadial() {\r\n    var a = area$3().curve(curveRadialLinear),\r\n        c = a.curve,\r\n        x0 = a.lineX0,\r\n        x1 = a.lineX1,\r\n        y0 = a.lineY0,\r\n        y1 = a.lineY1;\r\n  \r\n    a.angle = a.x, delete a.x;\r\n    a.startAngle = a.x0, delete a.x0;\r\n    a.endAngle = a.x1, delete a.x1;\r\n    a.radius = a.y, delete a.y;\r\n    a.innerRadius = a.y0, delete a.y0;\r\n    a.outerRadius = a.y1, delete a.y1;\r\n    a.lineStartAngle = function() { return lineRadial(x0()); }, delete a.lineX0;\r\n    a.lineEndAngle = function() { return lineRadial(x1()); }, delete a.lineX1;\r\n    a.lineInnerRadius = function() { return lineRadial(y0()); }, delete a.lineY0;\r\n    a.lineOuterRadius = function() { return lineRadial(y1()); }, delete a.lineY1;\r\n  \r\n    a.curve = function(_) {\r\n      return arguments.length ? c(curveRadial(_)) : c()._curve;\r\n    };\r\n  \r\n    return a;\r\n  }\r\n  \r\n  function pointRadial(x, y) {\r\n    return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];\r\n  }\r\n  \r\n  var slice$6 = Array.prototype.slice;\r\n  \r\n  function linkSource(d) {\r\n    return d.source;\r\n  }\r\n  \r\n  function linkTarget(d) {\r\n    return d.target;\r\n  }\r\n  \r\n  function link$2(curve) {\r\n    var source = linkSource,\r\n        target = linkTarget,\r\n        x = x$3,\r\n        y = y$3,\r\n        context = null;\r\n  \r\n    function link() {\r\n      var buffer, argv = slice$6.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv);\r\n      if (!context) context = buffer = path();\r\n      curve(context, +x.apply(this, (argv[0] = s, argv)), +y.apply(this, argv), +x.apply(this, (argv[0] = t, argv)), +y.apply(this, argv));\r\n      if (buffer) return context = null, buffer + \"\" || null;\r\n    }\r\n  \r\n    link.source = function(_) {\r\n      return arguments.length ? (source = _, link) : source;\r\n    };\r\n  \r\n    link.target = function(_) {\r\n      return arguments.length ? (target = _, link) : target;\r\n    };\r\n  \r\n    link.x = function(_) {\r\n      return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$b(+_), link) : x;\r\n    };\r\n  \r\n    link.y = function(_) {\r\n      return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$b(+_), link) : y;\r\n    };\r\n  \r\n    link.context = function(_) {\r\n      return arguments.length ? ((context = _ == null ? null : _), link) : context;\r\n    };\r\n  \r\n    return link;\r\n  }\r\n  \r\n  function curveHorizontal(context, x0, y0, x1, y1) {\r\n    context.moveTo(x0, y0);\r\n    context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);\r\n  }\r\n  \r\n  function curveVertical(context, x0, y0, x1, y1) {\r\n    context.moveTo(x0, y0);\r\n    context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);\r\n  }\r\n  \r\n  function curveRadial$1(context, x0, y0, x1, y1) {\r\n    var p0 = pointRadial(x0, y0),\r\n        p1 = pointRadial(x0, y0 = (y0 + y1) / 2),\r\n        p2 = pointRadial(x1, y0),\r\n        p3 = pointRadial(x1, y1);\r\n    context.moveTo(p0[0], p0[1]);\r\n    context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);\r\n  }\r\n  \r\n  function linkHorizontal() {\r\n    return link$2(curveHorizontal);\r\n  }\r\n  \r\n  function linkVertical() {\r\n    return link$2(curveVertical);\r\n  }\r\n  \r\n  function linkRadial() {\r\n    var l = link$2(curveRadial$1);\r\n    l.angle = l.x, delete l.x;\r\n    l.radius = l.y, delete l.y;\r\n    return l;\r\n  }\r\n  \r\n  var circle$2 = {\r\n    draw: function(context, size) {\r\n      var r = Math.sqrt(size / pi$4);\r\n      context.moveTo(r, 0);\r\n      context.arc(0, 0, r, 0, tau$4);\r\n    }\r\n  };\r\n  \r\n  var cross$2 = {\r\n    draw: function(context, size) {\r\n      var r = Math.sqrt(size / 5) / 2;\r\n      context.moveTo(-3 * r, -r);\r\n      context.lineTo(-r, -r);\r\n      context.lineTo(-r, -3 * r);\r\n      context.lineTo(r, -3 * r);\r\n      context.lineTo(r, -r);\r\n      context.lineTo(3 * r, -r);\r\n      context.lineTo(3 * r, r);\r\n      context.lineTo(r, r);\r\n      context.lineTo(r, 3 * r);\r\n      context.lineTo(-r, 3 * r);\r\n      context.lineTo(-r, r);\r\n      context.lineTo(-3 * r, r);\r\n      context.closePath();\r\n    }\r\n  };\r\n  \r\n  var tan30 = Math.sqrt(1 / 3),\r\n      tan30_2 = tan30 * 2;\r\n  \r\n  var diamond = {\r\n    draw: function(context, size) {\r\n      var y = Math.sqrt(size / tan30_2),\r\n          x = y * tan30;\r\n      context.moveTo(0, -y);\r\n      context.lineTo(x, 0);\r\n      context.lineTo(0, y);\r\n      context.lineTo(-x, 0);\r\n      context.closePath();\r\n    }\r\n  };\r\n  \r\n  var ka = 0.89081309152928522810,\r\n      kr = Math.sin(pi$4 / 10) / Math.sin(7 * pi$4 / 10),\r\n      kx = Math.sin(tau$4 / 10) * kr,\r\n      ky = -Math.cos(tau$4 / 10) * kr;\r\n  \r\n  var star = {\r\n    draw: function(context, size) {\r\n      var r = Math.sqrt(size * ka),\r\n          x = kx * r,\r\n          y = ky * r;\r\n      context.moveTo(0, -r);\r\n      context.lineTo(x, y);\r\n      for (var i = 1; i < 5; ++i) {\r\n        var a = tau$4 * i / 5,\r\n            c = Math.cos(a),\r\n            s = Math.sin(a);\r\n        context.lineTo(s * r, -c * r);\r\n        context.lineTo(c * x - s * y, s * x + c * y);\r\n      }\r\n      context.closePath();\r\n    }\r\n  };\r\n  \r\n  var square = {\r\n    draw: function(context, size) {\r\n      var w = Math.sqrt(size),\r\n          x = -w / 2;\r\n      context.rect(x, x, w, w);\r\n    }\r\n  };\r\n  \r\n  var sqrt3 = Math.sqrt(3);\r\n  \r\n  var triangle = {\r\n    draw: function(context, size) {\r\n      var y = -Math.sqrt(size / (sqrt3 * 3));\r\n      context.moveTo(0, y * 2);\r\n      context.lineTo(-sqrt3 * y, -y);\r\n      context.lineTo(sqrt3 * y, -y);\r\n      context.closePath();\r\n    }\r\n  };\r\n  \r\n  var c$2 = -0.5,\r\n      s = Math.sqrt(3) / 2,\r\n      k = 1 / Math.sqrt(12),\r\n      a = (k / 2 + 1) * 3;\r\n  \r\n  var wye = {\r\n    draw: function(context, size) {\r\n      var r = Math.sqrt(size / a),\r\n          x0 = r / 2,\r\n          y0 = r * k,\r\n          x1 = x0,\r\n          y1 = r * k + r,\r\n          x2 = -x1,\r\n          y2 = y1;\r\n      context.moveTo(x0, y0);\r\n      context.lineTo(x1, y1);\r\n      context.lineTo(x2, y2);\r\n      context.lineTo(c$2 * x0 - s * y0, s * x0 + c$2 * y0);\r\n      context.lineTo(c$2 * x1 - s * y1, s * x1 + c$2 * y1);\r\n      context.lineTo(c$2 * x2 - s * y2, s * x2 + c$2 * y2);\r\n      context.lineTo(c$2 * x0 + s * y0, c$2 * y0 - s * x0);\r\n      context.lineTo(c$2 * x1 + s * y1, c$2 * y1 - s * x1);\r\n      context.lineTo(c$2 * x2 + s * y2, c$2 * y2 - s * x2);\r\n      context.closePath();\r\n    }\r\n  };\r\n  \r\n  var symbols = [\r\n    circle$2,\r\n    cross$2,\r\n    diamond,\r\n    square,\r\n    star,\r\n    triangle,\r\n    wye\r\n  ];\r\n  \r\n  function symbol() {\r\n    var type = constant$b(circle$2),\r\n        size = constant$b(64),\r\n        context = null;\r\n  \r\n    function symbol() {\r\n      var buffer;\r\n      if (!context) context = buffer = path();\r\n      type.apply(this, arguments).draw(context, +size.apply(this, arguments));\r\n      if (buffer) return context = null, buffer + \"\" || null;\r\n    }\r\n  \r\n    symbol.type = function(_) {\r\n      return arguments.length ? (type = typeof _ === \"function\" ? _ : constant$b(_), symbol) : type;\r\n    };\r\n  \r\n    symbol.size = function(_) {\r\n      return arguments.length ? (size = typeof _ === \"function\" ? _ : constant$b(+_), symbol) : size;\r\n    };\r\n  \r\n    symbol.context = function(_) {\r\n      return arguments.length ? (context = _ == null ? null : _, symbol) : context;\r\n    };\r\n  \r\n    return symbol;\r\n  }\r\n  \r\n  function noop$3() {}\r\n  \r\n  function point$2(that, x, y) {\r\n    that._context.bezierCurveTo(\r\n      (2 * that._x0 + that._x1) / 3,\r\n      (2 * that._y0 + that._y1) / 3,\r\n      (that._x0 + 2 * that._x1) / 3,\r\n      (that._y0 + 2 * that._y1) / 3,\r\n      (that._x0 + 4 * that._x1 + x) / 6,\r\n      (that._y0 + 4 * that._y1 + y) / 6\r\n    );\r\n  }\r\n  \r\n  function Basis(context) {\r\n    this._context = context;\r\n  }\r\n  \r\n  Basis.prototype = {\r\n    areaStart: function() {\r\n      this._line = 0;\r\n    },\r\n    areaEnd: function() {\r\n      this._line = NaN;\r\n    },\r\n    lineStart: function() {\r\n      this._x0 = this._x1 =\r\n      this._y0 = this._y1 = NaN;\r\n      this._point = 0;\r\n    },\r\n    lineEnd: function() {\r\n      switch (this._point) {\r\n        case 3: point$2(this, this._x1, this._y1); // proceed\r\n        case 2: this._context.lineTo(this._x1, this._y1); break;\r\n      }\r\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\r\n      this._line = 1 - this._line;\r\n    },\r\n    point: function(x, y) {\r\n      x = +x, y = +y;\r\n      switch (this._point) {\r\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\r\n        case 1: this._point = 2; break;\r\n        case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed\r\n        default: point$2(this, x, y); break;\r\n      }\r\n      this._x0 = this._x1, this._x1 = x;\r\n      this._y0 = this._y1, this._y1 = y;\r\n    }\r\n  };\r\n  \r\n  function basis$2(context) {\r\n    return new Basis(context);\r\n  }\r\n  \r\n  function BasisClosed(context) {\r\n    this._context = context;\r\n  }\r\n  \r\n  BasisClosed.prototype = {\r\n    areaStart: noop$3,\r\n    areaEnd: noop$3,\r\n    lineStart: function() {\r\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =\r\n      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;\r\n      this._point = 0;\r\n    },\r\n    lineEnd: function() {\r\n      switch (this._point) {\r\n        case 1: {\r\n          this._context.moveTo(this._x2, this._y2);\r\n          this._context.closePath();\r\n          break;\r\n        }\r\n        case 2: {\r\n          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);\r\n          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);\r\n          this._context.closePath();\r\n          break;\r\n        }\r\n        case 3: {\r\n          this.point(this._x2, this._y2);\r\n          this.point(this._x3, this._y3);\r\n          this.point(this._x4, this._y4);\r\n          break;\r\n        }\r\n      }\r\n    },\r\n    point: function(x, y) {\r\n      x = +x, y = +y;\r\n      switch (this._point) {\r\n        case 0: this._point = 1; this._x2 = x, this._y2 = y; break;\r\n        case 1: this._point = 2; this._x3 = x, this._y3 = y; break;\r\n        case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;\r\n        default: point$2(this, x, y); break;\r\n      }\r\n      this._x0 = this._x1, this._x1 = x;\r\n      this._y0 = this._y1, this._y1 = y;\r\n    }\r\n  };\r\n  \r\n  function basisClosed$1(context) {\r\n    return new BasisClosed(context);\r\n  }\r\n  \r\n  function BasisOpen(context) {\r\n    this._context = context;\r\n  }\r\n  \r\n  BasisOpen.prototype = {\r\n    areaStart: function() {\r\n      this._line = 0;\r\n    },\r\n    areaEnd: function() {\r\n      this._line = NaN;\r\n    },\r\n    lineStart: function() {\r\n      this._x0 = this._x1 =\r\n      this._y0 = this._y1 = NaN;\r\n      this._point = 0;\r\n    },\r\n    lineEnd: function() {\r\n      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\r\n      this._line = 1 - this._line;\r\n    },\r\n    point: function(x, y) {\r\n      x = +x, y = +y;\r\n      switch (this._point) {\r\n        case 0: this._point = 1; break;\r\n        case 1: this._point = 2; break;\r\n        case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;\r\n        case 3: this._point = 4; // proceed\r\n        default: point$2(this, x, y); break;\r\n      }\r\n      this._x0 = this._x1, this._x1 = x;\r\n      this._y0 = this._y1, this._y1 = y;\r\n    }\r\n  };\r\n  \r\n  function basisOpen(context) {\r\n    return new BasisOpen(context);\r\n  }\r\n  \r\n  function Bundle(context, beta) {\r\n    this._basis = new Basis(context);\r\n    this._beta = beta;\r\n  }\r\n  \r\n  Bundle.prototype = {\r\n    lineStart: function() {\r\n      this._x = [];\r\n      this._y = [];\r\n      this._basis.lineStart();\r\n    },\r\n    lineEnd: function() {\r\n      var x = this._x,\r\n          y = this._y,\r\n          j = x.length - 1;\r\n  \r\n      if (j > 0) {\r\n        var x0 = x[0],\r\n            y0 = y[0],\r\n            dx = x[j] - x0,\r\n            dy = y[j] - y0,\r\n            i = -1,\r\n            t;\r\n  \r\n        while (++i <= j) {\r\n          t = i / j;\r\n          this._basis.point(\r\n            this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),\r\n            this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)\r\n          );\r\n        }\r\n      }\r\n  \r\n      this._x = this._y = null;\r\n      this._basis.lineEnd();\r\n    },\r\n    point: function(x, y) {\r\n      this._x.push(+x);\r\n      this._y.push(+y);\r\n    }\r\n  };\r\n  \r\n  var bundle = (function custom(beta) {\r\n  \r\n    function bundle(context) {\r\n      return beta === 1 ? new Basis(context) : new Bundle(context, beta);\r\n    }\r\n  \r\n    bundle.beta = function(beta) {\r\n      return custom(+beta);\r\n    };\r\n  \r\n    return bundle;\r\n  })(0.85);\r\n  \r\n  function point$3(that, x, y) {\r\n    that._context.bezierCurveTo(\r\n      that._x1 + that._k * (that._x2 - that._x0),\r\n      that._y1 + that._k * (that._y2 - that._y0),\r\n      that._x2 + that._k * (that._x1 - x),\r\n      that._y2 + that._k * (that._y1 - y),\r\n      that._x2,\r\n      that._y2\r\n    );\r\n  }\r\n  \r\n  function Cardinal(context, tension) {\r\n    this._context = context;\r\n    this._k = (1 - tension) / 6;\r\n  }\r\n  \r\n  Cardinal.prototype = {\r\n    areaStart: function() {\r\n      this._line = 0;\r\n    },\r\n    areaEnd: function() {\r\n      this._line = NaN;\r\n    },\r\n    lineStart: function() {\r\n      this._x0 = this._x1 = this._x2 =\r\n      this._y0 = this._y1 = this._y2 = NaN;\r\n      this._point = 0;\r\n    },\r\n    lineEnd: function() {\r\n      switch (this._point) {\r\n        case 2: this._context.lineTo(this._x2, this._y2); break;\r\n        case 3: point$3(this, this._x1, this._y1); break;\r\n      }\r\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\r\n      this._line = 1 - this._line;\r\n    },\r\n    point: function(x, y) {\r\n      x = +x, y = +y;\r\n      switch (this._point) {\r\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\r\n        case 1: this._point = 2; this._x1 = x, this._y1 = y; break;\r\n        case 2: this._point = 3; // proceed\r\n        default: point$3(this, x, y); break;\r\n      }\r\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\r\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\r\n    }\r\n  };\r\n  \r\n  var cardinal = (function custom(tension) {\r\n  \r\n    function cardinal(context) {\r\n      return new Cardinal(context, tension);\r\n    }\r\n  \r\n    cardinal.tension = function(tension) {\r\n      return custom(+tension);\r\n    };\r\n  \r\n    return cardinal;\r\n  })(0);\r\n  \r\n  function CardinalClosed(context, tension) {\r\n    this._context = context;\r\n    this._k = (1 - tension) / 6;\r\n  }\r\n  \r\n  CardinalClosed.prototype = {\r\n    areaStart: noop$3,\r\n    areaEnd: noop$3,\r\n    lineStart: function() {\r\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\r\n      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\r\n      this._point = 0;\r\n    },\r\n    lineEnd: function() {\r\n      switch (this._point) {\r\n        case 1: {\r\n          this._context.moveTo(this._x3, this._y3);\r\n          this._context.closePath();\r\n          break;\r\n        }\r\n        case 2: {\r\n          this._context.lineTo(this._x3, this._y3);\r\n          this._context.closePath();\r\n          break;\r\n        }\r\n        case 3: {\r\n          this.point(this._x3, this._y3);\r\n          this.point(this._x4, this._y4);\r\n          this.point(this._x5, this._y5);\r\n          break;\r\n        }\r\n      }\r\n    },\r\n    point: function(x, y) {\r\n      x = +x, y = +y;\r\n      switch (this._point) {\r\n        case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\r\n        case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\r\n        case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\r\n        default: point$3(this, x, y); break;\r\n      }\r\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\r\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\r\n    }\r\n  };\r\n  \r\n  var cardinalClosed = (function custom(tension) {\r\n  \r\n    function cardinal(context) {\r\n      return new CardinalClosed(context, tension);\r\n    }\r\n  \r\n    cardinal.tension = function(tension) {\r\n      return custom(+tension);\r\n    };\r\n  \r\n    return cardinal;\r\n  })(0);\r\n  \r\n  function CardinalOpen(context, tension) {\r\n    this._context = context;\r\n    this._k = (1 - tension) / 6;\r\n  }\r\n  \r\n  CardinalOpen.prototype = {\r\n    areaStart: function() {\r\n      this._line = 0;\r\n    },\r\n    areaEnd: function() {\r\n      this._line = NaN;\r\n    },\r\n    lineStart: function() {\r\n      this._x0 = this._x1 = this._x2 =\r\n      this._y0 = this._y1 = this._y2 = NaN;\r\n      this._point = 0;\r\n    },\r\n    lineEnd: function() {\r\n      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\r\n      this._line = 1 - this._line;\r\n    },\r\n    point: function(x, y) {\r\n      x = +x, y = +y;\r\n      switch (this._point) {\r\n        case 0: this._point = 1; break;\r\n        case 1: this._point = 2; break;\r\n        case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\r\n        case 3: this._point = 4; // proceed\r\n        default: point$3(this, x, y); break;\r\n      }\r\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\r\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\r\n    }\r\n  };\r\n  \r\n  var cardinalOpen = (function custom(tension) {\r\n  \r\n    function cardinal(context) {\r\n      return new CardinalOpen(context, tension);\r\n    }\r\n  \r\n    cardinal.tension = function(tension) {\r\n      return custom(+tension);\r\n    };\r\n  \r\n    return cardinal;\r\n  })(0);\r\n  \r\n  function point$4(that, x, y) {\r\n    var x1 = that._x1,\r\n        y1 = that._y1,\r\n        x2 = that._x2,\r\n        y2 = that._y2;\r\n  \r\n    if (that._l01_a > epsilon$3) {\r\n      var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,\r\n          n = 3 * that._l01_a * (that._l01_a + that._l12_a);\r\n      x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;\r\n      y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;\r\n    }\r\n  \r\n    if (that._l23_a > epsilon$3) {\r\n      var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,\r\n          m = 3 * that._l23_a * (that._l23_a + that._l12_a);\r\n      x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;\r\n      y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;\r\n    }\r\n  \r\n    that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);\r\n  }\r\n  \r\n  function CatmullRom(context, alpha) {\r\n    this._context = context;\r\n    this._alpha = alpha;\r\n  }\r\n  \r\n  CatmullRom.prototype = {\r\n    areaStart: function() {\r\n      this._line = 0;\r\n    },\r\n    areaEnd: function() {\r\n      this._line = NaN;\r\n    },\r\n    lineStart: function() {\r\n      this._x0 = this._x1 = this._x2 =\r\n      this._y0 = this._y1 = this._y2 = NaN;\r\n      this._l01_a = this._l12_a = this._l23_a =\r\n      this._l01_2a = this._l12_2a = this._l23_2a =\r\n      this._point = 0;\r\n    },\r\n    lineEnd: function() {\r\n      switch (this._point) {\r\n        case 2: this._context.lineTo(this._x2, this._y2); break;\r\n        case 3: this.point(this._x2, this._y2); break;\r\n      }\r\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\r\n      this._line = 1 - this._line;\r\n    },\r\n    point: function(x, y) {\r\n      x = +x, y = +y;\r\n  \r\n      if (this._point) {\r\n        var x23 = this._x2 - x,\r\n            y23 = this._y2 - y;\r\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\r\n      }\r\n  \r\n      switch (this._point) {\r\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\r\n        case 1: this._point = 2; break;\r\n        case 2: this._point = 3; // proceed\r\n        default: point$4(this, x, y); break;\r\n      }\r\n  \r\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\r\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\r\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\r\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\r\n    }\r\n  };\r\n  \r\n  var catmullRom = (function custom(alpha) {\r\n  \r\n    function catmullRom(context) {\r\n      return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);\r\n    }\r\n  \r\n    catmullRom.alpha = function(alpha) {\r\n      return custom(+alpha);\r\n    };\r\n  \r\n    return catmullRom;\r\n  })(0.5);\r\n  \r\n  function CatmullRomClosed(context, alpha) {\r\n    this._context = context;\r\n    this._alpha = alpha;\r\n  }\r\n  \r\n  CatmullRomClosed.prototype = {\r\n    areaStart: noop$3,\r\n    areaEnd: noop$3,\r\n    lineStart: function() {\r\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\r\n      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\r\n      this._l01_a = this._l12_a = this._l23_a =\r\n      this._l01_2a = this._l12_2a = this._l23_2a =\r\n      this._point = 0;\r\n    },\r\n    lineEnd: function() {\r\n      switch (this._point) {\r\n        case 1: {\r\n          this._context.moveTo(this._x3, this._y3);\r\n          this._context.closePath();\r\n          break;\r\n        }\r\n        case 2: {\r\n          this._context.lineTo(this._x3, this._y3);\r\n          this._context.closePath();\r\n          break;\r\n        }\r\n        case 3: {\r\n          this.point(this._x3, this._y3);\r\n          this.point(this._x4, this._y4);\r\n          this.point(this._x5, this._y5);\r\n          break;\r\n        }\r\n      }\r\n    },\r\n    point: function(x, y) {\r\n      x = +x, y = +y;\r\n  \r\n      if (this._point) {\r\n        var x23 = this._x2 - x,\r\n            y23 = this._y2 - y;\r\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\r\n      }\r\n  \r\n      switch (this._point) {\r\n        case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\r\n        case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\r\n        case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\r\n        default: point$4(this, x, y); break;\r\n      }\r\n  \r\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\r\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\r\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\r\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\r\n    }\r\n  };\r\n  \r\n  var catmullRomClosed = (function custom(alpha) {\r\n  \r\n    function catmullRom(context) {\r\n      return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);\r\n    }\r\n  \r\n    catmullRom.alpha = function(alpha) {\r\n      return custom(+alpha);\r\n    };\r\n  \r\n    return catmullRom;\r\n  })(0.5);\r\n  \r\n  function CatmullRomOpen(context, alpha) {\r\n    this._context = context;\r\n    this._alpha = alpha;\r\n  }\r\n  \r\n  CatmullRomOpen.prototype = {\r\n    areaStart: function() {\r\n      this._line = 0;\r\n    },\r\n    areaEnd: function() {\r\n      this._line = NaN;\r\n    },\r\n    lineStart: function() {\r\n      this._x0 = this._x1 = this._x2 =\r\n      this._y0 = this._y1 = this._y2 = NaN;\r\n      this._l01_a = this._l12_a = this._l23_a =\r\n      this._l01_2a = this._l12_2a = this._l23_2a =\r\n      this._point = 0;\r\n    },\r\n    lineEnd: function() {\r\n      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\r\n      this._line = 1 - this._line;\r\n    },\r\n    point: function(x, y) {\r\n      x = +x, y = +y;\r\n  \r\n      if (this._point) {\r\n        var x23 = this._x2 - x,\r\n            y23 = this._y2 - y;\r\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\r\n      }\r\n  \r\n      switch (this._point) {\r\n        case 0: this._point = 1; break;\r\n        case 1: this._point = 2; break;\r\n        case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\r\n        case 3: this._point = 4; // proceed\r\n        default: point$4(this, x, y); break;\r\n      }\r\n  \r\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\r\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\r\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\r\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\r\n    }\r\n  };\r\n  \r\n  var catmullRomOpen = (function custom(alpha) {\r\n  \r\n    function catmullRom(context) {\r\n      return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);\r\n    }\r\n  \r\n    catmullRom.alpha = function(alpha) {\r\n      return custom(+alpha);\r\n    };\r\n  \r\n    return catmullRom;\r\n  })(0.5);\r\n  \r\n  function LinearClosed(context) {\r\n    this._context = context;\r\n  }\r\n  \r\n  LinearClosed.prototype = {\r\n    areaStart: noop$3,\r\n    areaEnd: noop$3,\r\n    lineStart: function() {\r\n      this._point = 0;\r\n    },\r\n    lineEnd: function() {\r\n      if (this._point) this._context.closePath();\r\n    },\r\n    point: function(x, y) {\r\n      x = +x, y = +y;\r\n      if (this._point) this._context.lineTo(x, y);\r\n      else this._point = 1, this._context.moveTo(x, y);\r\n    }\r\n  };\r\n  \r\n  function linearClosed(context) {\r\n    return new LinearClosed(context);\r\n  }\r\n  \r\n  function sign$1(x) {\r\n    return x < 0 ? -1 : 1;\r\n  }\r\n  \r\n  // Calculate the slopes of the tangents (Hermite-type interpolation) based on\r\n  // the following paper: Steffen, M. 1990. A Simple Method for Monotonic\r\n  // Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.\r\n  // NOV(II), P. 443, 1990.\r\n  function slope3(that, x2, y2) {\r\n    var h0 = that._x1 - that._x0,\r\n        h1 = x2 - that._x1,\r\n        s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),\r\n        s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),\r\n        p = (s0 * h1 + s1 * h0) / (h0 + h1);\r\n    return (sign$1(s0) + sign$1(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\r\n  }\r\n  \r\n  // Calculate a one-sided slope.\r\n  function slope2(that, t) {\r\n    var h = that._x1 - that._x0;\r\n    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\r\n  }\r\n  \r\n  // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\r\n  // \"you can express cubic Hermite interpolation in terms of cubic Bézier curves\r\n  // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\r\n  function point$5(that, t0, t1) {\r\n    var x0 = that._x0,\r\n        y0 = that._y0,\r\n        x1 = that._x1,\r\n        y1 = that._y1,\r\n        dx = (x1 - x0) / 3;\r\n    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);\r\n  }\r\n  \r\n  function MonotoneX(context) {\r\n    this._context = context;\r\n  }\r\n  \r\n  MonotoneX.prototype = {\r\n    areaStart: function() {\r\n      this._line = 0;\r\n    },\r\n    areaEnd: function() {\r\n      this._line = NaN;\r\n    },\r\n    lineStart: function() {\r\n      this._x0 = this._x1 =\r\n      this._y0 = this._y1 =\r\n      this._t0 = NaN;\r\n      this._point = 0;\r\n    },\r\n    lineEnd: function() {\r\n      switch (this._point) {\r\n        case 2: this._context.lineTo(this._x1, this._y1); break;\r\n        case 3: point$5(this, this._t0, slope2(this, this._t0)); break;\r\n      }\r\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\r\n      this._line = 1 - this._line;\r\n    },\r\n    point: function(x, y) {\r\n      var t1 = NaN;\r\n  \r\n      x = +x, y = +y;\r\n      if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\r\n      switch (this._point) {\r\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\r\n        case 1: this._point = 2; break;\r\n        case 2: this._point = 3; point$5(this, slope2(this, t1 = slope3(this, x, y)), t1); break;\r\n        default: point$5(this, this._t0, t1 = slope3(this, x, y)); break;\r\n      }\r\n  \r\n      this._x0 = this._x1, this._x1 = x;\r\n      this._y0 = this._y1, this._y1 = y;\r\n      this._t0 = t1;\r\n    }\r\n  };\r\n  \r\n  function MonotoneY(context) {\r\n    this._context = new ReflectContext(context);\r\n  }\r\n  \r\n  (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {\r\n    MonotoneX.prototype.point.call(this, y, x);\r\n  };\r\n  \r\n  function ReflectContext(context) {\r\n    this._context = context;\r\n  }\r\n  \r\n  ReflectContext.prototype = {\r\n    moveTo: function(x, y) { this._context.moveTo(y, x); },\r\n    closePath: function() { this._context.closePath(); },\r\n    lineTo: function(x, y) { this._context.lineTo(y, x); },\r\n    bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }\r\n  };\r\n  \r\n  function monotoneX(context) {\r\n    return new MonotoneX(context);\r\n  }\r\n  \r\n  function monotoneY(context) {\r\n    return new MonotoneY(context);\r\n  }\r\n  \r\n  function Natural(context) {\r\n    this._context = context;\r\n  }\r\n  \r\n  Natural.prototype = {\r\n    areaStart: function() {\r\n      this._line = 0;\r\n    },\r\n    areaEnd: function() {\r\n      this._line = NaN;\r\n    },\r\n    lineStart: function() {\r\n      this._x = [];\r\n      this._y = [];\r\n    },\r\n    lineEnd: function() {\r\n      var x = this._x,\r\n          y = this._y,\r\n          n = x.length;\r\n  \r\n      if (n) {\r\n        this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);\r\n        if (n === 2) {\r\n          this._context.lineTo(x[1], y[1]);\r\n        } else {\r\n          var px = controlPoints(x),\r\n              py = controlPoints(y);\r\n          for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {\r\n            this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);\r\n          }\r\n        }\r\n      }\r\n  \r\n      if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();\r\n      this._line = 1 - this._line;\r\n      this._x = this._y = null;\r\n    },\r\n    point: function(x, y) {\r\n      this._x.push(+x);\r\n      this._y.push(+y);\r\n    }\r\n  };\r\n  \r\n  // See https://www.particleincell.com/2012/bezier-splines/ for derivation.\r\n  function controlPoints(x) {\r\n    var i,\r\n        n = x.length - 1,\r\n        m,\r\n        a = new Array(n),\r\n        b = new Array(n),\r\n        r = new Array(n);\r\n    a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];\r\n    for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];\r\n    a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];\r\n    for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];\r\n    a[n - 1] = r[n - 1] / b[n - 1];\r\n    for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];\r\n    b[n - 1] = (x[n] + a[n - 1]) / 2;\r\n    for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];\r\n    return [a, b];\r\n  }\r\n  \r\n  function natural(context) {\r\n    return new Natural(context);\r\n  }\r\n  \r\n  function Step(context, t) {\r\n    this._context = context;\r\n    this._t = t;\r\n  }\r\n  \r\n  Step.prototype = {\r\n    areaStart: function() {\r\n      this._line = 0;\r\n    },\r\n    areaEnd: function() {\r\n      this._line = NaN;\r\n    },\r\n    lineStart: function() {\r\n      this._x = this._y = NaN;\r\n      this._point = 0;\r\n    },\r\n    lineEnd: function() {\r\n      if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);\r\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\r\n      if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;\r\n    },\r\n    point: function(x, y) {\r\n      x = +x, y = +y;\r\n      switch (this._point) {\r\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\r\n        case 1: this._point = 2; // proceed\r\n        default: {\r\n          if (this._t <= 0) {\r\n            this._context.lineTo(this._x, y);\r\n            this._context.lineTo(x, y);\r\n          } else {\r\n            var x1 = this._x * (1 - this._t) + x * this._t;\r\n            this._context.lineTo(x1, this._y);\r\n            this._context.lineTo(x1, y);\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      this._x = x, this._y = y;\r\n    }\r\n  };\r\n  \r\n  function step(context) {\r\n    return new Step(context, 0.5);\r\n  }\r\n  \r\n  function stepBefore(context) {\r\n    return new Step(context, 0);\r\n  }\r\n  \r\n  function stepAfter(context) {\r\n    return new Step(context, 1);\r\n  }\r\n  \r\n  function none$1(series, order) {\r\n    if (!((n = series.length) > 1)) return;\r\n    for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {\r\n      s0 = s1, s1 = series[order[i]];\r\n      for (j = 0; j < m; ++j) {\r\n        s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];\r\n      }\r\n    }\r\n  }\r\n  \r\n  function none$2(series) {\r\n    var n = series.length, o = new Array(n);\r\n    while (--n >= 0) o[n] = n;\r\n    return o;\r\n  }\r\n  \r\n  function stackValue(d, key) {\r\n    return d[key];\r\n  }\r\n  \r\n  function stack() {\r\n    var keys = constant$b([]),\r\n        order = none$2,\r\n        offset = none$1,\r\n        value = stackValue;\r\n  \r\n    function stack(data) {\r\n      var kz = keys.apply(this, arguments),\r\n          i,\r\n          m = data.length,\r\n          n = kz.length,\r\n          sz = new Array(n),\r\n          oz;\r\n  \r\n      for (i = 0; i < n; ++i) {\r\n        for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {\r\n          si[j] = sij = [0, +value(data[j], ki, j, data)];\r\n          sij.data = data[j];\r\n        }\r\n        si.key = ki;\r\n      }\r\n  \r\n      for (i = 0, oz = order(sz); i < n; ++i) {\r\n        sz[oz[i]].index = i;\r\n      }\r\n  \r\n      offset(sz, oz);\r\n      return sz;\r\n    }\r\n  \r\n    stack.keys = function(_) {\r\n      return arguments.length ? (keys = typeof _ === \"function\" ? _ : constant$b(slice$6.call(_)), stack) : keys;\r\n    };\r\n  \r\n    stack.value = function(_) {\r\n      return arguments.length ? (value = typeof _ === \"function\" ? _ : constant$b(+_), stack) : value;\r\n    };\r\n  \r\n    stack.order = function(_) {\r\n      return arguments.length ? (order = _ == null ? none$2 : typeof _ === \"function\" ? _ : constant$b(slice$6.call(_)), stack) : order;\r\n    };\r\n  \r\n    stack.offset = function(_) {\r\n      return arguments.length ? (offset = _ == null ? none$1 : _, stack) : offset;\r\n    };\r\n  \r\n    return stack;\r\n  }\r\n  \r\n  function expand(series, order) {\r\n    if (!((n = series.length) > 0)) return;\r\n    for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {\r\n      for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;\r\n      if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;\r\n    }\r\n    none$1(series, order);\r\n  }\r\n  \r\n  function diverging$1(series, order) {\r\n    if (!((n = series.length) > 0)) return;\r\n    for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {\r\n      for (yp = yn = 0, i = 0; i < n; ++i) {\r\n        if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) {\r\n          d[0] = yp, d[1] = yp += dy;\r\n        } else if (dy < 0) {\r\n          d[1] = yn, d[0] = yn += dy;\r\n        } else {\r\n          d[0] = 0, d[1] = dy;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  function silhouette(series, order) {\r\n    if (!((n = series.length) > 0)) return;\r\n    for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {\r\n      for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;\r\n      s0[j][1] += s0[j][0] = -y / 2;\r\n    }\r\n    none$1(series, order);\r\n  }\r\n  \r\n  function wiggle(series, order) {\r\n    if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;\r\n    for (var y = 0, j = 1, s0, m, n; j < m; ++j) {\r\n      for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {\r\n        var si = series[order[i]],\r\n            sij0 = si[j][1] || 0,\r\n            sij1 = si[j - 1][1] || 0,\r\n            s3 = (sij0 - sij1) / 2;\r\n        for (var k = 0; k < i; ++k) {\r\n          var sk = series[order[k]],\r\n              skj0 = sk[j][1] || 0,\r\n              skj1 = sk[j - 1][1] || 0;\r\n          s3 += skj0 - skj1;\r\n        }\r\n        s1 += sij0, s2 += s3 * sij0;\r\n      }\r\n      s0[j - 1][1] += s0[j - 1][0] = y;\r\n      if (s1) y -= s2 / s1;\r\n    }\r\n    s0[j - 1][1] += s0[j - 1][0] = y;\r\n    none$1(series, order);\r\n  }\r\n  \r\n  function appearance(series) {\r\n    var peaks = series.map(peak);\r\n    return none$2(series).sort(function(a, b) { return peaks[a] - peaks[b]; });\r\n  }\r\n  \r\n  function peak(series) {\r\n    var i = -1, j = 0, n = series.length, vi, vj = -Infinity;\r\n    while (++i < n) if ((vi = +series[i][1]) > vj) vj = vi, j = i;\r\n    return j;\r\n  }\r\n  \r\n  function ascending$3(series) {\r\n    var sums = series.map(sum$2);\r\n    return none$2(series).sort(function(a, b) { return sums[a] - sums[b]; });\r\n  }\r\n  \r\n  function sum$2(series) {\r\n    var s = 0, i = -1, n = series.length, v;\r\n    while (++i < n) if (v = +series[i][1]) s += v;\r\n    return s;\r\n  }\r\n  \r\n  function descending$2(series) {\r\n    return ascending$3(series).reverse();\r\n  }\r\n  \r\n  function insideOut(series) {\r\n    var n = series.length,\r\n        i,\r\n        j,\r\n        sums = series.map(sum$2),\r\n        order = appearance(series),\r\n        top = 0,\r\n        bottom = 0,\r\n        tops = [],\r\n        bottoms = [];\r\n  \r\n    for (i = 0; i < n; ++i) {\r\n      j = order[i];\r\n      if (top < bottom) {\r\n        top += sums[j];\r\n        tops.push(j);\r\n      } else {\r\n        bottom += sums[j];\r\n        bottoms.push(j);\r\n      }\r\n    }\r\n  \r\n    return bottoms.reverse().concat(tops);\r\n  }\r\n  \r\n  function reverse(series) {\r\n    return none$2(series).reverse();\r\n  }\r\n  \r\n  function constant$c(x) {\r\n    return function() {\r\n      return x;\r\n    };\r\n  }\r\n  \r\n  function x$4(d) {\r\n    return d[0];\r\n  }\r\n  \r\n  function y$4(d) {\r\n    return d[1];\r\n  }\r\n  \r\n  function RedBlackTree() {\r\n    this._ = null; // root node\r\n  }\r\n  \r\n  function RedBlackNode(node) {\r\n    node.U = // parent node\r\n    node.C = // color - true for red, false for black\r\n    node.L = // left node\r\n    node.R = // right node\r\n    node.P = // previous node\r\n    node.N = null; // next node\r\n  }\r\n  \r\n  RedBlackTree.prototype = {\r\n    constructor: RedBlackTree,\r\n  \r\n    insert: function(after, node) {\r\n      var parent, grandpa, uncle;\r\n  \r\n      if (after) {\r\n        node.P = after;\r\n        node.N = after.N;\r\n        if (after.N) after.N.P = node;\r\n        after.N = node;\r\n        if (after.R) {\r\n          after = after.R;\r\n          while (after.L) after = after.L;\r\n          after.L = node;\r\n        } else {\r\n          after.R = node;\r\n        }\r\n        parent = after;\r\n      } else if (this._) {\r\n        after = RedBlackFirst(this._);\r\n        node.P = null;\r\n        node.N = after;\r\n        after.P = after.L = node;\r\n        parent = after;\r\n      } else {\r\n        node.P = node.N = null;\r\n        this._ = node;\r\n        parent = null;\r\n      }\r\n      node.L = node.R = null;\r\n      node.U = parent;\r\n      node.C = true;\r\n  \r\n      after = node;\r\n      while (parent && parent.C) {\r\n        grandpa = parent.U;\r\n        if (parent === grandpa.L) {\r\n          uncle = grandpa.R;\r\n          if (uncle && uncle.C) {\r\n            parent.C = uncle.C = false;\r\n            grandpa.C = true;\r\n            after = grandpa;\r\n          } else {\r\n            if (after === parent.R) {\r\n              RedBlackRotateLeft(this, parent);\r\n              after = parent;\r\n              parent = after.U;\r\n            }\r\n            parent.C = false;\r\n            grandpa.C = true;\r\n            RedBlackRotateRight(this, grandpa);\r\n          }\r\n        } else {\r\n          uncle = grandpa.L;\r\n          if (uncle && uncle.C) {\r\n            parent.C = uncle.C = false;\r\n            grandpa.C = true;\r\n            after = grandpa;\r\n          } else {\r\n            if (after === parent.L) {\r\n              RedBlackRotateRight(this, parent);\r\n              after = parent;\r\n              parent = after.U;\r\n            }\r\n            parent.C = false;\r\n            grandpa.C = true;\r\n            RedBlackRotateLeft(this, grandpa);\r\n          }\r\n        }\r\n        parent = after.U;\r\n      }\r\n      this._.C = false;\r\n    },\r\n  \r\n    remove: function(node) {\r\n      if (node.N) node.N.P = node.P;\r\n      if (node.P) node.P.N = node.N;\r\n      node.N = node.P = null;\r\n  \r\n      var parent = node.U,\r\n          sibling,\r\n          left = node.L,\r\n          right = node.R,\r\n          next,\r\n          red;\r\n  \r\n      if (!left) next = right;\r\n      else if (!right) next = left;\r\n      else next = RedBlackFirst(right);\r\n  \r\n      if (parent) {\r\n        if (parent.L === node) parent.L = next;\r\n        else parent.R = next;\r\n      } else {\r\n        this._ = next;\r\n      }\r\n  \r\n      if (left && right) {\r\n        red = next.C;\r\n        next.C = node.C;\r\n        next.L = left;\r\n        left.U = next;\r\n        if (next !== right) {\r\n          parent = next.U;\r\n          next.U = node.U;\r\n          node = next.R;\r\n          parent.L = node;\r\n          next.R = right;\r\n          right.U = next;\r\n        } else {\r\n          next.U = parent;\r\n          parent = next;\r\n          node = next.R;\r\n        }\r\n      } else {\r\n        red = node.C;\r\n        node = next;\r\n      }\r\n  \r\n      if (node) node.U = parent;\r\n      if (red) return;\r\n      if (node && node.C) { node.C = false; return; }\r\n  \r\n      do {\r\n        if (node === this._) break;\r\n        if (node === parent.L) {\r\n          sibling = parent.R;\r\n          if (sibling.C) {\r\n            sibling.C = false;\r\n            parent.C = true;\r\n            RedBlackRotateLeft(this, parent);\r\n            sibling = parent.R;\r\n          }\r\n          if ((sibling.L && sibling.L.C)\r\n              || (sibling.R && sibling.R.C)) {\r\n            if (!sibling.R || !sibling.R.C) {\r\n              sibling.L.C = false;\r\n              sibling.C = true;\r\n              RedBlackRotateRight(this, sibling);\r\n              sibling = parent.R;\r\n            }\r\n            sibling.C = parent.C;\r\n            parent.C = sibling.R.C = false;\r\n            RedBlackRotateLeft(this, parent);\r\n            node = this._;\r\n            break;\r\n          }\r\n        } else {\r\n          sibling = parent.L;\r\n          if (sibling.C) {\r\n            sibling.C = false;\r\n            parent.C = true;\r\n            RedBlackRotateRight(this, parent);\r\n            sibling = parent.L;\r\n          }\r\n          if ((sibling.L && sibling.L.C)\r\n            || (sibling.R && sibling.R.C)) {\r\n            if (!sibling.L || !sibling.L.C) {\r\n              sibling.R.C = false;\r\n              sibling.C = true;\r\n              RedBlackRotateLeft(this, sibling);\r\n              sibling = parent.L;\r\n            }\r\n            sibling.C = parent.C;\r\n            parent.C = sibling.L.C = false;\r\n            RedBlackRotateRight(this, parent);\r\n            node = this._;\r\n            break;\r\n          }\r\n        }\r\n        sibling.C = true;\r\n        node = parent;\r\n        parent = parent.U;\r\n      } while (!node.C);\r\n  \r\n      if (node) node.C = false;\r\n    }\r\n  };\r\n  \r\n  function RedBlackRotateLeft(tree, node) {\r\n    var p = node,\r\n        q = node.R,\r\n        parent = p.U;\r\n  \r\n    if (parent) {\r\n      if (parent.L === p) parent.L = q;\r\n      else parent.R = q;\r\n    } else {\r\n      tree._ = q;\r\n    }\r\n  \r\n    q.U = parent;\r\n    p.U = q;\r\n    p.R = q.L;\r\n    if (p.R) p.R.U = p;\r\n    q.L = p;\r\n  }\r\n  \r\n  function RedBlackRotateRight(tree, node) {\r\n    var p = node,\r\n        q = node.L,\r\n        parent = p.U;\r\n  \r\n    if (parent) {\r\n      if (parent.L === p) parent.L = q;\r\n      else parent.R = q;\r\n    } else {\r\n      tree._ = q;\r\n    }\r\n  \r\n    q.U = parent;\r\n    p.U = q;\r\n    p.L = q.R;\r\n    if (p.L) p.L.U = p;\r\n    q.R = p;\r\n  }\r\n  \r\n  function RedBlackFirst(node) {\r\n    while (node.L) node = node.L;\r\n    return node;\r\n  }\r\n  \r\n  function createEdge(left, right, v0, v1) {\r\n    var edge = [null, null],\r\n        index = edges.push(edge) - 1;\r\n    edge.left = left;\r\n    edge.right = right;\r\n    if (v0) setEdgeEnd(edge, left, right, v0);\r\n    if (v1) setEdgeEnd(edge, right, left, v1);\r\n    cells[left.index].halfedges.push(index);\r\n    cells[right.index].halfedges.push(index);\r\n    return edge;\r\n  }\r\n  \r\n  function createBorderEdge(left, v0, v1) {\r\n    var edge = [v0, v1];\r\n    edge.left = left;\r\n    return edge;\r\n  }\r\n  \r\n  function setEdgeEnd(edge, left, right, vertex) {\r\n    if (!edge[0] && !edge[1]) {\r\n      edge[0] = vertex;\r\n      edge.left = left;\r\n      edge.right = right;\r\n    } else if (edge.left === right) {\r\n      edge[1] = vertex;\r\n    } else {\r\n      edge[0] = vertex;\r\n    }\r\n  }\r\n  \r\n  // Liang–Barsky line clipping.\r\n  function clipEdge(edge, x0, y0, x1, y1) {\r\n    var a = edge[0],\r\n        b = edge[1],\r\n        ax = a[0],\r\n        ay = a[1],\r\n        bx = b[0],\r\n        by = b[1],\r\n        t0 = 0,\r\n        t1 = 1,\r\n        dx = bx - ax,\r\n        dy = by - ay,\r\n        r;\r\n  \r\n    r = x0 - ax;\r\n    if (!dx && r > 0) return;\r\n    r /= dx;\r\n    if (dx < 0) {\r\n      if (r < t0) return;\r\n      if (r < t1) t1 = r;\r\n    } else if (dx > 0) {\r\n      if (r > t1) return;\r\n      if (r > t0) t0 = r;\r\n    }\r\n  \r\n    r = x1 - ax;\r\n    if (!dx && r < 0) return;\r\n    r /= dx;\r\n    if (dx < 0) {\r\n      if (r > t1) return;\r\n      if (r > t0) t0 = r;\r\n    } else if (dx > 0) {\r\n      if (r < t0) return;\r\n      if (r < t1) t1 = r;\r\n    }\r\n  \r\n    r = y0 - ay;\r\n    if (!dy && r > 0) return;\r\n    r /= dy;\r\n    if (dy < 0) {\r\n      if (r < t0) return;\r\n      if (r < t1) t1 = r;\r\n    } else if (dy > 0) {\r\n      if (r > t1) return;\r\n      if (r > t0) t0 = r;\r\n    }\r\n  \r\n    r = y1 - ay;\r\n    if (!dy && r < 0) return;\r\n    r /= dy;\r\n    if (dy < 0) {\r\n      if (r > t1) return;\r\n      if (r > t0) t0 = r;\r\n    } else if (dy > 0) {\r\n      if (r < t0) return;\r\n      if (r < t1) t1 = r;\r\n    }\r\n  \r\n    if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?\r\n  \r\n    if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];\r\n    if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];\r\n    return true;\r\n  }\r\n  \r\n  function connectEdge(edge, x0, y0, x1, y1) {\r\n    var v1 = edge[1];\r\n    if (v1) return true;\r\n  \r\n    var v0 = edge[0],\r\n        left = edge.left,\r\n        right = edge.right,\r\n        lx = left[0],\r\n        ly = left[1],\r\n        rx = right[0],\r\n        ry = right[1],\r\n        fx = (lx + rx) / 2,\r\n        fy = (ly + ry) / 2,\r\n        fm,\r\n        fb;\r\n  \r\n    if (ry === ly) {\r\n      if (fx < x0 || fx >= x1) return;\r\n      if (lx > rx) {\r\n        if (!v0) v0 = [fx, y0];\r\n        else if (v0[1] >= y1) return;\r\n        v1 = [fx, y1];\r\n      } else {\r\n        if (!v0) v0 = [fx, y1];\r\n        else if (v0[1] < y0) return;\r\n        v1 = [fx, y0];\r\n      }\r\n    } else {\r\n      fm = (lx - rx) / (ry - ly);\r\n      fb = fy - fm * fx;\r\n      if (fm < -1 || fm > 1) {\r\n        if (lx > rx) {\r\n          if (!v0) v0 = [(y0 - fb) / fm, y0];\r\n          else if (v0[1] >= y1) return;\r\n          v1 = [(y1 - fb) / fm, y1];\r\n        } else {\r\n          if (!v0) v0 = [(y1 - fb) / fm, y1];\r\n          else if (v0[1] < y0) return;\r\n          v1 = [(y0 - fb) / fm, y0];\r\n        }\r\n      } else {\r\n        if (ly < ry) {\r\n          if (!v0) v0 = [x0, fm * x0 + fb];\r\n          else if (v0[0] >= x1) return;\r\n          v1 = [x1, fm * x1 + fb];\r\n        } else {\r\n          if (!v0) v0 = [x1, fm * x1 + fb];\r\n          else if (v0[0] < x0) return;\r\n          v1 = [x0, fm * x0 + fb];\r\n        }\r\n      }\r\n    }\r\n  \r\n    edge[0] = v0;\r\n    edge[1] = v1;\r\n    return true;\r\n  }\r\n  \r\n  function clipEdges(x0, y0, x1, y1) {\r\n    var i = edges.length,\r\n        edge;\r\n  \r\n    while (i--) {\r\n      if (!connectEdge(edge = edges[i], x0, y0, x1, y1)\r\n          || !clipEdge(edge, x0, y0, x1, y1)\r\n          || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon$4\r\n              || Math.abs(edge[0][1] - edge[1][1]) > epsilon$4)) {\r\n        delete edges[i];\r\n      }\r\n    }\r\n  }\r\n  \r\n  function createCell(site) {\r\n    return cells[site.index] = {\r\n      site: site,\r\n      halfedges: []\r\n    };\r\n  }\r\n  \r\n  function cellHalfedgeAngle(cell, edge) {\r\n    var site = cell.site,\r\n        va = edge.left,\r\n        vb = edge.right;\r\n    if (site === vb) vb = va, va = site;\r\n    if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);\r\n    if (site === va) va = edge[1], vb = edge[0];\r\n    else va = edge[0], vb = edge[1];\r\n    return Math.atan2(va[0] - vb[0], vb[1] - va[1]);\r\n  }\r\n  \r\n  function cellHalfedgeStart(cell, edge) {\r\n    return edge[+(edge.left !== cell.site)];\r\n  }\r\n  \r\n  function cellHalfedgeEnd(cell, edge) {\r\n    return edge[+(edge.left === cell.site)];\r\n  }\r\n  \r\n  function sortCellHalfedges() {\r\n    for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {\r\n      if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {\r\n        var index = new Array(m),\r\n            array = new Array(m);\r\n        for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);\r\n        index.sort(function(i, j) { return array[j] - array[i]; });\r\n        for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];\r\n        for (j = 0; j < m; ++j) halfedges[j] = array[j];\r\n      }\r\n    }\r\n  }\r\n  \r\n  function clipCells(x0, y0, x1, y1) {\r\n    var nCells = cells.length,\r\n        iCell,\r\n        cell,\r\n        site,\r\n        iHalfedge,\r\n        halfedges,\r\n        nHalfedges,\r\n        start,\r\n        startX,\r\n        startY,\r\n        end,\r\n        endX,\r\n        endY,\r\n        cover = true;\r\n  \r\n    for (iCell = 0; iCell < nCells; ++iCell) {\r\n      if (cell = cells[iCell]) {\r\n        site = cell.site;\r\n        halfedges = cell.halfedges;\r\n        iHalfedge = halfedges.length;\r\n  \r\n        // Remove any dangling clipped edges.\r\n        while (iHalfedge--) {\r\n          if (!edges[halfedges[iHalfedge]]) {\r\n            halfedges.splice(iHalfedge, 1);\r\n          }\r\n        }\r\n  \r\n        // Insert any border edges as necessary.\r\n        iHalfedge = 0, nHalfedges = halfedges.length;\r\n        while (iHalfedge < nHalfedges) {\r\n          end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];\r\n          start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];\r\n          if (Math.abs(endX - startX) > epsilon$4 || Math.abs(endY - startY) > epsilon$4) {\r\n            halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,\r\n                Math.abs(endX - x0) < epsilon$4 && y1 - endY > epsilon$4 ? [x0, Math.abs(startX - x0) < epsilon$4 ? startY : y1]\r\n                : Math.abs(endY - y1) < epsilon$4 && x1 - endX > epsilon$4 ? [Math.abs(startY - y1) < epsilon$4 ? startX : x1, y1]\r\n                : Math.abs(endX - x1) < epsilon$4 && endY - y0 > epsilon$4 ? [x1, Math.abs(startX - x1) < epsilon$4 ? startY : y0]\r\n                : Math.abs(endY - y0) < epsilon$4 && endX - x0 > epsilon$4 ? [Math.abs(startY - y0) < epsilon$4 ? startX : x0, y0]\r\n                : null)) - 1);\r\n            ++nHalfedges;\r\n          }\r\n        }\r\n  \r\n        if (nHalfedges) cover = false;\r\n      }\r\n    }\r\n  \r\n    // If there weren’t any edges, have the closest site cover the extent.\r\n    // It doesn’t matter which corner of the extent we measure!\r\n    if (cover) {\r\n      var dx, dy, d2, dc = Infinity;\r\n  \r\n      for (iCell = 0, cover = null; iCell < nCells; ++iCell) {\r\n        if (cell = cells[iCell]) {\r\n          site = cell.site;\r\n          dx = site[0] - x0;\r\n          dy = site[1] - y0;\r\n          d2 = dx * dx + dy * dy;\r\n          if (d2 < dc) dc = d2, cover = cell;\r\n        }\r\n      }\r\n  \r\n      if (cover) {\r\n        var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];\r\n        cover.halfedges.push(\r\n          edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,\r\n          edges.push(createBorderEdge(site, v01, v11)) - 1,\r\n          edges.push(createBorderEdge(site, v11, v10)) - 1,\r\n          edges.push(createBorderEdge(site, v10, v00)) - 1\r\n        );\r\n      }\r\n    }\r\n  \r\n    // Lastly delete any cells with no edges; these were entirely clipped.\r\n    for (iCell = 0; iCell < nCells; ++iCell) {\r\n      if (cell = cells[iCell]) {\r\n        if (!cell.halfedges.length) {\r\n          delete cells[iCell];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  var circlePool = [];\r\n  \r\n  var firstCircle;\r\n  \r\n  function Circle() {\r\n    RedBlackNode(this);\r\n    this.x =\r\n    this.y =\r\n    this.arc =\r\n    this.site =\r\n    this.cy = null;\r\n  }\r\n  \r\n  function attachCircle(arc) {\r\n    var lArc = arc.P,\r\n        rArc = arc.N;\r\n  \r\n    if (!lArc || !rArc) return;\r\n  \r\n    var lSite = lArc.site,\r\n        cSite = arc.site,\r\n        rSite = rArc.site;\r\n  \r\n    if (lSite === rSite) return;\r\n  \r\n    var bx = cSite[0],\r\n        by = cSite[1],\r\n        ax = lSite[0] - bx,\r\n        ay = lSite[1] - by,\r\n        cx = rSite[0] - bx,\r\n        cy = rSite[1] - by;\r\n  \r\n    var d = 2 * (ax * cy - ay * cx);\r\n    if (d >= -epsilon2$2) return;\r\n  \r\n    var ha = ax * ax + ay * ay,\r\n        hc = cx * cx + cy * cy,\r\n        x = (cy * ha - ay * hc) / d,\r\n        y = (ax * hc - cx * ha) / d;\r\n  \r\n    var circle = circlePool.pop() || new Circle;\r\n    circle.arc = arc;\r\n    circle.site = cSite;\r\n    circle.x = x + bx;\r\n    circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom\r\n  \r\n    arc.circle = circle;\r\n  \r\n    var before = null,\r\n        node = circles._;\r\n  \r\n    while (node) {\r\n      if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {\r\n        if (node.L) node = node.L;\r\n        else { before = node.P; break; }\r\n      } else {\r\n        if (node.R) node = node.R;\r\n        else { before = node; break; }\r\n      }\r\n    }\r\n  \r\n    circles.insert(before, circle);\r\n    if (!before) firstCircle = circle;\r\n  }\r\n  \r\n  function detachCircle(arc) {\r\n    var circle = arc.circle;\r\n    if (circle) {\r\n      if (!circle.P) firstCircle = circle.N;\r\n      circles.remove(circle);\r\n      circlePool.push(circle);\r\n      RedBlackNode(circle);\r\n      arc.circle = null;\r\n    }\r\n  }\r\n  \r\n  var beachPool = [];\r\n  \r\n  function Beach() {\r\n    RedBlackNode(this);\r\n    this.edge =\r\n    this.site =\r\n    this.circle = null;\r\n  }\r\n  \r\n  function createBeach(site) {\r\n    var beach = beachPool.pop() || new Beach;\r\n    beach.site = site;\r\n    return beach;\r\n  }\r\n  \r\n  function detachBeach(beach) {\r\n    detachCircle(beach);\r\n    beaches.remove(beach);\r\n    beachPool.push(beach);\r\n    RedBlackNode(beach);\r\n  }\r\n  \r\n  function removeBeach(beach) {\r\n    var circle = beach.circle,\r\n        x = circle.x,\r\n        y = circle.cy,\r\n        vertex = [x, y],\r\n        previous = beach.P,\r\n        next = beach.N,\r\n        disappearing = [beach];\r\n  \r\n    detachBeach(beach);\r\n  \r\n    var lArc = previous;\r\n    while (lArc.circle\r\n        && Math.abs(x - lArc.circle.x) < epsilon$4\r\n        && Math.abs(y - lArc.circle.cy) < epsilon$4) {\r\n      previous = lArc.P;\r\n      disappearing.unshift(lArc);\r\n      detachBeach(lArc);\r\n      lArc = previous;\r\n    }\r\n  \r\n    disappearing.unshift(lArc);\r\n    detachCircle(lArc);\r\n  \r\n    var rArc = next;\r\n    while (rArc.circle\r\n        && Math.abs(x - rArc.circle.x) < epsilon$4\r\n        && Math.abs(y - rArc.circle.cy) < epsilon$4) {\r\n      next = rArc.N;\r\n      disappearing.push(rArc);\r\n      detachBeach(rArc);\r\n      rArc = next;\r\n    }\r\n  \r\n    disappearing.push(rArc);\r\n    detachCircle(rArc);\r\n  \r\n    var nArcs = disappearing.length,\r\n        iArc;\r\n    for (iArc = 1; iArc < nArcs; ++iArc) {\r\n      rArc = disappearing[iArc];\r\n      lArc = disappearing[iArc - 1];\r\n      setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\r\n    }\r\n  \r\n    lArc = disappearing[0];\r\n    rArc = disappearing[nArcs - 1];\r\n    rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);\r\n  \r\n    attachCircle(lArc);\r\n    attachCircle(rArc);\r\n  }\r\n  \r\n  function addBeach(site) {\r\n    var x = site[0],\r\n        directrix = site[1],\r\n        lArc,\r\n        rArc,\r\n        dxl,\r\n        dxr,\r\n        node = beaches._;\r\n  \r\n    while (node) {\r\n      dxl = leftBreakPoint(node, directrix) - x;\r\n      if (dxl > epsilon$4) node = node.L; else {\r\n        dxr = x - rightBreakPoint(node, directrix);\r\n        if (dxr > epsilon$4) {\r\n          if (!node.R) {\r\n            lArc = node;\r\n            break;\r\n          }\r\n          node = node.R;\r\n        } else {\r\n          if (dxl > -epsilon$4) {\r\n            lArc = node.P;\r\n            rArc = node;\r\n          } else if (dxr > -epsilon$4) {\r\n            lArc = node;\r\n            rArc = node.N;\r\n          } else {\r\n            lArc = rArc = node;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  \r\n    createCell(site);\r\n    var newArc = createBeach(site);\r\n    beaches.insert(lArc, newArc);\r\n  \r\n    if (!lArc && !rArc) return;\r\n  \r\n    if (lArc === rArc) {\r\n      detachCircle(lArc);\r\n      rArc = createBeach(lArc.site);\r\n      beaches.insert(newArc, rArc);\r\n      newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);\r\n      attachCircle(lArc);\r\n      attachCircle(rArc);\r\n      return;\r\n    }\r\n  \r\n    if (!rArc) { // && lArc\r\n      newArc.edge = createEdge(lArc.site, newArc.site);\r\n      return;\r\n    }\r\n  \r\n    // else lArc !== rArc\r\n    detachCircle(lArc);\r\n    detachCircle(rArc);\r\n  \r\n    var lSite = lArc.site,\r\n        ax = lSite[0],\r\n        ay = lSite[1],\r\n        bx = site[0] - ax,\r\n        by = site[1] - ay,\r\n        rSite = rArc.site,\r\n        cx = rSite[0] - ax,\r\n        cy = rSite[1] - ay,\r\n        d = 2 * (bx * cy - by * cx),\r\n        hb = bx * bx + by * by,\r\n        hc = cx * cx + cy * cy,\r\n        vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];\r\n  \r\n    setEdgeEnd(rArc.edge, lSite, rSite, vertex);\r\n    newArc.edge = createEdge(lSite, site, null, vertex);\r\n    rArc.edge = createEdge(site, rSite, null, vertex);\r\n    attachCircle(lArc);\r\n    attachCircle(rArc);\r\n  }\r\n  \r\n  function leftBreakPoint(arc, directrix) {\r\n    var site = arc.site,\r\n        rfocx = site[0],\r\n        rfocy = site[1],\r\n        pby2 = rfocy - directrix;\r\n  \r\n    if (!pby2) return rfocx;\r\n  \r\n    var lArc = arc.P;\r\n    if (!lArc) return -Infinity;\r\n  \r\n    site = lArc.site;\r\n    var lfocx = site[0],\r\n        lfocy = site[1],\r\n        plby2 = lfocy - directrix;\r\n  \r\n    if (!plby2) return lfocx;\r\n  \r\n    var hl = lfocx - rfocx,\r\n        aby2 = 1 / pby2 - 1 / plby2,\r\n        b = hl / plby2;\r\n  \r\n    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\r\n  \r\n    return (rfocx + lfocx) / 2;\r\n  }\r\n  \r\n  function rightBreakPoint(arc, directrix) {\r\n    var rArc = arc.N;\r\n    if (rArc) return leftBreakPoint(rArc, directrix);\r\n    var site = arc.site;\r\n    return site[1] === directrix ? site[0] : Infinity;\r\n  }\r\n  \r\n  var epsilon$4 = 1e-6;\r\n  var epsilon2$2 = 1e-12;\r\n  var beaches;\r\n  var cells;\r\n  var circles;\r\n  var edges;\r\n  \r\n  function triangleArea(a, b, c) {\r\n    return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);\r\n  }\r\n  \r\n  function lexicographic(a, b) {\r\n    return b[1] - a[1]\r\n        || b[0] - a[0];\r\n  }\r\n  \r\n  function Diagram(sites, extent) {\r\n    var site = sites.sort(lexicographic).pop(),\r\n        x,\r\n        y,\r\n        circle;\r\n  \r\n    edges = [];\r\n    cells = new Array(sites.length);\r\n    beaches = new RedBlackTree;\r\n    circles = new RedBlackTree;\r\n  \r\n    while (true) {\r\n      circle = firstCircle;\r\n      if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {\r\n        if (site[0] !== x || site[1] !== y) {\r\n          addBeach(site);\r\n          x = site[0], y = site[1];\r\n        }\r\n        site = sites.pop();\r\n      } else if (circle) {\r\n        removeBeach(circle.arc);\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  \r\n    sortCellHalfedges();\r\n  \r\n    if (extent) {\r\n      var x0 = +extent[0][0],\r\n          y0 = +extent[0][1],\r\n          x1 = +extent[1][0],\r\n          y1 = +extent[1][1];\r\n      clipEdges(x0, y0, x1, y1);\r\n      clipCells(x0, y0, x1, y1);\r\n    }\r\n  \r\n    this.edges = edges;\r\n    this.cells = cells;\r\n  \r\n    beaches =\r\n    circles =\r\n    edges =\r\n    cells = null;\r\n  }\r\n  \r\n  Diagram.prototype = {\r\n    constructor: Diagram,\r\n  \r\n    polygons: function() {\r\n      var edges = this.edges;\r\n  \r\n      return this.cells.map(function(cell) {\r\n        var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });\r\n        polygon.data = cell.site.data;\r\n        return polygon;\r\n      });\r\n    },\r\n  \r\n    triangles: function() {\r\n      var triangles = [],\r\n          edges = this.edges;\r\n  \r\n      this.cells.forEach(function(cell, i) {\r\n        if (!(m = (halfedges = cell.halfedges).length)) return;\r\n        var site = cell.site,\r\n            halfedges,\r\n            j = -1,\r\n            m,\r\n            s0,\r\n            e1 = edges[halfedges[m - 1]],\r\n            s1 = e1.left === site ? e1.right : e1.left;\r\n  \r\n        while (++j < m) {\r\n          s0 = s1;\r\n          e1 = edges[halfedges[j]];\r\n          s1 = e1.left === site ? e1.right : e1.left;\r\n          if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {\r\n            triangles.push([site.data, s0.data, s1.data]);\r\n          }\r\n        }\r\n      });\r\n  \r\n      return triangles;\r\n    },\r\n  \r\n    links: function() {\r\n      return this.edges.filter(function(edge) {\r\n        return edge.right;\r\n      }).map(function(edge) {\r\n        return {\r\n          source: edge.left.data,\r\n          target: edge.right.data\r\n        };\r\n      });\r\n    },\r\n  \r\n    find: function(x, y, radius) {\r\n      var that = this, i0, i1 = that._found || 0, n = that.cells.length, cell;\r\n  \r\n      // Use the previously-found cell, or start with an arbitrary one.\r\n      while (!(cell = that.cells[i1])) if (++i1 >= n) return null;\r\n      var dx = x - cell.site[0], dy = y - cell.site[1], d2 = dx * dx + dy * dy;\r\n  \r\n      // Traverse the half-edges to find a closer cell, if any.\r\n      do {\r\n        cell = that.cells[i0 = i1], i1 = null;\r\n        cell.halfedges.forEach(function(e) {\r\n          var edge = that.edges[e], v = edge.left;\r\n          if ((v === cell.site || !v) && !(v = edge.right)) return;\r\n          var vx = x - v[0], vy = y - v[1], v2 = vx * vx + vy * vy;\r\n          if (v2 < d2) d2 = v2, i1 = v.index;\r\n        });\r\n      } while (i1 !== null);\r\n  \r\n      that._found = i0;\r\n  \r\n      return radius == null || d2 <= radius * radius ? cell.site : null;\r\n    }\r\n  };\r\n  \r\n  function voronoi() {\r\n    var x = x$4,\r\n        y = y$4,\r\n        extent = null;\r\n  \r\n    function voronoi(data) {\r\n      return new Diagram(data.map(function(d, i) {\r\n        var s = [Math.round(x(d, i, data) / epsilon$4) * epsilon$4, Math.round(y(d, i, data) / epsilon$4) * epsilon$4];\r\n        s.index = i;\r\n        s.data = d;\r\n        return s;\r\n      }), extent);\r\n    }\r\n  \r\n    voronoi.polygons = function(data) {\r\n      return voronoi(data).polygons();\r\n    };\r\n  \r\n    voronoi.links = function(data) {\r\n      return voronoi(data).links();\r\n    };\r\n  \r\n    voronoi.triangles = function(data) {\r\n      return voronoi(data).triangles();\r\n    };\r\n  \r\n    voronoi.x = function(_) {\r\n      return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$c(+_), voronoi) : x;\r\n    };\r\n  \r\n    voronoi.y = function(_) {\r\n      return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$c(+_), voronoi) : y;\r\n    };\r\n  \r\n    voronoi.extent = function(_) {\r\n      return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];\r\n    };\r\n  \r\n    voronoi.size = function(_) {\r\n      return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];\r\n    };\r\n  \r\n    return voronoi;\r\n  }\r\n  \r\n  function constant$d(x) {\r\n    return function() {\r\n      return x;\r\n    };\r\n  }\r\n  \r\n  function ZoomEvent(target, type, transform) {\r\n    this.target = target;\r\n    this.type = type;\r\n    this.transform = transform;\r\n  }\r\n  \r\n  function Transform(k, x, y) {\r\n    this.k = k;\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n  \r\n  Transform.prototype = {\r\n    constructor: Transform,\r\n    scale: function(k) {\r\n      return k === 1 ? this : new Transform(this.k * k, this.x, this.y);\r\n    },\r\n    translate: function(x, y) {\r\n      return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);\r\n    },\r\n    apply: function(point) {\r\n      return [point[0] * this.k + this.x, point[1] * this.k + this.y];\r\n    },\r\n    applyX: function(x) {\r\n      return x * this.k + this.x;\r\n    },\r\n    applyY: function(y) {\r\n      return y * this.k + this.y;\r\n    },\r\n    invert: function(location) {\r\n      return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];\r\n    },\r\n    invertX: function(x) {\r\n      return (x - this.x) / this.k;\r\n    },\r\n    invertY: function(y) {\r\n      return (y - this.y) / this.k;\r\n    },\r\n    rescaleX: function(x) {\r\n      return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));\r\n    },\r\n    rescaleY: function(y) {\r\n      return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));\r\n    },\r\n    toString: function() {\r\n      return \"translate(\" + this.x + \",\" + this.y + \") scale(\" + this.k + \")\";\r\n    }\r\n  };\r\n  \r\n  var identity$9 = new Transform(1, 0, 0);\r\n  \r\n  transform$1.prototype = Transform.prototype;\r\n  \r\n  function transform$1(node) {\r\n    while (!node.__zoom) if (!(node = node.parentNode)) return identity$9;\r\n    return node.__zoom;\r\n  }\r\n  \r\n  function nopropagation$2() {\r\n    exports.event.stopImmediatePropagation();\r\n  }\r\n  \r\n  function noevent$2() {\r\n    exports.event.preventDefault();\r\n    exports.event.stopImmediatePropagation();\r\n  }\r\n  \r\n  // Ignore right-click, since that should open the context menu.\r\n  function defaultFilter$2() {\r\n    return !exports.event.ctrlKey && !exports.event.button;\r\n  }\r\n  \r\n  function defaultExtent$1() {\r\n    var e = this;\r\n    if (e instanceof SVGElement) {\r\n      e = e.ownerSVGElement || e;\r\n      if (e.hasAttribute(\"viewBox\")) {\r\n        e = e.viewBox.baseVal;\r\n        return [[e.x, e.y], [e.x + e.width, e.y + e.height]];\r\n      }\r\n      return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];\r\n    }\r\n    return [[0, 0], [e.clientWidth, e.clientHeight]];\r\n  }\r\n  \r\n  function defaultTransform() {\r\n    return this.__zoom || identity$9;\r\n  }\r\n  \r\n  function defaultWheelDelta() {\r\n    return -exports.event.deltaY * (exports.event.deltaMode === 1 ? 0.05 : exports.event.deltaMode ? 1 : 0.002);\r\n  }\r\n  \r\n  function defaultTouchable$2() {\r\n    return navigator.maxTouchPoints || (\"ontouchstart\" in this);\r\n  }\r\n  \r\n  function defaultConstrain(transform, extent, translateExtent) {\r\n    var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],\r\n        dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],\r\n        dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],\r\n        dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];\r\n    return transform.translate(\r\n      dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),\r\n      dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)\r\n    );\r\n  }\r\n  \r\n  function zoom() {\r\n    var filter = defaultFilter$2,\r\n        extent = defaultExtent$1,\r\n        constrain = defaultConstrain,\r\n        wheelDelta = defaultWheelDelta,\r\n        touchable = defaultTouchable$2,\r\n        scaleExtent = [0, Infinity],\r\n        translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],\r\n        duration = 250,\r\n        interpolate = interpolateZoom,\r\n        listeners = dispatch(\"start\", \"zoom\", \"end\"),\r\n        touchstarting,\r\n        touchending,\r\n        touchDelay = 500,\r\n        wheelDelay = 150,\r\n        clickDistance2 = 0;\r\n  \r\n    function zoom(selection) {\r\n      selection\r\n          .property(\"__zoom\", defaultTransform)\r\n          .on(\"wheel.zoom\", wheeled)\r\n          .on(\"mousedown.zoom\", mousedowned)\r\n          .on(\"dblclick.zoom\", dblclicked)\r\n        .filter(touchable)\r\n          .on(\"touchstart.zoom\", touchstarted)\r\n          .on(\"touchmove.zoom\", touchmoved)\r\n          .on(\"touchend.zoom touchcancel.zoom\", touchended)\r\n          .style(\"touch-action\", \"none\")\r\n          .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\r\n    }\r\n  \r\n    zoom.transform = function(collection, transform, point) {\r\n      var selection = collection.selection ? collection.selection() : collection;\r\n      selection.property(\"__zoom\", defaultTransform);\r\n      if (collection !== selection) {\r\n        schedule(collection, transform, point);\r\n      } else {\r\n        selection.interrupt().each(function() {\r\n          gesture(this, arguments)\r\n              .start()\r\n              .zoom(null, typeof transform === \"function\" ? transform.apply(this, arguments) : transform)\r\n              .end();\r\n        });\r\n      }\r\n    };\r\n  \r\n    zoom.scaleBy = function(selection, k, p) {\r\n      zoom.scaleTo(selection, function() {\r\n        var k0 = this.__zoom.k,\r\n            k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\r\n        return k0 * k1;\r\n      }, p);\r\n    };\r\n  \r\n    zoom.scaleTo = function(selection, k, p) {\r\n      zoom.transform(selection, function() {\r\n        var e = extent.apply(this, arguments),\r\n            t0 = this.__zoom,\r\n            p0 = p == null ? centroid(e) : typeof p === \"function\" ? p.apply(this, arguments) : p,\r\n            p1 = t0.invert(p0),\r\n            k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\r\n        return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);\r\n      }, p);\r\n    };\r\n  \r\n    zoom.translateBy = function(selection, x, y) {\r\n      zoom.transform(selection, function() {\r\n        return constrain(this.__zoom.translate(\r\n          typeof x === \"function\" ? x.apply(this, arguments) : x,\r\n          typeof y === \"function\" ? y.apply(this, arguments) : y\r\n        ), extent.apply(this, arguments), translateExtent);\r\n      });\r\n    };\r\n  \r\n    zoom.translateTo = function(selection, x, y, p) {\r\n      zoom.transform(selection, function() {\r\n        var e = extent.apply(this, arguments),\r\n            t = this.__zoom,\r\n            p0 = p == null ? centroid(e) : typeof p === \"function\" ? p.apply(this, arguments) : p;\r\n        return constrain(identity$9.translate(p0[0], p0[1]).scale(t.k).translate(\r\n          typeof x === \"function\" ? -x.apply(this, arguments) : -x,\r\n          typeof y === \"function\" ? -y.apply(this, arguments) : -y\r\n        ), e, translateExtent);\r\n      }, p);\r\n    };\r\n  \r\n    function scale(transform, k) {\r\n      k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));\r\n      return k === transform.k ? transform : new Transform(k, transform.x, transform.y);\r\n    }\r\n  \r\n    function translate(transform, p0, p1) {\r\n      var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;\r\n      return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);\r\n    }\r\n  \r\n    function centroid(extent) {\r\n      return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];\r\n    }\r\n  \r\n    function schedule(transition, transform, point) {\r\n      transition\r\n          .on(\"start.zoom\", function() { gesture(this, arguments).start(); })\r\n          .on(\"interrupt.zoom end.zoom\", function() { gesture(this, arguments).end(); })\r\n          .tween(\"zoom\", function() {\r\n            var that = this,\r\n                args = arguments,\r\n                g = gesture(that, args),\r\n                e = extent.apply(that, args),\r\n                p = point == null ? centroid(e) : typeof point === \"function\" ? point.apply(that, args) : point,\r\n                w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),\r\n                a = that.__zoom,\r\n                b = typeof transform === \"function\" ? transform.apply(that, args) : transform,\r\n                i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));\r\n            return function(t) {\r\n              if (t === 1) t = b; // Avoid rounding error on end.\r\n              else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }\r\n              g.zoom(null, t);\r\n            };\r\n          });\r\n    }\r\n  \r\n    function gesture(that, args, clean) {\r\n      return (!clean && that.__zooming) || new Gesture(that, args);\r\n    }\r\n  \r\n    function Gesture(that, args) {\r\n      this.that = that;\r\n      this.args = args;\r\n      this.active = 0;\r\n      this.extent = extent.apply(that, args);\r\n      this.taps = 0;\r\n    }\r\n  \r\n    Gesture.prototype = {\r\n      start: function() {\r\n        if (++this.active === 1) {\r\n          this.that.__zooming = this;\r\n          this.emit(\"start\");\r\n        }\r\n        return this;\r\n      },\r\n      zoom: function(key, transform) {\r\n        if (this.mouse && key !== \"mouse\") this.mouse[1] = transform.invert(this.mouse[0]);\r\n        if (this.touch0 && key !== \"touch\") this.touch0[1] = transform.invert(this.touch0[0]);\r\n        if (this.touch1 && key !== \"touch\") this.touch1[1] = transform.invert(this.touch1[0]);\r\n        this.that.__zoom = transform;\r\n        this.emit(\"zoom\");\r\n        return this;\r\n      },\r\n      end: function() {\r\n        if (--this.active === 0) {\r\n          delete this.that.__zooming;\r\n          this.emit(\"end\");\r\n        }\r\n        return this;\r\n      },\r\n      emit: function(type) {\r\n        customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);\r\n      }\r\n    };\r\n  \r\n    function wheeled() {\r\n      if (!filter.apply(this, arguments)) return;\r\n      var g = gesture(this, arguments),\r\n          t = this.__zoom,\r\n          k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),\r\n          p = mouse(this);\r\n  \r\n      // If the mouse is in the same location as before, reuse it.\r\n      // If there were recent wheel events, reset the wheel idle timeout.\r\n      if (g.wheel) {\r\n        if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {\r\n          g.mouse[1] = t.invert(g.mouse[0] = p);\r\n        }\r\n        clearTimeout(g.wheel);\r\n      }\r\n  \r\n      // If this wheel event won’t trigger a transform change, ignore it.\r\n      else if (t.k === k) return;\r\n  \r\n      // Otherwise, capture the mouse point and location at the start.\r\n      else {\r\n        g.mouse = [p, t.invert(p)];\r\n        interrupt(this);\r\n        g.start();\r\n      }\r\n  \r\n      noevent$2();\r\n      g.wheel = setTimeout(wheelidled, wheelDelay);\r\n      g.zoom(\"mouse\", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));\r\n  \r\n      function wheelidled() {\r\n        g.wheel = null;\r\n        g.end();\r\n      }\r\n    }\r\n  \r\n    function mousedowned() {\r\n      if (touchending || !filter.apply(this, arguments)) return;\r\n      var g = gesture(this, arguments, true),\r\n          v = select(exports.event.view).on(\"mousemove.zoom\", mousemoved, true).on(\"mouseup.zoom\", mouseupped, true),\r\n          p = mouse(this),\r\n          x0 = exports.event.clientX,\r\n          y0 = exports.event.clientY;\r\n  \r\n      dragDisable(exports.event.view);\r\n      nopropagation$2();\r\n      g.mouse = [p, this.__zoom.invert(p)];\r\n      interrupt(this);\r\n      g.start();\r\n  \r\n      function mousemoved() {\r\n        noevent$2();\r\n        if (!g.moved) {\r\n          var dx = exports.event.clientX - x0, dy = exports.event.clientY - y0;\r\n          g.moved = dx * dx + dy * dy > clickDistance2;\r\n        }\r\n        g.zoom(\"mouse\", constrain(translate(g.that.__zoom, g.mouse[0] = mouse(g.that), g.mouse[1]), g.extent, translateExtent));\r\n      }\r\n  \r\n      function mouseupped() {\r\n        v.on(\"mousemove.zoom mouseup.zoom\", null);\r\n        yesdrag(exports.event.view, g.moved);\r\n        noevent$2();\r\n        g.end();\r\n      }\r\n    }\r\n  \r\n    function dblclicked() {\r\n      if (!filter.apply(this, arguments)) return;\r\n      var t0 = this.__zoom,\r\n          p0 = mouse(this),\r\n          p1 = t0.invert(p0),\r\n          k1 = t0.k * (exports.event.shiftKey ? 0.5 : 2),\r\n          t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments), translateExtent);\r\n  \r\n      noevent$2();\r\n      if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0);\r\n      else select(this).call(zoom.transform, t1);\r\n    }\r\n  \r\n    function touchstarted() {\r\n      if (!filter.apply(this, arguments)) return;\r\n      var touches = exports.event.touches,\r\n          n = touches.length,\r\n          g = gesture(this, arguments, exports.event.changedTouches.length === n),\r\n          started, i, t, p;\r\n  \r\n      nopropagation$2();\r\n      for (i = 0; i < n; ++i) {\r\n        t = touches[i], p = touch(this, touches, t.identifier);\r\n        p = [p, this.__zoom.invert(p), t.identifier];\r\n        if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;\r\n        else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, g.taps = 0;\r\n      }\r\n  \r\n      if (touchstarting) touchstarting = clearTimeout(touchstarting);\r\n  \r\n      if (started) {\r\n        if (g.taps < 2) touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);\r\n        interrupt(this);\r\n        g.start();\r\n      }\r\n    }\r\n  \r\n    function touchmoved() {\r\n      if (!this.__zooming) return;\r\n      var g = gesture(this, arguments),\r\n          touches = exports.event.changedTouches,\r\n          n = touches.length, i, t, p, l;\r\n  \r\n      noevent$2();\r\n      if (touchstarting) touchstarting = clearTimeout(touchstarting);\r\n      g.taps = 0;\r\n      for (i = 0; i < n; ++i) {\r\n        t = touches[i], p = touch(this, touches, t.identifier);\r\n        if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;\r\n        else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;\r\n      }\r\n      t = g.that.__zoom;\r\n      if (g.touch1) {\r\n        var p0 = g.touch0[0], l0 = g.touch0[1],\r\n            p1 = g.touch1[0], l1 = g.touch1[1],\r\n            dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,\r\n            dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;\r\n        t = scale(t, Math.sqrt(dp / dl));\r\n        p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];\r\n        l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];\r\n      }\r\n      else if (g.touch0) p = g.touch0[0], l = g.touch0[1];\r\n      else return;\r\n      g.zoom(\"touch\", constrain(translate(t, p, l), g.extent, translateExtent));\r\n    }\r\n  \r\n    function touchended() {\r\n      if (!this.__zooming) return;\r\n      var g = gesture(this, arguments),\r\n          touches = exports.event.changedTouches,\r\n          n = touches.length, i, t;\r\n  \r\n      nopropagation$2();\r\n      if (touchending) clearTimeout(touchending);\r\n      touchending = setTimeout(function() { touchending = null; }, touchDelay);\r\n      for (i = 0; i < n; ++i) {\r\n        t = touches[i];\r\n        if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;\r\n        else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;\r\n      }\r\n      if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;\r\n      if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);\r\n      else {\r\n        g.end();\r\n        // If this was a dbltap, reroute to the (optional) dblclick.zoom handler.\r\n        if (g.taps === 2) {\r\n          var p = select(this).on(\"dblclick.zoom\");\r\n          if (p) p.apply(this, arguments);\r\n        }\r\n      }\r\n    }\r\n  \r\n    zoom.wheelDelta = function(_) {\r\n      return arguments.length ? (wheelDelta = typeof _ === \"function\" ? _ : constant$d(+_), zoom) : wheelDelta;\r\n    };\r\n  \r\n    zoom.filter = function(_) {\r\n      return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant$d(!!_), zoom) : filter;\r\n    };\r\n  \r\n    zoom.touchable = function(_) {\r\n      return arguments.length ? (touchable = typeof _ === \"function\" ? _ : constant$d(!!_), zoom) : touchable;\r\n    };\r\n  \r\n    zoom.extent = function(_) {\r\n      return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant$d([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;\r\n    };\r\n  \r\n    zoom.scaleExtent = function(_) {\r\n      return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];\r\n    };\r\n  \r\n    zoom.translateExtent = function(_) {\r\n      return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];\r\n    };\r\n  \r\n    zoom.constrain = function(_) {\r\n      return arguments.length ? (constrain = _, zoom) : constrain;\r\n    };\r\n  \r\n    zoom.duration = function(_) {\r\n      return arguments.length ? (duration = +_, zoom) : duration;\r\n    };\r\n  \r\n    zoom.interpolate = function(_) {\r\n      return arguments.length ? (interpolate = _, zoom) : interpolate;\r\n    };\r\n  \r\n    zoom.on = function() {\r\n      var value = listeners.on.apply(listeners, arguments);\r\n      return value === listeners ? zoom : value;\r\n    };\r\n  \r\n    zoom.clickDistance = function(_) {\r\n      return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);\r\n    };\r\n  \r\n    return zoom;\r\n  }\r\n  \r\n  exports.FormatSpecifier = FormatSpecifier;\r\n  exports.active = active;\r\n  exports.arc = arc;\r\n  exports.area = area$3;\r\n  exports.areaRadial = areaRadial;\r\n  exports.ascending = ascending;\r\n  exports.autoType = autoType;\r\n  exports.axisBottom = axisBottom;\r\n  exports.axisLeft = axisLeft;\r\n  exports.axisRight = axisRight;\r\n  exports.axisTop = axisTop;\r\n  exports.bisect = bisectRight;\r\n  exports.bisectLeft = bisectLeft;\r\n  exports.bisectRight = bisectRight;\r\n  exports.bisector = bisector;\r\n  exports.blob = blob;\r\n  exports.brush = brush;\r\n  exports.brushSelection = brushSelection;\r\n  exports.brushX = brushX;\r\n  exports.brushY = brushY;\r\n  exports.buffer = buffer;\r\n  exports.chord = chord;\r\n  exports.clientPoint = point;\r\n  exports.cluster = cluster;\r\n  exports.color = color;\r\n  exports.contourDensity = density;\r\n  exports.contours = contours;\r\n  exports.create = create;\r\n  exports.creator = creator;\r\n  exports.cross = cross;\r\n  exports.csv = csv$1;\r\n  exports.csvFormat = csvFormat;\r\n  exports.csvFormatBody = csvFormatBody;\r\n  exports.csvFormatRow = csvFormatRow;\r\n  exports.csvFormatRows = csvFormatRows;\r\n  exports.csvFormatValue = csvFormatValue;\r\n  exports.csvParse = csvParse;\r\n  exports.csvParseRows = csvParseRows;\r\n  exports.cubehelix = cubehelix;\r\n  exports.curveBasis = basis$2;\r\n  exports.curveBasisClosed = basisClosed$1;\r\n  exports.curveBasisOpen = basisOpen;\r\n  exports.curveBundle = bundle;\r\n  exports.curveCardinal = cardinal;\r\n  exports.curveCardinalClosed = cardinalClosed;\r\n  exports.curveCardinalOpen = cardinalOpen;\r\n  exports.curveCatmullRom = catmullRom;\r\n  exports.curveCatmullRomClosed = catmullRomClosed;\r\n  exports.curveCatmullRomOpen = catmullRomOpen;\r\n  exports.curveLinear = curveLinear;\r\n  exports.curveLinearClosed = linearClosed;\r\n  exports.curveMonotoneX = monotoneX;\r\n  exports.curveMonotoneY = monotoneY;\r\n  exports.curveNatural = natural;\r\n  exports.curveStep = step;\r\n  exports.curveStepAfter = stepAfter;\r\n  exports.curveStepBefore = stepBefore;\r\n  exports.customEvent = customEvent;\r\n  exports.descending = descending;\r\n  exports.deviation = deviation;\r\n  exports.dispatch = dispatch;\r\n  exports.drag = drag;\r\n  exports.dragDisable = dragDisable;\r\n  exports.dragEnable = yesdrag;\r\n  exports.dsv = dsv;\r\n  exports.dsvFormat = dsvFormat;\r\n  exports.easeBack = backInOut;\r\n  exports.easeBackIn = backIn;\r\n  exports.easeBackInOut = backInOut;\r\n  exports.easeBackOut = backOut;\r\n  exports.easeBounce = bounceOut;\r\n  exports.easeBounceIn = bounceIn;\r\n  exports.easeBounceInOut = bounceInOut;\r\n  exports.easeBounceOut = bounceOut;\r\n  exports.easeCircle = circleInOut;\r\n  exports.easeCircleIn = circleIn;\r\n  exports.easeCircleInOut = circleInOut;\r\n  exports.easeCircleOut = circleOut;\r\n  exports.easeCubic = cubicInOut;\r\n  exports.easeCubicIn = cubicIn;\r\n  exports.easeCubicInOut = cubicInOut;\r\n  exports.easeCubicOut = cubicOut;\r\n  exports.easeElastic = elasticOut;\r\n  exports.easeElasticIn = elasticIn;\r\n  exports.easeElasticInOut = elasticInOut;\r\n  exports.easeElasticOut = elasticOut;\r\n  exports.easeExp = expInOut;\r\n  exports.easeExpIn = expIn;\r\n  exports.easeExpInOut = expInOut;\r\n  exports.easeExpOut = expOut;\r\n  exports.easeLinear = linear$1;\r\n  exports.easePoly = polyInOut;\r\n  exports.easePolyIn = polyIn;\r\n  exports.easePolyInOut = polyInOut;\r\n  exports.easePolyOut = polyOut;\r\n  exports.easeQuad = quadInOut;\r\n  exports.easeQuadIn = quadIn;\r\n  exports.easeQuadInOut = quadInOut;\r\n  exports.easeQuadOut = quadOut;\r\n  exports.easeSin = sinInOut;\r\n  exports.easeSinIn = sinIn;\r\n  exports.easeSinInOut = sinInOut;\r\n  exports.easeSinOut = sinOut;\r\n  exports.entries = entries;\r\n  exports.extent = extent;\r\n  exports.forceCenter = center$1;\r\n  exports.forceCollide = collide;\r\n  exports.forceLink = link;\r\n  exports.forceManyBody = manyBody;\r\n  exports.forceRadial = radial;\r\n  exports.forceSimulation = simulation;\r\n  exports.forceX = x$2;\r\n  exports.forceY = y$2;\r\n  exports.formatDefaultLocale = defaultLocale;\r\n  exports.formatLocale = formatLocale;\r\n  exports.formatSpecifier = formatSpecifier;\r\n  exports.geoAlbers = albers;\r\n  exports.geoAlbersUsa = albersUsa;\r\n  exports.geoArea = area$1;\r\n  exports.geoAzimuthalEqualArea = azimuthalEqualArea;\r\n  exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;\r\n  exports.geoAzimuthalEquidistant = azimuthalEquidistant;\r\n  exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;\r\n  exports.geoBounds = bounds;\r\n  exports.geoCentroid = centroid;\r\n  exports.geoCircle = circle;\r\n  exports.geoClipAntimeridian = clipAntimeridian;\r\n  exports.geoClipCircle = clipCircle;\r\n  exports.geoClipExtent = extent$1;\r\n  exports.geoClipRectangle = clipRectangle;\r\n  exports.geoConicConformal = conicConformal;\r\n  exports.geoConicConformalRaw = conicConformalRaw;\r\n  exports.geoConicEqualArea = conicEqualArea;\r\n  exports.geoConicEqualAreaRaw = conicEqualAreaRaw;\r\n  exports.geoConicEquidistant = conicEquidistant;\r\n  exports.geoConicEquidistantRaw = conicEquidistantRaw;\r\n  exports.geoContains = contains$1;\r\n  exports.geoDistance = distance;\r\n  exports.geoEqualEarth = equalEarth;\r\n  exports.geoEqualEarthRaw = equalEarthRaw;\r\n  exports.geoEquirectangular = equirectangular;\r\n  exports.geoEquirectangularRaw = equirectangularRaw;\r\n  exports.geoGnomonic = gnomonic;\r\n  exports.geoGnomonicRaw = gnomonicRaw;\r\n  exports.geoGraticule = graticule;\r\n  exports.geoGraticule10 = graticule10;\r\n  exports.geoIdentity = identity$5;\r\n  exports.geoInterpolate = interpolate$1;\r\n  exports.geoLength = length$1;\r\n  exports.geoMercator = mercator;\r\n  exports.geoMercatorRaw = mercatorRaw;\r\n  exports.geoNaturalEarth1 = naturalEarth1;\r\n  exports.geoNaturalEarth1Raw = naturalEarth1Raw;\r\n  exports.geoOrthographic = orthographic;\r\n  exports.geoOrthographicRaw = orthographicRaw;\r\n  exports.geoPath = index$1;\r\n  exports.geoProjection = projection;\r\n  exports.geoProjectionMutator = projectionMutator;\r\n  exports.geoRotation = rotation;\r\n  exports.geoStereographic = stereographic;\r\n  exports.geoStereographicRaw = stereographicRaw;\r\n  exports.geoStream = geoStream;\r\n  exports.geoTransform = transform;\r\n  exports.geoTransverseMercator = transverseMercator;\r\n  exports.geoTransverseMercatorRaw = transverseMercatorRaw;\r\n  exports.gray = gray;\r\n  exports.hcl = hcl;\r\n  exports.hierarchy = hierarchy;\r\n  exports.histogram = histogram;\r\n  exports.hsl = hsl;\r\n  exports.html = html;\r\n  exports.image = image;\r\n  exports.interpolate = interpolateValue;\r\n  exports.interpolateArray = array$1;\r\n  exports.interpolateBasis = basis$1;\r\n  exports.interpolateBasisClosed = basisClosed;\r\n  exports.interpolateBlues = Blues;\r\n  exports.interpolateBrBG = BrBG;\r\n  exports.interpolateBuGn = BuGn;\r\n  exports.interpolateBuPu = BuPu;\r\n  exports.interpolateCividis = cividis;\r\n  exports.interpolateCool = cool;\r\n  exports.interpolateCubehelix = cubehelix$2;\r\n  exports.interpolateCubehelixDefault = cubehelix$3;\r\n  exports.interpolateCubehelixLong = cubehelixLong;\r\n  exports.interpolateDate = date;\r\n  exports.interpolateDiscrete = discrete;\r\n  exports.interpolateGnBu = GnBu;\r\n  exports.interpolateGreens = Greens;\r\n  exports.interpolateGreys = Greys;\r\n  exports.interpolateHcl = hcl$2;\r\n  exports.interpolateHclLong = hclLong;\r\n  exports.interpolateHsl = hsl$2;\r\n  exports.interpolateHslLong = hslLong;\r\n  exports.interpolateHue = hue$1;\r\n  exports.interpolateInferno = inferno;\r\n  exports.interpolateLab = lab$1;\r\n  exports.interpolateMagma = magma;\r\n  exports.interpolateNumber = interpolateNumber;\r\n  exports.interpolateNumberArray = numberArray;\r\n  exports.interpolateObject = object;\r\n  exports.interpolateOrRd = OrRd;\r\n  exports.interpolateOranges = Oranges;\r\n  exports.interpolatePRGn = PRGn;\r\n  exports.interpolatePiYG = PiYG;\r\n  exports.interpolatePlasma = plasma;\r\n  exports.interpolatePuBu = PuBu;\r\n  exports.interpolatePuBuGn = PuBuGn;\r\n  exports.interpolatePuOr = PuOr;\r\n  exports.interpolatePuRd = PuRd;\r\n  exports.interpolatePurples = Purples;\r\n  exports.interpolateRainbow = rainbow;\r\n  exports.interpolateRdBu = RdBu;\r\n  exports.interpolateRdGy = RdGy;\r\n  exports.interpolateRdPu = RdPu;\r\n  exports.interpolateRdYlBu = RdYlBu;\r\n  exports.interpolateRdYlGn = RdYlGn;\r\n  exports.interpolateReds = Reds;\r\n  exports.interpolateRgb = interpolateRgb;\r\n  exports.interpolateRgbBasis = rgbBasis;\r\n  exports.interpolateRgbBasisClosed = rgbBasisClosed;\r\n  exports.interpolateRound = interpolateRound;\r\n  exports.interpolateSinebow = sinebow;\r\n  exports.interpolateSpectral = Spectral;\r\n  exports.interpolateString = interpolateString;\r\n  exports.interpolateTransformCss = interpolateTransformCss;\r\n  exports.interpolateTransformSvg = interpolateTransformSvg;\r\n  exports.interpolateTurbo = turbo;\r\n  exports.interpolateViridis = viridis;\r\n  exports.interpolateWarm = warm;\r\n  exports.interpolateYlGn = YlGn;\r\n  exports.interpolateYlGnBu = YlGnBu;\r\n  exports.interpolateYlOrBr = YlOrBr;\r\n  exports.interpolateYlOrRd = YlOrRd;\r\n  exports.interpolateZoom = interpolateZoom;\r\n  exports.interrupt = interrupt;\r\n  exports.interval = interval$1;\r\n  exports.isoFormat = formatIso;\r\n  exports.isoParse = parseIso;\r\n  exports.json = json;\r\n  exports.keys = keys;\r\n  exports.lab = lab;\r\n  exports.lch = lch;\r\n  exports.line = line;\r\n  exports.lineRadial = lineRadial$1;\r\n  exports.linkHorizontal = linkHorizontal;\r\n  exports.linkRadial = linkRadial;\r\n  exports.linkVertical = linkVertical;\r\n  exports.local = local;\r\n  exports.map = map$1;\r\n  exports.matcher = matcher;\r\n  exports.max = max;\r\n  exports.mean = mean;\r\n  exports.median = median;\r\n  exports.merge = merge;\r\n  exports.min = min;\r\n  exports.mouse = mouse;\r\n  exports.namespace = namespace;\r\n  exports.namespaces = namespaces;\r\n  exports.nest = nest;\r\n  exports.now = now;\r\n  exports.pack = index$2;\r\n  exports.packEnclose = enclose;\r\n  exports.packSiblings = siblings;\r\n  exports.pairs = pairs;\r\n  exports.partition = partition;\r\n  exports.path = path;\r\n  exports.permute = permute;\r\n  exports.pie = pie;\r\n  exports.piecewise = piecewise;\r\n  exports.pointRadial = pointRadial;\r\n  exports.polygonArea = area$2;\r\n  exports.polygonCentroid = centroid$1;\r\n  exports.polygonContains = contains$2;\r\n  exports.polygonHull = hull;\r\n  exports.polygonLength = length$2;\r\n  exports.precisionFixed = precisionFixed;\r\n  exports.precisionPrefix = precisionPrefix;\r\n  exports.precisionRound = precisionRound;\r\n  exports.quadtree = quadtree;\r\n  exports.quantile = threshold;\r\n  exports.quantize = quantize;\r\n  exports.radialArea = areaRadial;\r\n  exports.radialLine = lineRadial$1;\r\n  exports.randomBates = bates;\r\n  exports.randomExponential = exponential$1;\r\n  exports.randomIrwinHall = irwinHall;\r\n  exports.randomLogNormal = logNormal;\r\n  exports.randomNormal = normal;\r\n  exports.randomUniform = uniform;\r\n  exports.range = sequence;\r\n  exports.rgb = rgb;\r\n  exports.ribbon = ribbon;\r\n  exports.scaleBand = band;\r\n  exports.scaleDiverging = diverging;\r\n  exports.scaleDivergingLog = divergingLog;\r\n  exports.scaleDivergingPow = divergingPow;\r\n  exports.scaleDivergingSqrt = divergingSqrt;\r\n  exports.scaleDivergingSymlog = divergingSymlog;\r\n  exports.scaleIdentity = identity$7;\r\n  exports.scaleImplicit = implicit;\r\n  exports.scaleLinear = linear$2;\r\n  exports.scaleLog = log$1;\r\n  exports.scaleOrdinal = ordinal;\r\n  exports.scalePoint = point$1;\r\n  exports.scalePow = pow$1;\r\n  exports.scaleQuantile = quantile;\r\n  exports.scaleQuantize = quantize$1;\r\n  exports.scaleSequential = sequential;\r\n  exports.scaleSequentialLog = sequentialLog;\r\n  exports.scaleSequentialPow = sequentialPow;\r\n  exports.scaleSequentialQuantile = sequentialQuantile;\r\n  exports.scaleSequentialSqrt = sequentialSqrt;\r\n  exports.scaleSequentialSymlog = sequentialSymlog;\r\n  exports.scaleSqrt = sqrt$1;\r\n  exports.scaleSymlog = symlog;\r\n  exports.scaleThreshold = threshold$1;\r\n  exports.scaleTime = time;\r\n  exports.scaleUtc = utcTime;\r\n  exports.scan = scan;\r\n  exports.schemeAccent = Accent;\r\n  exports.schemeBlues = scheme$l;\r\n  exports.schemeBrBG = scheme;\r\n  exports.schemeBuGn = scheme$9;\r\n  exports.schemeBuPu = scheme$a;\r\n  exports.schemeCategory10 = category10;\r\n  exports.schemeDark2 = Dark2;\r\n  exports.schemeGnBu = scheme$b;\r\n  exports.schemeGreens = scheme$m;\r\n  exports.schemeGreys = scheme$n;\r\n  exports.schemeOrRd = scheme$c;\r\n  exports.schemeOranges = scheme$q;\r\n  exports.schemePRGn = scheme$1;\r\n  exports.schemePaired = Paired;\r\n  exports.schemePastel1 = Pastel1;\r\n  exports.schemePastel2 = Pastel2;\r\n  exports.schemePiYG = scheme$2;\r\n  exports.schemePuBu = scheme$e;\r\n  exports.schemePuBuGn = scheme$d;\r\n  exports.schemePuOr = scheme$3;\r\n  exports.schemePuRd = scheme$f;\r\n  exports.schemePurples = scheme$o;\r\n  exports.schemeRdBu = scheme$4;\r\n  exports.schemeRdGy = scheme$5;\r\n  exports.schemeRdPu = scheme$g;\r\n  exports.schemeRdYlBu = scheme$6;\r\n  exports.schemeRdYlGn = scheme$7;\r\n  exports.schemeReds = scheme$p;\r\n  exports.schemeSet1 = Set1;\r\n  exports.schemeSet2 = Set2;\r\n  exports.schemeSet3 = Set3;\r\n  exports.schemeSpectral = scheme$8;\r\n  exports.schemeTableau10 = Tableau10;\r\n  exports.schemeYlGn = scheme$i;\r\n  exports.schemeYlGnBu = scheme$h;\r\n  exports.schemeYlOrBr = scheme$j;\r\n  exports.schemeYlOrRd = scheme$k;\r\n  exports.select = select;\r\n  exports.selectAll = selectAll;\r\n  exports.selection = selection;\r\n  exports.selector = selector;\r\n  exports.selectorAll = selectorAll;\r\n  exports.set = set$2;\r\n  exports.shuffle = shuffle;\r\n  exports.stack = stack;\r\n  exports.stackOffsetDiverging = diverging$1;\r\n  exports.stackOffsetExpand = expand;\r\n  exports.stackOffsetNone = none$1;\r\n  exports.stackOffsetSilhouette = silhouette;\r\n  exports.stackOffsetWiggle = wiggle;\r\n  exports.stackOrderAppearance = appearance;\r\n  exports.stackOrderAscending = ascending$3;\r\n  exports.stackOrderDescending = descending$2;\r\n  exports.stackOrderInsideOut = insideOut;\r\n  exports.stackOrderNone = none$2;\r\n  exports.stackOrderReverse = reverse;\r\n  exports.stratify = stratify;\r\n  exports.style = styleValue;\r\n  exports.sum = sum;\r\n  exports.svg = svg;\r\n  exports.symbol = symbol;\r\n  exports.symbolCircle = circle$2;\r\n  exports.symbolCross = cross$2;\r\n  exports.symbolDiamond = diamond;\r\n  exports.symbolSquare = square;\r\n  exports.symbolStar = star;\r\n  exports.symbolTriangle = triangle;\r\n  exports.symbolWye = wye;\r\n  exports.symbols = symbols;\r\n  exports.text = text;\r\n  exports.thresholdFreedmanDiaconis = freedmanDiaconis;\r\n  exports.thresholdScott = scott;\r\n  exports.thresholdSturges = thresholdSturges;\r\n  exports.tickFormat = tickFormat;\r\n  exports.tickIncrement = tickIncrement;\r\n  exports.tickStep = tickStep;\r\n  exports.ticks = ticks;\r\n  exports.timeDay = day;\r\n  exports.timeDays = days;\r\n  exports.timeFormatDefaultLocale = defaultLocale$1;\r\n  exports.timeFormatLocale = formatLocale$1;\r\n  exports.timeFriday = friday;\r\n  exports.timeFridays = fridays;\r\n  exports.timeHour = hour;\r\n  exports.timeHours = hours;\r\n  exports.timeInterval = newInterval;\r\n  exports.timeMillisecond = millisecond;\r\n  exports.timeMilliseconds = milliseconds;\r\n  exports.timeMinute = minute;\r\n  exports.timeMinutes = minutes;\r\n  exports.timeMonday = monday;\r\n  exports.timeMondays = mondays;\r\n  exports.timeMonth = month;\r\n  exports.timeMonths = months;\r\n  exports.timeSaturday = saturday;\r\n  exports.timeSaturdays = saturdays;\r\n  exports.timeSecond = second;\r\n  exports.timeSeconds = seconds;\r\n  exports.timeSunday = sunday;\r\n  exports.timeSundays = sundays;\r\n  exports.timeThursday = thursday;\r\n  exports.timeThursdays = thursdays;\r\n  exports.timeTuesday = tuesday;\r\n  exports.timeTuesdays = tuesdays;\r\n  exports.timeWednesday = wednesday;\r\n  exports.timeWednesdays = wednesdays;\r\n  exports.timeWeek = sunday;\r\n  exports.timeWeeks = sundays;\r\n  exports.timeYear = year;\r\n  exports.timeYears = years;\r\n  exports.timeout = timeout$1;\r\n  exports.timer = timer;\r\n  exports.timerFlush = timerFlush;\r\n  exports.touch = touch;\r\n  exports.touches = touches;\r\n  exports.transition = transition;\r\n  exports.transpose = transpose;\r\n  exports.tree = tree;\r\n  exports.treemap = index$3;\r\n  exports.treemapBinary = binary;\r\n  exports.treemapDice = treemapDice;\r\n  exports.treemapResquarify = resquarify;\r\n  exports.treemapSlice = treemapSlice;\r\n  exports.treemapSliceDice = sliceDice;\r\n  exports.treemapSquarify = squarify;\r\n  exports.tsv = tsv$1;\r\n  exports.tsvFormat = tsvFormat;\r\n  exports.tsvFormatBody = tsvFormatBody;\r\n  exports.tsvFormatRow = tsvFormatRow;\r\n  exports.tsvFormatRows = tsvFormatRows;\r\n  exports.tsvFormatValue = tsvFormatValue;\r\n  exports.tsvParse = tsvParse;\r\n  exports.tsvParseRows = tsvParseRows;\r\n  exports.utcDay = utcDay;\r\n  exports.utcDays = utcDays;\r\n  exports.utcFriday = utcFriday;\r\n  exports.utcFridays = utcFridays;\r\n  exports.utcHour = utcHour;\r\n  exports.utcHours = utcHours;\r\n  exports.utcMillisecond = millisecond;\r\n  exports.utcMilliseconds = milliseconds;\r\n  exports.utcMinute = utcMinute;\r\n  exports.utcMinutes = utcMinutes;\r\n  exports.utcMonday = utcMonday;\r\n  exports.utcMondays = utcMondays;\r\n  exports.utcMonth = utcMonth;\r\n  exports.utcMonths = utcMonths;\r\n  exports.utcSaturday = utcSaturday;\r\n  exports.utcSaturdays = utcSaturdays;\r\n  exports.utcSecond = second;\r\n  exports.utcSeconds = seconds;\r\n  exports.utcSunday = utcSunday;\r\n  exports.utcSundays = utcSundays;\r\n  exports.utcThursday = utcThursday;\r\n  exports.utcThursdays = utcThursdays;\r\n  exports.utcTuesday = utcTuesday;\r\n  exports.utcTuesdays = utcTuesdays;\r\n  exports.utcWednesday = utcWednesday;\r\n  exports.utcWednesdays = utcWednesdays;\r\n  exports.utcWeek = utcSunday;\r\n  exports.utcWeeks = utcSundays;\r\n  exports.utcYear = utcYear;\r\n  exports.utcYears = utcYears;\r\n  exports.values = values;\r\n  exports.variance = variance;\r\n  exports.version = version;\r\n  exports.voronoi = voronoi;\r\n  exports.window = defaultView;\r\n  exports.xml = xml;\r\n  exports.zip = zip;\r\n  exports.zoom = zoom;\r\n  exports.zoomIdentity = identity$9;\r\n  exports.zoomTransform = transform$1;\r\n  \r\n  Object.defineProperty(exports, '__esModule', { value: true });\r\n  \r\n  }));\n\n//# sourceURL=webpack:///./src/kg/dependency/d3.v5.js?");

/***/ })

/******/ });